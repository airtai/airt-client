{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python client for airt service","text":""},{"location":"#docs","title":"Docs","text":"<p>For full documentation, Please follow the below link:</p> <ul> <li>https://docs.airt.ai/</li> </ul>"},{"location":"#how-to-install","title":"How to install","text":"<p>If you don\u2019t have the airt library already installed, please install it using pip.</p> <pre><code>pip install airt-client\n</code></pre>"},{"location":"#how-to-use","title":"How to use","text":"<p>To access the airt service, you must first create a developer account. Please fill out the signup form below to get one:</p> <ul> <li>https://bit.ly/3hbXQLY</li> </ul> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>Client.get_token</code> method. It is necessary to get an access token; otherwise, you won\u2019t be able to access all of the airt service\u2019s APIs. You can either pass the username, password, and server address as parameters to the <code>Client.get_token</code> method or store them in the environment variables AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the     <code>User.enable_mfa</code>     method, which will generate a QR code. You can then scan the QR code     with an authenticator app, such as Google Authenticator and follow     the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling     <code>User.activate_mfa</code>     and passing the dynamically generated six-digit verification code     from your smartphone\u2019s authenticator app.</p> </li> </ol> <p>You can also disable MFA for your account at any time by calling the method <code>User.disable_mfa</code> method.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the     <code>User.enable_sso</code>     method with the SSO provider name and an email address. At the     moment, we only support \u201cgoogle\u201d and \u201cgithub\u201d as SSO     providers. We intend to support additional SSO providers in future     releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first     authenticate with the SSO provider. Call the     <code>Client.get_token</code>     with the same SSO provider you have enabled in the step above to     generate an SSO authorization URL. Please copy and paste it into     your preferred browser and complete the authentication process with     the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the     <code>Client.set_sso_token</code>     method to generate a new token and use it automatically in all     future interactions with the airt server.</p> </li> </ol> <p>For more information, please check:</p> <ul> <li> <p>Tutorial with more elaborate   example, and</p> </li> <li> <p>API with reference   documentation.</p> </li> </ul> <p>Here\u2019s a minimal example showing how to use airt services to train a model and make predictions.</p> <p>In the below example, the username, password, and server address are stored in AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL environment variables.</p>"},{"location":"#0-get-token","title":"0. Get token","text":"<pre><code># Importing necessary libraries\nfrom airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token()\n</code></pre>"},{"location":"#1-connect-data","title":"1. Connect data","text":"<pre><code># The input data in this case is a CSV file stored in an AWS S3 bucket. Before\n# you can use the data to train a model, it must be uploaded to the airt server.\n# Run the following command to upload the data to the airt server for further\n# processing.\ndata_blob = DataBlob.from_s3(uri=\"s3://test-airt-service/ecommerce_behavior_csv\")\n\n# Display the upload progress\ndata_blob.progress_bar()\n\n# Once the upload is complete, run the following command to preprocess and\n# prepare the data for training.\ndata_source = data_blob.to_datasource(\n    file_type=\"csv\", index_column=\"user_id\", sort_by=\"event_time\"\n)\n\n# Display the data preprocessing progress\ndata_source.progress_bar()\n\n# When the preprocessing is finished, you can run the following command to\n# display the head of the data to ensure everything is fine.\nprint(data_source.head())\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [01:00&lt;00:00, 60.62s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.39s/it]\n\n                          event_time event_type  product_id  \\\nuser_id                                                       \n10300217   2019-11-06 06:51:52+00:00       view    26300219   \n253299396  2019-11-05 21:25:44+00:00       view     2400724   \n253299396  2019-11-05 21:27:43+00:00       view     2400724   \n272811580  2019-11-05 19:38:48+00:00       view     3601406   \n272811580  2019-11-05 19:40:21+00:00       view     3601406   \n288929779  2019-11-06 05:39:21+00:00       view    15200134   \n288929779  2019-11-06 05:39:34+00:00       view    15200134   \n310768124  2019-11-05 20:25:52+00:00       view     1005106   \n315309190  2019-11-05 23:13:43+00:00       view    31501222   \n339186405  2019-11-06 07:00:32+00:00       view     1005115\n\n                   category_id              category_code  \\\nuser_id                                                     \n10300217   2053013563424899933                       None   \n253299396  2053013563743667055    appliances.kitchen.hood   \n253299396  2053013563743667055    appliances.kitchen.hood   \n272811580  2053013563810775923  appliances.kitchen.washer   \n272811580  2053013563810775923  appliances.kitchen.washer   \n288929779  2053013553484398879                       None   \n288929779  2053013553484398879                       None   \n310768124  2053013555631882655     electronics.smartphone   \n315309190  2053013558031024687                       None   \n339186405  2053013555631882655     electronics.smartphone\n\n                               brand    price  \\\nuser_id                                         \n10300217                     sokolov    40.54   \n253299396                      bosch   246.85   \n253299396                      bosch   246.85   \n272811580                       beko   195.60   \n272811580                       beko   195.60   \n288929779                      racer    55.86   \n288929779                      racer    55.86   \n310768124                      apple  1422.31   \n315309190  dobrusskijfarforovyjzavod   115.18   \n339186405                      apple   915.69\n\n                                   user_session  \nuser_id                                          \n10300217   d1fdcbf1-bb1f-434b-8f1a-4b77f29a84a0  \n253299396  b097b84d-cfb8-432c-9ab0-a841bb4d727f  \n253299396  b097b84d-cfb8-432c-9ab0-a841bb4d727f  \n272811580  d18427ab-8f2b-44f7-860d-a26b9510a70b  \n272811580  d18427ab-8f2b-44f7-860d-a26b9510a70b  \n288929779  fc582087-72f8-428a-b65a-c2f45d74dc27  \n288929779  fc582087-72f8-428a-b65a-c2f45d74dc27  \n310768124  79d8406f-4aa3-412c-8605-8be1031e63d6  \n315309190  e3d5a1a4-f8fd-4ac3-acb7-af6ccd1e3fa9  \n339186405  15197c7e-aba0-43b4-9f3a-a815e31ade40\n</code></pre>"},{"location":"#2-train","title":"2. Train","text":"<pre><code># We assume that the input data for training a model includes the client_column\n# target_column, and timestamp column, which specify the time of an event.\nfrom datetime import timedelta\n\nmodel = data_source.train(\n    client_column=\"user_id\",\n    target_column=\"event_type\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3),\n)\n\n# Display model training progress\nmodel.progress_bar()\n\n# Once the model training is complete, call the following method to display\n# multiple evaluation metrics to evaluate the model's performance.\nprint(model.evaluate())\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 126.62it/s]\n\n            eval\naccuracy   0.985\nrecall     0.962\nprecision  0.934\n</code></pre>"},{"location":"#3-predict","title":"3. Predict","text":"<pre><code># Finally, you can use the trained model to make predictions by calling the\n# method below.\npredictions = model.predict()\n\n# Display model prediction progress\npredictions.progress_bar()\n\n# If the dataset is small enough, you can use the following method to download\n# the prediction results as a pandas DataFrame.\nprint(predictions.to_pandas().head())\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.38s/it]\n\n              Score\nuser_id            \n520088904  0.979853\n530496790  0.979157\n561587266  0.979055\n518085591  0.978915\n558856683  0.977960\n</code></pre>"},{"location":"API_Client/","title":"API_Client","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime, timedelta\nfrom random import randrange\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._components.user import User\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_SUPER_USER, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>def mask(s: str) -&gt; str:\n    return \"*\" * len(s)\n\n\nassert mask(\"test\") == \"****\"\n</code></pre> <pre><code>username = \"fake_username\"\npassword = \"fake_password\"\n\nexpected = (\"fake_username\", \"fake_password\")\n\nactual = _get_credentials(username, password)\n\ndisplay(actual)\nassert actual == expected\n</code></pre> <pre><code>('fake_username', 'fake_password')\n</code></pre> <pre><code># Assign env vars to temp variables and delete the env vars\nif os.environ.get(SERVICE_USERNAME):\n    airt_service_username = os.environ.get(SERVICE_USERNAME)\n    del os.environ[SERVICE_USERNAME]\n\nif os.environ.get(SERVICE_PASSWORD):\n    airt_service_password = os.environ.get(SERVICE_PASSWORD)\n    del os.environ[SERVICE_PASSWORD]\n\nwith pytest.raises(KeyError) as e:\n    _get_credentials()\n\ndisplay(f\"{e.value=}\")\nassert (\n    f\"'The username and password are neither passed as parameters nor set in the environment variables `{SERVICE_USERNAME}` and `{SERVICE_PASSWORD}`.'\"\n    == str(e.value)\n)\n</code></pre> <pre><code>\"e.value=KeyError('The username and password are neither passed as parameters nor set in the environment variables `AIRT_SERVICE_USERNAME` and `AIRT_SERVICE_PASSWORD`.')\"\n</code></pre> <pre><code># Assign only username in env var\nos.environ[SERVICE_USERNAME] = airt_service_username\n\nwith pytest.raises(KeyError) as e:\n    _get_credentials()\n\ndisplay(f\"{e.value=}\")\nassert (\n    f\"'The password is neither passed as parameter nor set in the environment variable {SERVICE_PASSWORD}.'\"\n    == str(e.value)\n)\n</code></pre> <pre><code>\"e.value=KeyError('The password is neither passed as parameter nor set in the environment variable AIRT_SERVICE_PASSWORD.')\"\n</code></pre> <pre><code># assign airt_service_password in env var\nos.environ[SERVICE_PASSWORD] = airt_service_password\n\n# deleting airt_service_username in env var\nif os.environ.get(SERVICE_USERNAME):\n    del os.environ[SERVICE_USERNAME]\n\nwith pytest.raises(KeyError) as e:\n    _get_credentials()\n\ndisplay(f\"{e.value=}\")\nassert (\n    f\"'The username is neither passed as parameter nor set in the environment variable {SERVICE_USERNAME}.'\"\n    == str(e.value)\n)\n\n# resetting the username and password env variables\nos.environ[SERVICE_USERNAME] = airt_service_username\nassert os.environ[SERVICE_USERNAME] == airt_service_username\nassert os.environ[SERVICE_PASSWORD] == airt_service_password\n</code></pre> <pre><code>\"e.value=KeyError('The username is neither passed as parameter nor set in the environment variable AIRT_SERVICE_USERNAME.')\"\n</code></pre> <p>source</p>"},{"location":"API_Client/#client","title":"Client","text":"<pre><code> Client (server:str, auth_token:str,\n         sso_authorization_url:Optional[str]=None)\n</code></pre> <p>A class for authenticating and accessing the airt service.</p> <p>To access the airt service, you must first create a developer account. To obtain one, please contact us at info@airt.ai.</p> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>get_token</code> method. It is necessary to get an access token; otherwise, you won\u2019t be able to access all of the airt service\u2019s APIs. You can either pass the username, password, and server address as parameters to the <code>get_token</code> method or store them in the environment variables AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL.</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the     <code>User.enable_mfa</code>     method, which will generate a QR code. You can then scan the QR code     with an authenticator app, such as Google Authenticator and follow     the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling     <code>User.activate_mfa</code>     and passing the dynamically generated six-digit verification code     from your smartphone\u2019s authenticator app.</p> </li> </ol> <p>After activating MFA for your account, you must pass the dynamically generated six-digit verification code, along with your username and password, to the <code>get_token</code> method to generate new tokens.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the     <code>User.enable_sso</code>     method with the SSO provider name and an email address. At the     moment, we only support \u201cgoogle\u201d and \u201cgithub\u201d as SSO     providers. We intend to support additional SSO providers in future     releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first     authenticate with the SSO provider. Call the <code>get_token</code> with the     same SSO provider you have enabled in the step above to generate an     SSO authorization URL. Please copy and paste it into your preferred     browser and complete the authentication process with the SSO     provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the     <code>set_sso_token</code> method to generate a new token and use it     automatically in all future interactions with the airt server.</p> </li> </ol> <p>Here\u2019s an example of how to use the Client class to authenticate and display the details of the currently logged-in user.</p> <p>Example: ```python # Importing necessary libraries from airt.client import Client, User</p> <pre><code># Authenticate\n# MFA enabled users must pass the OTP along with the username and password\n# to the get_token method.\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Print the logged-in user details\nprint(User.details())\n```\n</code></pre> <p>``` python</p>"},{"location":"API_Client/#run-example-for-client","title":"Run example for Client","text":"<p>username = os.environ[SERVICE_USERNAME] password = os.environ[SERVICE_PASSWORD]</p> <p>run_examples_from_docstring(     Client,     username=username,     password=password, ) <pre><code>&lt;pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     # MFA enabled users must pass the OTP along with the username and password                                  \u2502\n\u2502     # to the get_token method.                                                                                  \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the logged-in user details                                                                          \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 {'username': 'johndoe', 'first_name': 'John', 'last_name': 'Doe', 'email': 'johndoe@airt.ai',               \u2502 \u2502\n\u2502 \u2502 'subscription_type': 'small', 'super_user': False, 'phone_number': None, 'uuid':                            \u2502 \u2502\n\u2502 \u2502 '7363f72b-7ebb-425c-832f-99c42fb7a016', 'disabled': False, 'created': '2022-10-27T04:39:16',                \u2502 \u2502\n\u2502 \u2502 'is_phone_number_verified': False, 'is_mfa_active': False}                                                  \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n&lt;/pre&gt;\n\n``` python\n# Run example for Client.get_token\n# The below example will throw Incorrect username or password, thats expected because\n# if we send valid username and password, the sms will be sent to the passed phone number.\n# We don't want to send the SMS each time we run the tests\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        Client.get_token,\n        username=\"invalid_username\",\n        password=\"invalid_username\",\n        otp=\"000000\",\n        supress_stderr=True,\n    )\n</code></pre></p> <pre><code>&lt;module&gt;:15: No type or annotation for parameter 'username'\n&lt;module&gt;:17: No type or annotation for parameter 'password'\n&lt;module&gt;:19: No type or annotation for parameter 'server'\n&lt;module&gt;:23: No type or annotation for parameter 'sso_provider'\n&lt;module&gt;:25: No type or annotation for parameter 'otp'\n&lt;module&gt;:28: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n&lt;module&gt;:34: Failed to get 'exception: description' pair from ''\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the logged-in user details                                                                          \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for Client.set_sso_token\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        Client.set_sso_token,\n        username=\"invalid_username\",\n        password=\"invalid_username\",\n        sso_email=\"sso_email@mail.com\",\n        supress_stderr=True,\n    )\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Enable single sign-on (SSO) and use google as the provider                                                \u2502\n\u2502     sso_provider=\"google\"                                                                                       \u2502\n\u2502     sso_email=\"{fill in sso_email}\"                                                                             \u2502\n\u2502     User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate using Single sign-on (SSO)                                                                   \u2502\n\u2502     # To generate a token using SSO, you must first authenticate with the provider.                             \u2502\n\u2502     # The command below will generate an authorization URL for you.                                             \u2502\n\u2502     # Please copy and paste it into your preferred browser and complete the                                     \u2502\n\u2502     # SSO provider authentication within 10 minutes. Otherwise, the SSO login                                   \u2502\n\u2502     # will time out and you will need to call the get_token method again.                                       \u2502\n\u2502     sso_url = Client.get_token(sso_provider=sso_provider)                                                       \u2502\n\u2502     print(sso_url)                                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Once the provider authentication is successful, call the below method to                                  \u2502\n\u2502     # set the generated token                                                                                   \u2502\n\u2502     Client.set_sso_token()                                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If set_sso_token fails, the line below will throw an error.                                               \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for Client.version\n\nrun_examples_from_docstring(\n    Client.version,\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client                                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Get the client and server versions                                                                        \u2502\n\u2502     print(Client.version())                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 {'client': '2022.10.0rc0', 'server': '2022.10.0rc0'}                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for Client.set_token\n\nrun_examples_from_docstring(Client.set_token, username=username, password=password)\n</code></pre> <pre><code>&lt;module&gt;:8: No type or annotation for parameter 'token'\n&lt;module&gt;:10: No type or annotation for parameter 'server'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Optional Step: For demonstration purpose, generate a new token                                            \u2502\n\u2502     # When you generate a new token with the get_token method, you do not                                       \u2502\n\u2502     # need to explicitly call set_token. It is shown here for demo purposes only.                               \u2502\n\u2502     # Skip this step if you already have a valid token and pass it directly to                                  \u2502\n\u2502     # the set_token method below                                                                                \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Setting a valid token                                                                                     \u2502\n\u2502     Client.set_token(token=Client.auth_token)                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If set_token fails, the line below will throw an error.                                                   \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 {'username': 'johndoe', 'first_name': 'John', 'last_name': 'Doe', 'email': 'johndoe@airt.ai',               \u2502 \u2502\n\u2502 \u2502 'subscription_type': 'small', 'super_user': False, 'phone_number': None, 'uuid':                            \u2502 \u2502\n\u2502 \u2502 '7363f72b-7ebb-425c-832f-99c42fb7a016', 'disabled': False, 'created': '2022-10-27T04:39:16',                \u2502 \u2502\n\u2502 \u2502 'is_phone_number_verified': False, 'is_mfa_active': False}                                                  \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Tests for Client._get_server_url_and_token.\n# cls.server is set to None, and the env variable is not set. The public URL should be returned\n\n# deleting the env variable\n_SERVER_URL = None\n\nif os.environ.get(SERVER_URL):\n    _SERVER_URL = os.environ.get(SERVER_URL)\n    del os.environ[SERVER_URL]\n\nserver, auth_token = Client._get_server_url_and_token()\n\nexpected = \"https://api.airt.ai\"\n\ndisplay(f\"{server=}\")\nassert server == expected\n\n# Assigning the value back to the env variable\nif _SERVER_URL:\n    os.environ[SERVER_URL] = _SERVER_URL\n</code></pre> <pre><code>\"server='https://api.airt.ai'\"\n</code></pre> <pre><code># Tests for Client._get_server_url_and_token.\n# cls.server is set to \"http://example-service:6006\", the same should be returned\n\nClient.server = \"http://example-service:6006\"\n\nserver, auth_token = Client._get_server_url_and_token()\n\nexpected = \"http://example-service:6006\"\n\ndisplay(f\"{len(server)=} {server=}\")\ndisplay(f\"{len(expected)=}\")\nassert server == expected\n</code></pre> <pre><code>\"len(server)=27 server='http://example-service:6006'\"\n\n'len(expected)=27'\n</code></pre> <pre><code># Tests for Client._get_server_url_and_token.\n# cls.server is set to None, and getting the server URL from env variable\n\nClient.server = None\n\nserver, auth_token = Client._get_server_url_and_token()\n\nexpected = os.environ.get(SERVER_URL)\n\ndisplay(f\"{len(server)=} {server=}\")\ndisplay(f\"{len(expected)=}\")\nassert server == expected\n</code></pre> <pre><code>\"len(server)=24 server='http://airt-service:6006'\"\n\n'len(expected)=24'\n</code></pre> <pre><code># Tests for version\n\nversion = Client.version()\n\ndisplay(version)\n\nassert list(version.keys()) == [\"client\", \"server\"]\n</code></pre> <pre><code>{'client': '2022.10.0rc0', 'server': '2022.10.0rc0'}\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Negative scenario: generating SSO token without enabling the SSO provider\nsso_providers = [\"google\", \"github\"]\nfor sso_provider in sso_providers:\n    with pytest.raises(ValueError) as e:\n        Client.get_token(sso_provider=sso_provider)\n    assert \"SSO is not enabled\" in str(e.value)\n    display(str(e.value))\n</code></pre> <pre><code>'SSO is not enabled for the provider.'\n\n'SSO is not enabled for the provider.'\n</code></pre> <pre><code># A helper context manager to create new users for testing\n@contextmanager\ndef create_normal_user_for_testing():\n    try:\n        # 1. Get Super user token\n        username = os.environ[SERVICE_SUPER_USER]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n\n        _user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n        _email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n        _password = \"random_password\"\n\n        req_data = dict(\n            username=_user_name,\n            first_name=\"random_first_name\",\n            last_name=\"random_last_name\",\n            email=_email,\n            password=_password,\n            super_user=False,\n            subscription_type=\"test\",\n        )\n\n        response = Client._post_data(relative_url=f\"/user/\", json=req_data)\n\n        response_df = pd.DataFrame(response, index=[0])[User.USER_COLS]\n\n        assert response_df.shape == (1, len(User.USER_COLS))\n\n        Client.get_token(username=_user_name, password=_password)\n\n        yield _user_name, _password\n\n    finally:\n        pass\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Positive scenario: SSO enabled user generating token using non-SSO flow\n\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"sso_email@mail.com\"\n    sso_provider = \"google\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    Client.get_token(username=username, password=password)\n    server, auth_token = Client._get_server_url_and_token()\n\n    display(f\"{server=}, {mask(auth_token)=}\")\n</code></pre> <pre><code>\"server='http://airt-service:6006', mask(auth_token)='*************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Positive scenario: SSO enabled user generating token using SSO flow\n\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_email@mail.com\"\n    sso_provider = \"google\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    sso_authorization_url = Client.get_token(\n        username=username, password=password, sso_provider=sso_provider\n    )\n    display(sso_authorization_url)\n    assert sso_authorization_url == Client.sso_authorization_url\n    assert sso_provider in Client.sso_authorization_url\n</code></pre> <pre><code>'https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=842138153914-6kvm51cpin7iocg3nrsnl44s3d24u047.apps.googleusercontent.com&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A6006%2Fsso%2Fcallback&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&amp;state=113d57e1be6c79c4dbb193654c6872fb0e5e0a903f6daefeccd84f247d0b43d0_random_user_6403_7411&amp;prompt=select_account'\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Positive scenario: SSO enabled user generating token using SSO flow\n\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_email@mail.com\"\n    sso_provider = \"github\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    sso_authorization_url = Client.get_token(\n        username=username, password=password, sso_provider=sso_provider\n    )\n    display(sso_authorization_url)\n    assert sso_authorization_url == Client.sso_authorization_url\n    assert sso_provider in Client.sso_authorization_url\n</code></pre> <pre><code>'https://github.com/login/oauth/authorize?response_type=code&amp;client_id=a0f58d9e50375190dbf0&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A6006%2Fsso%2Fcallback&amp;scope=user%3Aemail&amp;state=3847806b1fdfa263921df7c68b70ba4eb15e15283bb5b341f4a3387d33d018d9_random_user_7488_1316&amp;prompt=select_account'\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Negative scenario: Non-MFA user passing OTP while intiating SSO flow\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_user@gmail.com\"\n    sso_provider = \"github\"\n    random_otp = \"123456\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    with pytest.raises(ValueError) as e:\n        Client.get_token(sso_provider=sso_provider, otp=random_otp)\n    assert \"Incorrect username or password\" in str(e.value)\nstr(e.value)\n</code></pre> <pre><code>'Incorrect username or password. Please try again.'\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Negative scenario: Generating token for wrong sso_provider\n\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_user@gmail.com\"\n    sso_provider = \"github\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    with pytest.raises(ValueError) as e:\n        Client.get_token(sso_provider=sso_provider)\n    assert \"SSO is not enabled\" in str(e.value)\nstr(e.value)\n</code></pre> <pre><code>'SSO is not enabled for the provider.'\n</code></pre> <pre><code># Tests for Client.get_token\n# Testing the SSO flow\n# Negative scenario: Generating token for invalid sso_provider\n\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_user@gmail.com\"\n    sso_provider = \"google\"\n    invalid_sso_provider = \"invalid_sso_provider\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    with pytest.raises(ValueError) as e:\n        Client.get_token(sso_provider=invalid_sso_provider)\nstr(e.value)\n</code></pre> <pre><code>\"Invalid SSO provider. Valid SSO providers are: ['google', 'github']\"\n</code></pre> <pre><code># Tests for Client.set_sso_token\n# Negative scenario: Trying to set sso token without completing the SSO authentication\n\nwith create_normal_user_for_testing() as credentials:\n    username = credentials[0]\n    password = credentials[1]\n\n    sso_email = \"random_email@mail.com\"\n    sso_provider = \"google\"\n    actual = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=None),\n    )\n    sso_authorization_url = Client.get_token(\n        username=username, password=password, sso_provider=sso_provider\n    )\n    display(sso_authorization_url)\n\n    assert sso_authorization_url == Client.sso_authorization_url\n\n    with pytest.raises(ValueError) as e:\n        Client.set_sso_token()\n\n    err = str(e.value)\n    assert \"SSO authentication is not complete\" in err\n    display(err)\n</code></pre> <pre><code>'https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=842138153914-6kvm51cpin7iocg3nrsnl44s3d24u047.apps.googleusercontent.com&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A6006%2Fsso%2Fcallback&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&amp;state=6466e1741b7841f6176fb9630f551bf965d9b1467b84a7714aa30364138fa7a1_random_user_1211_1669&amp;prompt=select_account'\n\n'SSO authentication is not complete. Please click on the authentication link you have received while requesting a new token and complete the login process first.'\n</code></pre> <pre><code># Tests for Client\n# Checking positive scenario. Read both username and password from the environment variables\nClient.get_token()\nserver, auth_token = Client._get_server_url_and_token()\n\ndisplay(f\"{server=}, {mask(auth_token)=}\")\n\nassert server == os.environ.get(SERVER_URL)\nassert len(auth_token) &gt;= 127  # maybe\n</code></pre> <pre><code>\"server='http://airt-service:6006', mask(auth_token)='*******************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for Client\n# Checking positive scenario. Passing all the required parameters in arguments\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nClient.get_token(username=username, password=password)\n\nserver, auth_token = Client._get_server_url_and_token()\ndisplay(f\"{server=}, {mask(auth_token)=}\")\n\nassert server == os.environ.get(SERVER_URL)\nassert len(auth_token) &gt;= 127  # maybe\n</code></pre> <pre><code>\"server='http://airt-service:6006', mask(auth_token)='*******************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for Client\n# Checking negative scenario. Passing wrong username and password combination\n\nusername = \"randomUser\"\npassword = \"whatever\"\n\nwith pytest.raises(ValueError) as e:\n    Client.get_token(username=username, password=password)\n\ndisplay(f\"{e.value=}\")\nassert \"Incorrect username or password\" in str(e.value)\n</code></pre> <pre><code>\"e.value=ValueError('Incorrect username or password. Please try again.')\"\n</code></pre> <pre><code># Test cases for Client._get_data\n# Checking positive scenario.\n\nresponse = Client._get_data(relative_url=f\"/version\")\n\ndisplay(f\"{response=}\")\nassert \"airt_service\" in response.keys()\n</code></pre> <pre><code>\"response={'airt_service': '2022.10.0rc0'}\"\n</code></pre> <pre><code># Test cases for Client._delete_data\n\n\ndef create_and_return_test_db_id():\n    uri = \"s3://test-airt-service/account_312571_events_csv\"\n    access_key = os.environ[\"AWS_ACCESS_KEY_ID\"]\n    secret_key = os.environ[\"AWS_SECRET_ACCESS_KEY\"]\n    tag = None\n\n    response = Client._post_data(\n        relative_url=\"/datablob/from_s3\",\n        json=dict(uri=uri, access_key=access_key, secret_key=secret_key, tag=tag),\n    )\n\n    return response[\"uuid\"]\n\n\ndb_id = create_and_return_test_db_id()\n\n# Deleting the sample datablob\nresponse = Client._delete_data(relative_url=f\"/datablob/{db_id}\")\nassert response[\"uuid\"] == db_id\n\n# Negative scenario. Trying to delete already deleted data source\nwith pytest.raises(ValueError) as e:\n    Client._delete_data(relative_url=f\"/datablob/{db_id}\")\n\ndisplay(f\"\\n{e.value=}\")\n</code></pre> <pre><code>\"\\ne.value=ValueError('The datablob has already been deleted.')\"\n</code></pre> <pre><code># Test cases for Client.set_token\n# Negative case: The token is not passed as parameter nor set in SERVICE_TOKEN\n\nwith pytest.raises(KeyError) as e:\n    Client.set_token()\n\ndisplay(f\"{str(e.value)=}\")\nassert (\n    str(e.value)\n    == f\"'The token is neither passed as parameter nor set in the environment variable {SERVICE_TOKEN}.'\"\n)\n</code></pre> <pre><code>'str(e.value)=\"\\'The token is neither passed as parameter nor set in the environment variable AIRT_SERVICE_TOKEN.\\'\"'\n</code></pre> <pre><code># Test cases for Client.set_token\n# Positive case: Setting valid token in SERVICE_TOKEN env variable and accessing the API\n\nos.environ[SERVICE_TOKEN] = auth_token\n\nClient.set_token()\n\nresponse = Client._get_data(\n    relative_url=f\"/datablob/?disabled=false&amp;completed=false&amp;offset=0&amp;limit=100\"\n)\n\ndisplay(f\"{type(response)=}\")\nassert isinstance(response, list)\n\n# Deleting the env variable\ndel os.environ[SERVICE_TOKEN]\nassert not os.environ.get(SERVICE_TOKEN)\n</code></pre> <pre><code>\"type(response)=&lt;class 'list'&gt;\"\n</code></pre> <pre><code># Test cases for Client.set_token\n# Positive case: Setting token and server using Client.set_token and asserting the same using Client._get_server_url_and_token\n\nfake_token = \"fake-token\"\nfake_server = \"http://fake-server\"\n\nClient.set_token(fake_token, fake_server)\n\nserver, auth_token = Client._get_server_url_and_token()\n\ndisplay(f\"{server=}, {auth_token=}\")\nassert (server, auth_token) == (fake_server, fake_token)\n</code></pre> <pre><code>\"server='http://fake-server', auth_token='fake-token'\"\n</code></pre> <pre><code># Test cases for Client.set_token\n# Negative case: Setting invalid token and accessing the API\n\nClient.set_token(fake_token)\n\nwith pytest.raises(ValueError) as e:\n    Client._get_data(\n        relative_url=f\"/datablob/?disabled=false&amp;completed=false&amp;offset=0&amp;limit=100\"\n    )\n\n\ndisplay(f\"{str(e.value)=}\")\n</code></pre> <pre><code>\"str(e.value)='Your credentials could not be validated. The developer token/apikey is invalid or expired.'\"\n</code></pre> <pre><code># Test cases for Client.set_token\n# Positive case: Setting valid token and accessing the API\n\nClient.get_token()\nserver, auth_token = Client._get_server_url_and_token()\n\nClient.set_token(auth_token)\n\nresponse = Client._get_data(\n    relative_url=f\"/datablob/?disabled=false&amp;completed=false&amp;offset=0&amp;limit=100\"\n)\n\ndisplay(f\"{type(response)=}\")\nassert isinstance(response, list)\n</code></pre> <pre><code>\"type(response)=&lt;class 'list'&gt;\"\n</code></pre>"},{"location":"API_DataBlob/","title":"API_DataBlob","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import json\nimport logging\nimport shutil\nimport tempfile\nfrom urllib.parse import quote_plus as urlquote\n\nimport pytest\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\nfrom sqlmodel import create_engine\n\nimport airt._sanitizer\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nTEST_S3_CSV_URI = \"s3://test-airt-service/ecommerce_behavior_csv\"\nTEST_AZURE_URI = \"https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <p>source</p>"},{"location":"API_DataBlob/#datablob","title":"DataBlob","text":"<pre><code> DataBlob (uuid:str, type:Optional[str]=None, source:Optional[str]=None,\n           region:Optional[str]=None, cloud_provider:Optional[str]=None,\n           datasources:Optional[List[str]]=None,\n           total_steps:Optional[int]=None,\n           completed_steps:Optional[int]=None,\n           folder_size:Optional[int]=None, disabled:Optional[bool]=None,\n           pulled_on:Optional[str]=None, user:Optional[str]=None,\n           tags:Optional[List]=None, error:Optional[str]=None)\n</code></pre> <p>A class for importing and processing data from sources such as CSV/parquet files, databases, AWS S3 buckets, and Azure Blob Storage.</p> <p>Currently, the only way to instantiate the DataBlob class is to call one of the following static methods <code>from_local</code>, <code>from_mysql</code>, <code>from_clickhouse</code>, <code>from_s3</code>, or <code>from_azure_blob_storage</code> which imports the data in the parquet file format from:</p> <ul> <li> <p>a local CSV/parquet file,</p> </li> <li> <p>a MySql database,</p> </li> <li> <p>a ClickHouse database</p> </li> <li> <p>an AWS S3 bucket, and</p> </li> <li> <p>an Azure Blob Storage respectively.</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <pre><code># Run example for _docstring_example\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    _docstring_example,\n    username=username,\n    password=password,\n    uri=TEST_S3_URI,\n    file_type=\"parquet\",\n    index_column=\"user_id\",\n    sort_by=\"event_time\",\n    tag_name=\"v1.0\",\n)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The                                     \u2502\n\u2502     # access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and                                        \u2502\n\u2502     # AWS_SECRET_ACCESS_KEY environment variables, and the region is set to                                     \u2502\n\u2502     # eu-west-3; feel free to change the cloud provider and the region to                                       \u2502\n\u2502     # suit your needs.                                                                                          \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     # Call the wait method to wait for the progress to finish but                                               \u2502\n\u2502     # without displaying an interactive progress bar.                                                           \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the ready status                                                                                  \u2502\n\u2502     # If the datablob is successfully uploaded, True will be returned.                                          \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of all datablob created by the currently                                              \u2502\n\u2502     # logged-in user                                                                                            \u2502\n\u2502     print(DataBlob.as_df(DataBlob.ls()))                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datasource                                                                                       \u2502\n\u2502     ds = db.to_datasource(                                                                                      \u2502\n\u2502         file_type=\"{fill in file_type}\",                                                                        \u2502\n\u2502         index_column=\"{fill in index_column}\",                                                                  \u2502\n\u2502         sort_by=\"{fill in sort_by}\",                                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     ds.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the head of the data to ensure everything is fine.                                                \u2502\n\u2502     print(ds.head())                                                                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Tag the datablob                                                                                          \u2502\n\u2502     print(db.tag(name=\"{fill in tag_name}\"))                                                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Delete the datablob                                                                                       \u2502\n\u2502     print(db.delete())                                                                                          \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 True                                                                                                        \u2502 \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  2266a8b6-b242-4400-96e6-a3eda7157482           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... folder_size ready                             \u2502 \u2502\n\u2502 \u2502 0  2266a8b6-b242-4400-96e6-a3eda7157482           &lt;none&gt;  ...    10191763  True                             \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 10 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                          event_time  ...                          user_session                              \u2502 \u2502\n\u2502 \u2502 user_id                              ...                                                                    \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-03 14:26:26+00:00  ...  6c1f98d8-064e-4688-a8db-d261d9f94979                              \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-03 14:26:38+00:00  ...  6c1f98d8-064e-4688-a8db-d261d9f94979                              \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-04 05:56:10+00:00  ...  6718074b-3058-41c2-a082-970cdeeb4a8e                              \u2502 \u2502\n\u2502 \u2502 275256741 2019-11-01 02:23:03+00:00  ...  48b5b9c0-3d1b-4380-94f8-dcadb9dd7b5c                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:02+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:43+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:55+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:09:20+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:10:59+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:14:46+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [10 rows x 8 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                           datablob_uuid  ... ready                                                          \u2502 \u2502\n\u2502 \u2502 0  2266a8b6-b242-4400-96e6-a3eda7157482  ...  True                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 10 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                           datablob_uuid  ... ready                                                          \u2502 \u2502\n\u2502 \u2502 0  2266a8b6-b242-4400-96e6-a3eda7157482  ...  True                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 10 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:35&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00,  5.06s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00, 40.58s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:35&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:40&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:45&lt;00:00,  5.06s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:45&lt;00:00, 45.66s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"API_DataBlob/#set_default_cloud_provider","title":"set_default_cloud_provider","text":"<pre><code> set_default_cloud_provider (cls:__main__.DataBlob, cloud_provider:str,\n                             region:Optional[str]=None)\n</code></pre> <p>Sets the default destination value for the cloud_provider and the region.</p> <p>Whenever you call the from_* methods of the <code>DataBlob</code> class inside this context manager, the destination cloud_provider and region set in this context will be passed to the from_* methods, unless you explicitely override it in the parameter.</p> <p>Args: cloud_provider: The destination cloud storage provider\u2019s name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. region: The destination cloud provider\u2019s region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <p>Returns: A context manager that specifies the cloud provider and region to use.</p> <p>Here\u2019s an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:</p> <p>Example: ```python # Importing necessary libraries import os</p> <pre><code>from azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob\n\n# Create a credential for accessing Azure Blob Storage\n# Setting the required environment variables\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n# Setting the resource group name and storage account name\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n# Retrieving the credential\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\ncredential = azure_storage_keys['key1']\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablobs created inside the context manager will be\n# stored in an AWS S3 bucket with the region set to eu-west-3.\nwith DataBlob.set_default_cloud_provider(\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n):\n    db = DataBlob.from_azure_blob_storage(\n        uri=\"{fill in uri}\",\n        credential=credential\n    )\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n```\n</code></pre> <p>``` python with pytest.raises(ValueError) as e:     DataBlob._get_cloud_provider_and_region(cloud_provider=None, region=\"US\") display(e.value)</p> <p>_cloud_provider, _region = DataBlob._get_cloud_provider_and_region(     cloud_provider=None, region=None, default_cloud_provider=\"azure\" ) display(_cloud_provider, _region) assert _cloud_provider == \"azure\" assert _region == DEFAULT_AZURE_BLOB_STORAGE_REGION, _region</p> <p>_cloud_provider, _region = DataBlob._get_cloud_provider_and_region(     cloud_provider=None, region=None ) display(_cloud_provider, _region) assert _cloud_provider == \"aws\" assert _region == DEFAULT_S3_REGION, _region</p> <p>_cloud_provider, _region = DataBlob._get_cloud_provider_and_region(     cloud_provider=None, region=None, set_source_region=True ) display(_cloud_provider, _region) assert _cloud_provider == \"aws\" assert _region == None, _region</p> <p>_cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"azure\") display(_cloud_provider, _region) assert _cloud_provider == \"azure\" assert _region == DEFAULT_AZURE_BLOB_STORAGE_REGION, _region</p> <p>_cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"aws\") display(_cloud_provider, _region) assert _cloud_provider == \"aws\" assert _region == DEFAULT_S3_REGION, _region</p> <p>with DataBlob.set_default_cloud_provider(\"azure\", \"US\"):     _cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"azure\")     display(_cloud_provider, _region)     assert _cloud_provider == \"azure\"     assert _region == \"westeurope\", _region</p> <pre><code>with DataBlob.set_default_cloud_provider(\"aws\", \"US\"):\n    _cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"aws\")\n    display(_cloud_provider, _region)\n    assert _cloud_provider == \"aws\"\n    assert _region == \"eu-west-1\", _region\n\n    with DataBlob.set_default_cloud_provider(\"aws\"):\n        _cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"aws\")\n        display(_cloud_provider, _region)\n        assert _cloud_provider == \"aws\"\n        assert _region == \"eu-west-1\", DEFAULT_S3_REGION\n\n    _cloud_provider, _region = DataBlob._get_cloud_provider_and_region(\"azure\")\n    display(_cloud_provider, _region)\n    assert _cloud_provider == \"azure\"\n    assert _region == \"westeurope\", _region\n</code></pre> <p><code>ValueError('You must specify a cloud_provider if are specifying a region.')      'azure'      'westeurope'      'aws'      'eu-west-1'      'aws'      None      'azure'      'westeurope'      'aws'      'eu-west-1'      'azure'      'westeurope'      'aws'      'eu-west-1'      'aws'      'eu-west-1'      'azure'      'westeurope'</code> python</p>"},{"location":"API_DataBlob/#run-example-for-datablobset_default_cloud_provider","title":"Run example for DataBlob.set_default_cloud_provider","text":"<p>username = os.environ[SERVICE_USERNAME] password = os.environ[SERVICE_PASSWORD]  run_examples_from_docstring(     DataBlob.set_default_cloud_provider,     azure_subscription_id=os.environ[\"AZURE_SUBSCRIPTION_ID\"],     azure_client_id=os.environ[\"AZURE_CLIENT_ID\"],     azure_client_secret=os.environ[\"AZURE_CLIENT_SECRET\"],     azure_tenant_id=os.environ[\"AZURE_TENANT_ID\"],     azure_group_name=\"test-airt-service\",     azure_storage_account_name=\"testairtservice\",     username=username,     password=password,     uri=\"https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks\", ) ```</p> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:7: No type or annotation for parameter 'region'\n&lt;module&gt;:15: No type or annotation for returned value 1\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     import os                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from azure.identity import DefaultAzureCredential                                                           \u2502\n\u2502     from azure.mgmt.storage import StorageManagementClient                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a credential for accessing Azure Blob Storage                                                      \u2502\n\u2502     # Setting the required environment variables                                                                \u2502\n\u2502     os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"                                     \u2502\n\u2502     os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"                                                 \u2502\n\u2502     os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"                                         \u2502\n\u2502     os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"                                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Setting the resource group name and storage account name                                                  \u2502\n\u2502     azure_group_name = \"{fill in azure_group_name}\"                                                             \u2502\n\u2502     azure_storage_account_name = \"{fill in azure_storage_account_name}\"                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Retrieving the credential                                                                                 \u2502\n\u2502     azure_storage_client = StorageManagementClient(                                                             \u2502\n\u2502         DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]                                           \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = azure_storage_client.storage_accounts.list_keys(                                       \u2502\n\u2502         azure_group_name, azure_storage_account_name                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}                                 \u2502\n\u2502     credential = azure_storage_keys['key1']                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablobs created inside the context manager will be                                 \u2502\n\u2502     # stored in an AWS S3 bucket with the region set to eu-west-3.                                              \u2502\n\u2502     with DataBlob.set_default_cloud_provider(                                                                   \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     ):                                                                                                          \u2502\n\u2502         db = DataBlob.from_azure_blob_storage(                                                                  \u2502\n\u2502             uri=\"{fill in uri}\",                                                                                \u2502\n\u2502             credential=credential                                                                               \u2502\n\u2502         )                                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  e73f421b-3a91-4a6b-a269-444a3c7d1c90           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:20&lt;00:00,  5.12s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:20&lt;00:00, 20.33s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for DataBlob.from_s3\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    DataBlob.from_s3, username=username, password=password, uri=TEST_S3_URI\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'uri'\n&lt;module&gt;:4: No type or annotation for parameter 'access_key'\n&lt;module&gt;:6: No type or annotation for parameter 'secret_key'\n&lt;module&gt;:8: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:10: No type or annotation for parameter 'region'\n&lt;module&gt;:17: No type or annotation for parameter 'tag'\n&lt;module&gt;:20: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the access_key and the secret_key are set in the                                         \u2502\n\u2502     # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables. The region                             \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  92c9bcb5-8681-4c4d-a9d8-9317ffbaef08           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:35&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00,  5.07s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00, 40.57s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for DataBlob.from_azure_blob_storage\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    DataBlob.from_azure_blob_storage,\n    azure_subscription_id=os.environ[\"AZURE_SUBSCRIPTION_ID\"],\n    azure_client_id=os.environ[\"AZURE_CLIENT_ID\"],\n    azure_client_secret=os.environ[\"AZURE_CLIENT_SECRET\"],\n    azure_tenant_id=os.environ[\"AZURE_TENANT_ID\"],\n    azure_group_name=\"test-airt-service\",\n    azure_storage_account_name=\"testairtservice\",\n    username=username,\n    password=password,\n    uri=\"https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks\",\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'uri'\n&lt;module&gt;:4: No type or annotation for parameter 'credential'\n&lt;module&gt;:5: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:7: No type or annotation for parameter 'region'\n&lt;module&gt;:14: No type or annotation for parameter 'tag'\n&lt;module&gt;:17: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     import os                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from azure.identity import DefaultAzureCredential                                                           \u2502\n\u2502     from azure.mgmt.storage import StorageManagementClient                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a credential for accessing Azure Blob Storage                                                      \u2502\n\u2502     # Setting the required environment variables                                                                \u2502\n\u2502     os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"                                     \u2502\n\u2502     os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"                                                 \u2502\n\u2502     os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"                                         \u2502\n\u2502     os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"                                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Setting the resource group name and storage account name                                                  \u2502\n\u2502     azure_group_name = \"{fill in azure_group_name}\"                                                             \u2502\n\u2502     azure_storage_account_name = \"{fill in azure_storage_account_name}\"                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Retrieving the credential                                                                                 \u2502\n\u2502     azure_storage_client = StorageManagementClient(                                                             \u2502\n\u2502         DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]                                           \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = azure_storage_client.storage_accounts.list_keys(                                       \u2502\n\u2502         azure_group_name, azure_storage_account_name                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}                                 \u2502\n\u2502     credential = azure_storage_keys['key1']                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-1 (default), feel free to change the cloud provider and                                 \u2502\n\u2502     # the region to suit your needs.                                                                            \u2502\n\u2502     db = DataBlob.from_azure_blob_storage(                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         credential=credential                                                                                   \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  56cb3306-27e3-4604-b4b0-59216fe996b3           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00,  5.07s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.47s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for DataBlob.from_mysql\n# Creating a test_table\ndatabase_username = os.environ[\"DB_USERNAME\"]\ndatabase_password = os.environ[\"DB_PASSWORD\"]\nhost = os.environ[\"DB_HOST\"]\nport = os.environ[\"DB_PORT\"]\ndatabase = os.environ[\"DB_DATABASE\"]\ndatabase_server = os.environ[\"DB_DATABASE_SERVER\"]\ntable = \"test_db_pull\"\n\n\ndef get_db_engine():\n    quoted_password = urlquote(database_password)\n    conn_str = f\"{database_server}://{database_username}:{quoted_password}@{host}:{port}/{database}\"\n    engine = create_engine(conn_str)\n    return engine\n\n\nwith tempfile.TemporaryDirectory(prefix=\"test_s3_download_\") as d:\n    !aws s3 sync {TEST_S3_URI} {d}\n    !ls {d}\n\n    engine = get_db_engine()\n\n    df = pd.read_parquet(d)\n    try:\n        df.to_sql(\"test_db_pull\", con=engine, if_exists=\"fail\")\n    except ValueError as e:\n        display(e)\n\nrun_examples_from_docstring(\n    DataBlob.from_mysql,\n    username=os.environ[SERVICE_USERNAME],\n    password=os.environ[SERVICE_PASSWORD],\n    database_username=database_username,\n    database_password=database_password,\n    host=host,\n    database=database,\n    table=table,\n    port=port,\n)\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_br6k91fp/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_br6k91fp/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_br6k91fp/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_br6k91fp/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_br6k91fp/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_br6k91fp/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_br6k91fp/part.12.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_br6k91fp/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_br6k91fp/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_br6k91fp/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_br6k91fp/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_br6k91fp/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_br6k91fp/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_br6k91fp/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_br6k91fp/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_br6k91fp/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_br6k91fp/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_br6k91fp/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_br6k91fp/part.6.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_br6k91fp/part.9.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_br6k91fp/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_br6k91fp/part.8.parquet\n_common_metadata  part.12.parquet  part.18.parquet  part.6.parquet\n_metadata     part.13.parquet  part.19.parquet  part.7.parquet\npart.0.parquet    part.14.parquet  part.2.parquet   part.8.parquet\npart.1.parquet    part.15.parquet  part.3.parquet   part.9.parquet\npart.10.parquet   part.16.parquet  part.4.parquet\npart.11.parquet   part.17.parquet  part.5.parquet\n\n&lt;module&gt;:6: No type or annotation for parameter 'host'\n&lt;module&gt;:7: No type or annotation for parameter 'database'\n&lt;module&gt;:8: No type or annotation for parameter 'table'\n&lt;module&gt;:9: No type or annotation for parameter 'port'\n&lt;module&gt;:10: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:12: No type or annotation for parameter 'region'\n&lt;module&gt;:19: No type or annotation for parameter 'username'\n&lt;module&gt;:21: No type or annotation for parameter 'password'\n&lt;module&gt;:23: No type or annotation for parameter 'tag'\n&lt;module&gt;:26: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_mysql(                                                                                   \u2502\n\u2502         username=\"{fill in database_username}\",                                                                 \u2502\n\u2502         password=\"{fill in database_password}\",                                                                 \u2502\n\u2502         host=\"{fill in host}\",                                                                                  \u2502\n\u2502         database=\"{fill in database}\",                                                                          \u2502\n\u2502         table=\"{fill in table}\",                                                                                \u2502\n\u2502         port=\"{fill in port}\",                                                                                  \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  0cc90f14-b0bd-4976-a090-48b4996b74d4           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00,  5.07s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.53s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for DataBlob.from_clickhouse\n\n\nrun_examples_from_docstring(\n    DataBlob.from_clickhouse,\n    username=os.environ[SERVICE_USERNAME],\n    password=os.environ[SERVICE_PASSWORD],\n    database_username=os.environ.get(\"CLICKHOUSE_USERNAME\"),\n    database_password=os.environ.get(\"CLICKHOUSE_PASSWORD\"),\n    host=os.environ.get(\"CLICKHOUSE_HOST\"),\n    database=os.environ.get(\"CLICKHOUSE_DATABASE\"),\n    table=os.environ.get(\"CLICKHOUSE_EVENTS_TABLE\"),\n    index_column=\"PersonId\",\n    timestamp_column=\"OccurredTimeTicks\",\n    filters=\"{'AccountId': 312571}\",\n    port=\"0\",\n)\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'host'\n&lt;module&gt;:7: No type or annotation for parameter 'database'\n&lt;module&gt;:8: No type or annotation for parameter 'table'\n&lt;module&gt;:9: No type or annotation for parameter 'protocol'\n&lt;module&gt;:10: No type or annotation for parameter 'index_column'\n&lt;module&gt;:11: No type or annotation for parameter 'timestamp_column'\n&lt;module&gt;:12: No type or annotation for parameter 'port'\n&lt;module&gt;:13: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:15: No type or annotation for parameter 'region'\n&lt;module&gt;:22: No type or annotation for parameter 'username'\n&lt;module&gt;:24: No type or annotation for parameter 'password'\n&lt;module&gt;:26: No type or annotation for parameter 'filters'\n&lt;module&gt;:27: No type or annotation for parameter 'tag'\n&lt;module&gt;:30: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_clickhouse(                                                                              \u2502\n\u2502         username=\"{fill in database_username}\",                                                                 \u2502\n\u2502         password=\"{fill in database_password}\",                                                                 \u2502\n\u2502         host=\"{fill in host}\",                                                                                  \u2502\n\u2502         database=\"{fill in database}\",                                                                          \u2502\n\u2502         table=\"{fill in table}\",                                                                                \u2502\n\u2502         index_column=\"{fill in index_column}\",                                                                  \u2502\n\u2502         timestamp_column=\"{fill in timestamp_column}\",                                                          \u2502\n\u2502         port=\"{fill in port}\",                                                                                  \u2502\n\u2502         filters={fill in filters},                                                                              \u2502\n\u2502         protocol=\"native\",                                                                                      \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  cd976ec5-54b7-4462-ad00-b9517ccc6b67           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:35&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:40&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:45&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:50&lt;00:00,  5.08s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:50&lt;00:00, 50.80s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for DataBlob.from_local\n# Helper function to download a sample csv file into the temp directory for DataBlob.from_local\n\n\ndef get_test_csv_path() -&gt; Path:\n\"\"\"Downloads the account_312571_events from the s3 bucket and stores it in temp folder.\n    Finally converts the downloaded account_312571_events files to a csv file and returns the\n    path of the temp folder and the temp csv file.\n    \"\"\"\n    temp_dirpath = Path(tempfile.mkdtemp(prefix=\"test_s3_download_\"))\n\n    !aws s3 sync {TEST_S3_URI} {temp_dirpath / \"parquet\"}\n\n    parquet_path = Path(temp_dirpath / \"parquet\")\n    csv_dirpath = Path(temp_dirpath / \"csv\")\n    os.mkdir(csv_dirpath)\n\n    for i, f in enumerate(list(parquet_path.glob(\"*.parquet\"))):\n        df = pd.read_parquet(f)\n        df.to_csv(csv_dirpath / f\"file-{i}.csv\", index=False)\n\n    display(list(csv_dirpath.glob(\"*\")))\n\n    return temp_dirpath, csv_dirpath, parquet_path\n\n\n# Create temp directory\ntemp_dir, csv_dirpath, parquet_path = get_test_csv_path()\n\nrun_examples_from_docstring(\n    DataBlob.from_local,\n    username=os.environ[SERVICE_USERNAME],\n    password=os.environ[SERVICE_PASSWORD],\n    path=str(csv_dirpath),\n)\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_3mlmcv5d/parquet/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_3mlmcv5d/parquet/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.9.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.6.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.8.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_3mlmcv5d/parquet/part.12.parquet\n\n[Path('/tmp/test_s3_download_3mlmcv5d/csv/file-15.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-13.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-17.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-4.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-19.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-3.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-18.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-2.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-11.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-9.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-0.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-7.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-5.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-1.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-16.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-6.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-8.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-14.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-12.csv'),\n Path('/tmp/test_s3_download_3mlmcv5d/csv/file-10.csv')]\n\n&lt;module&gt;:5: No type or annotation for parameter 'path'\n&lt;module&gt;:6: No type or annotation for parameter 'cloud_provider'\n&lt;module&gt;:8: No type or annotation for parameter 'region'\n&lt;module&gt;:15: No type or annotation for parameter 'tag'\n&lt;module&gt;:16: No type or annotation for parameter 'show_progress'\n&lt;module&gt;:19: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_local(                                                                                   \u2502\n\u2502         path=\"{fill in path}\",                                                                                  \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled  ready                               \u2502 \u2502\n\u2502 \u2502 0  0fe1ff4c-f176-4965-9b38-1650b0ae850b           &lt;none&gt;  ...    False  False                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/20 [00:00&lt;?, ?it/s]                                                                      \u2502 \u2502\n\u2502 \u2502   5%|\u258c         | 1/20 [00:02&lt;00:43,  2.30s/it]                                                              \u2502 \u2502\n\u2502 \u2502  10%|\u2588         | 2/20 [00:04&lt;00:37,  2.08s/it]                                                              \u2502 \u2502\n\u2502 \u2502  15%|\u2588\u258c        | 3/20 [00:06&lt;00:40,  2.38s/it]                                                              \u2502 \u2502\n\u2502 \u2502  20%|\u2588\u2588        | 4/20 [00:11&lt;00:53,  3.35s/it]                                                              \u2502 \u2502\n\u2502 \u2502  25%|\u2588\u2588\u258c       | 5/20 [00:15&lt;00:52,  3.51s/it]                                                              \u2502 \u2502\n\u2502 \u2502  30%|\u2588\u2588\u2588       | 6/20 [00:17&lt;00:40,  2.93s/it]                                                              \u2502 \u2502\n\u2502 \u2502  35%|\u2588\u2588\u2588\u258c      | 7/20 [00:19&lt;00:33,  2.55s/it]                                                              \u2502 \u2502\n\u2502 \u2502  40%|\u2588\u2588\u2588\u2588      | 8/20 [00:21&lt;00:31,  2.64s/it]                                                              \u2502 \u2502\n\u2502 \u2502  45%|\u2588\u2588\u2588\u2588\u258c     | 9/20 [00:25&lt;00:31,  2.82s/it]                                                              \u2502 \u2502\n\u2502 \u2502  50%|\u2588\u2588\u2588\u2588\u2588     | 10/20 [00:27&lt;00:27,  2.70s/it]                                                             \u2502 \u2502\n\u2502 \u2502  55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 11/20 [00:30&lt;00:24,  2.71s/it]                                                             \u2502 \u2502\n\u2502 \u2502  60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 12/20 [00:34&lt;00:25,  3.14s/it]                                                             \u2502 \u2502\n\u2502 \u2502  65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 13/20 [00:36&lt;00:19,  2.78s/it]                                                             \u2502 \u2502\n\u2502 \u2502  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 14/20 [00:38&lt;00:15,  2.55s/it]                                                             \u2502 \u2502\n\u2502 \u2502  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 15/20 [00:41&lt;00:14,  2.82s/it]                                                             \u2502 \u2502\n\u2502 \u2502  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 16/20 [00:45&lt;00:12,  3.02s/it]                                                             \u2502 \u2502\n\u2502 \u2502  85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 17/20 [00:47&lt;00:08,  2.84s/it]                                                             \u2502 \u2502\n\u2502 \u2502  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 18/20 [00:50&lt;00:05,  2.86s/it]                                                             \u2502 \u2502\n\u2502 \u2502  95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 19/20 [00:55&lt;00:03,  3.32s/it]                                                             \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:59&lt;00:00,  3.62s/it]                                                             \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:59&lt;00:00,  2.97s/it]                                                             \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Tests for DataBlob._get_tag_name_and_datasource_id:\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n\nres = {\n    \"id\": RANDOM_UUID_FOR_TESTING,\n    \"datasources\": [],\n    \"tags\": [{\"id\": 1, \"name\": \"latest\", \"created\": \"2022-03-25T07:22:07\"}],\n}\n\nexpected = {\"id\": RANDOM_UUID_FOR_TESTING, \"datasources\": \"&lt;none&gt;\", \"tags\": \"latest\"}\n\nactual = DataBlob._get_tag_name_and_datasource_id(res)\ndisplay(f\"{actual=}\")\nassert actual == expected\n</code></pre> <pre><code>\"actual={'id': '00000000-0000-0000-0000-000000000000', 'datasources': '&lt;none&gt;', 'tags': 'latest'}\"\n</code></pre> <pre><code># Tests for DataBlob._get_tag_name_and_datasource_id:\n\nres = {\n    \"id\": RANDOM_UUID_FOR_TESTING,\n    \"datasources\": [\n        RANDOM_UUID_FOR_TESTING,\n        RANDOM_UUID_FOR_TESTING,\n        RANDOM_UUID_FOR_TESTING,\n    ],\n    \"tags\": [{\"id\": 1, \"name\": \"latest\", \"created\": \"2022-03-25T07:22:07\"}],\n}\n\nexpected = {\n    \"id\": RANDOM_UUID_FOR_TESTING,\n    \"datasources\": f\"{RANDOM_UUID_FOR_TESTING}, {RANDOM_UUID_FOR_TESTING}, {RANDOM_UUID_FOR_TESTING}\",\n    \"tags\": \"latest\",\n}\n\nactual = DataBlob._get_tag_name_and_datasource_id(res)\n\ndisplay(f\"{actual=}\")\nassert actual == expected\n</code></pre> <pre><code>\"actual={'id': '00000000-0000-0000-0000-000000000000', 'datasources': '00000000-0000-0000-0000-000000000000, 00000000-0000-0000-0000-000000000000, 00000000-0000-0000-0000-000000000000', 'tags': 'latest'}\"\n</code></pre> <pre><code>def remove_hypens_from_id(id: str) -&gt; str:\n    return \"\".join((id).split(\"-\"))\n</code></pre> <pre><code>actual = remove_hypens_from_id(RANDOM_UUID_FOR_TESTING)\nassert len(actual) == 32\nactual\n</code></pre> <pre><code>'00000000000000000000000000000000'\n</code></pre> <p>source</p>"},{"location":"API_DataBlob/#datablobdetails","title":"DataBlob.details","text":"<pre><code> DataBlob.details ()\n</code></pre> <p>Return details of a datablob.</p> <p>Returns: The datablob details as a pandas dataframe.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code>details_doc = DataBlob.details.__doc__\n\ndisplay(details_doc)\nassert \", \".join(DataBlob.ALL_DB_COLS) in details_doc\n</code></pre> <pre><code>'Return details of a datablob.\\n\\nReturns:\\n    The datablob details as a pandas dataframe.\\n\\nRaises:\\n    ConnectionError: If the server address is invalid or not reachable.\\n\\n\\nExample:\\n    ```python\\n    # Importing necessary libraries\\n    from  airt.client import Client, DataBlob\\n\\n    # Authenticate\\n    Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\\n\\n    # Create a datablob\\n    # In this example, the datablob will be stored in an AWS S3 bucket. The \\n    # access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and \\n    # AWS_SECRET_ACCESS_KEY environment variables, and the region is set to \\n    # eu-west-3; feel free to change the cloud provider and the region to \\n    # suit your needs.\\n    db = DataBlob.from_s3(\\n        uri=\"{fill in uri}\",\\n        cloud_provider=\"aws\",\\n        region=\"eu-west-3\"\\n    )\\n\\n    # Display the status in a progress bar\\n    # Call the wait method to wait for the progress to finish but\\n    # without displaying an interactive progress bar.\\n    db.progress_bar()\\n\\n    # Display the ready status\\n    # If the datablob is successfully uploaded, True will be returned.\\n    print(db.is_ready())\\n\\n    # Print the details of the newly created datablob\\n    print(db.details())\\n\\n    # Display the details of all datablob created by the currently\\n    # logged-in user\\n    print(DataBlob.as_df(DataBlob.ls()))\\n\\n    # Create a datasource\\n    ds = db.to_datasource(\\n        file_type=\"{fill in file_type}\",\\n        index_column=\"{fill in index_column}\",\\n        sort_by=\"{fill in sort_by}\",\\n    )\\n\\n    # Display the status in a progress bar\\n    ds.progress_bar()\\n\\n    # Display the head of the data to ensure everything is fine.\\n    print(ds.head())\\n\\n    # Tag the datablob\\n    print(db.tag(name=\"{fill in tag_name}\"))\\n\\n    # Delete the datablob\\n    print(db.delete())\\n    ```\\n\\n    Columns in the resulting dataframe are: uuid, datasources, type, source, region, cloud_provider, tags, pulled_on, completed_steps, total_steps, folder_size, user, error, disabled.'\n</code></pre> <pre><code># Helper function to create a s3 datablob\n\n# Authenticate\nClient.get_token()\n\n_db = None\n\n\n@contextmanager\ndef generate_db(\n    cloud_provider: Optional[str] = \"aws\",\n    region: Optional[str] = None,\n    force_create: bool = False,\n):\n    global _db\n\n    if _db is None or force_create:\n        with DataBlob.set_default_cloud_provider(\n            cloud_provider=cloud_provider, region=region\n        ):\n            _db = DataBlob.from_s3(\n                uri=TEST_S3_URI,\n                access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n                secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n            )\n            _db.progress_bar()\n    yield _db\n</code></pre> <pre><code># Tests for Datablob.details\n\nfor region in [None, \"eu-west-1\"]:\n    with generate_db(region=region, force_create=True) as db:\n        df = db.details()\n        assert df.datablob_uuid[0] == db.uuid\n        assert len(remove_hypens_from_id(df.datablob_uuid[0])) == 32\n        assert df.shape == (1, len(DataBlob.ALL_DB_COLS) - 1), df.shape\n\n        display(f\"{df['tags'].item()=}\")\n        display(df)\n        assert df[\"source\"][0] == TEST_S3_URI\n        if region is not None:\n            assert df[\"region\"][0] == region\n        else:\n            assert len(df[\"region\"][0]) &gt; 0\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:45&lt;00:00, 45.65s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00, 40.59s/it]\n\n\"df['tags'].item()='latest'\"\n</code></pre>   |     | datablob_uuid                        | datasource_uuids | type | source                                            | region    | cloud_provider | tags   | pulled_on           | folder_size | user_uuid                            | error | disabled | ready | |-----|--------------------------------------|------------------|------|---------------------------------------------------|-----------|----------------|--------|---------------------|-------------|--------------------------------------|-------|----------|-------| | 0   | a67d7ceb-b5f3-4cfd-bc08-043442cc8973 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | eu-west-3 | aws            | latest | 2023-02-23T09:50:51 | 10191763    | d78ee2d4-9135-4dcd-8e96-21e127ba32c6 | None  | False    | True  |   <pre><code>\"df['tags'].item()='latest'\"\n</code></pre>   |     | datablob_uuid                        | datasource_uuids | type | source                                            | region    | cloud_provider | tags   | pulled_on           | folder_size | user_uuid                            | error | disabled | ready | |-----|--------------------------------------|------------------|------|---------------------------------------------------|-----------|----------------|--------|---------------------|-------------|--------------------------------------|-------|----------|-------| | 0   | 28d97722-fbdc-4c8b-a6c4-65672407bce9 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | eu-west-1 | aws            | latest | 2023-02-23T09:51:48 | 10191763    | d78ee2d4-9135-4dcd-8e96-21e127ba32c6 | None  | False    | True  |   <pre><code># Tests for DataBlob.from_s3: Setting the cloud_provider to azure\n\nwith generate_db(cloud_provider=\"azure\", region=\"westeurope\", force_create=True) as db:\n    display(f\"{db.uuid=}\")\n    assert len(remove_hypens_from_id(db.uuid)) == 32\n\n    display(f\"{db.is_ready()=}\")\n    assert db.is_ready()\n    assert db.source == TEST_S3_URI\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [01:41&lt;00:00, 101.39s/it]\n\n\"db.uuid='a146f37d-44f9-4763-8cd6-f9a76414eef6'\"\n\n'db.is_ready()=True'\n</code></pre> <pre><code># Tests for DataBlob.from_s3\n# Testing negative scenario. Passing invalid s3 url\n\nfake_uri = \"s3://fake-bucket-not-existing/fake-object-not-existing\"\nwith DataBlob.set_default_cloud_provider(cloud_provider=\"aws\", region=\"eu-west-1\"):\n    db = DataBlob.from_s3(uri=fake_uri)\n\ndisplay(f\"{db.uuid=}\")\nassert len(remove_hypens_from_id(db.uuid)) == 32\nassert db.source == fake_uri\n\nwith pytest.raises(ValueError) as e:\n    db.progress_bar()\n\ndisplay(f\"{str(e.value)}\")\n\nassert \"An error occurred (NoSuchBucket) when calling the ListObjects operation\" in str(\n    e.value\n)\n</code></pre> <pre><code>\"db.uuid='98d15c9f-17e1-4ba5-bae5-80ee3a5c482c'\"\n\n  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n'An error occurred (NoSuchBucket) when calling the ListObjects operation: The specified bucket does not exist'\n</code></pre> <pre><code># Tests for DataBlob.from_azure_blob_storage: Positive scenario: Passing the credential in the parameter\n\nstorage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nkeys = storage_client.storage_accounts.list_keys(\"test-airt-service\", \"testairtservice\")\ncredential = keys.keys[0].value\n\nfor region in [\"westeurope\", \"northeurope\"]:\n    #     with DataBlob.set_default_azure_blob_storage_region(region):\n    with DataBlob.set_default_cloud_provider(cloud_provider=\"azure\", region=region):\n        db = DataBlob.from_azure_blob_storage(uri=TEST_AZURE_URI, credential=credential)\n\n        display(f\"{db.uuid=}\")\n        assert len(remove_hypens_from_id(db.uuid)) == 32\n\n        display(f\"{db.is_ready()=}\")\n        assert not db.is_ready()\n        db.progress_bar()\n\n        display(f\"{db.is_ready()=}\")\n        assert db.is_ready()\n        assert db.source == TEST_AZURE_URI\n\n        df = db.details()\n        display(df)\n        assert df[\"region\"][0] == region\n</code></pre> <pre><code>\"db.uuid='a64cb073-eff9-4725-8bba-95896776eb07'\"\n\n'db.is_ready()=False'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:50&lt;00:00, 50.75s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [01:05&lt;00:00, 65.88s/it]\n\n'db.is_ready()=True'\n</code></pre>   |     | datablob_uuid                        | datasource_uuids | type               | source                                            | region     | cloud_provider | tags   | pulled_on           | folder_size | user_uuid                            | error | disabled | ready | |-----|--------------------------------------|------------------|--------------------|---------------------------------------------------|------------|----------------|--------|---------------------|-------------|--------------------------------------|-------|----------|-------| | 0   | a64cb073-eff9-4725-8bba-95896776eb07 | \\         | azure_blob_storage | https://testairtservice.blob.core.windows.net/... | westeurope | azure          | latest | 2023-02-23T09:54:40 | 10191763    | d78ee2d4-9135-4dcd-8e96-21e127ba32c6 | None  | False    | True  |   <pre><code>\"db.uuid='290a0e04-0f66-4ffe-b51d-a9fd7cda6c25'\"\n\n'db.is_ready()=False'\n\n'db.is_ready()=True'\n</code></pre>   |     | datablob_uuid                        | datasource_uuids | type               | source                                            | region      | cloud_provider | tags   | pulled_on           | folder_size | user_uuid                            | error | disabled | ready | |-----|--------------------------------------|------------------|--------------------|---------------------------------------------------|-------------|----------------|--------|---------------------|-------------|--------------------------------------|-------|----------|-------| | 0   | 290a0e04-0f66-4ffe-b51d-a9fd7cda6c25 | \\         | azure_blob_storage | https://testairtservice.blob.core.windows.net/... | northeurope | azure          | latest | 2023-02-23T09:55:58 | 10191763    | d78ee2d4-9135-4dcd-8e96-21e127ba32c6 | None  | False    | True  |   <pre><code># Tests for DataBlob.from_azure_blob_storage: Positive scenario: Setting the cloud_provider to aws\n\n\ndb = DataBlob.from_azure_blob_storage(\n    uri=TEST_AZURE_URI, credential=credential, cloud_provider=\"aws\", region=\"eu-west-1\"\n)\n\ndisplay(f\"{db.uuid=}\")\nassert len(remove_hypens_from_id(db.uuid)) == 32\n\ndisplay(f\"{db.is_ready()=}\")\nassert not db.is_ready()\ndb.progress_bar()\n\ndisplay(f\"{db.is_ready()=}\")\nassert db.is_ready()\nassert db.source == TEST_AZURE_URI\n</code></pre> <pre><code>\"db.uuid='cfbe8a09-b93e-4e1c-bc1a-2ff02c94fbc4'\"\n\n'db.is_ready()=False'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.51s/it]\n\n'db.is_ready()=True'\n</code></pre> <pre><code># Tests for DataBlob.from_azure_blob_storage: Negative scenario: Passing invalid url and different region\n\ninvalid_url = \"https://invalid_url\"\nregion = \"northeurope\"\ncloud_provider = \"azure\"\n\ndb = DataBlob.from_azure_blob_storage(\n    uri=invalid_url, credential=credential, cloud_provider=cloud_provider, region=region\n)\ndf = db.details()\nassert df[\"region\"][0] == region\n\nwith pytest.raises(ValueError) as e:\n    db.progress_bar()\n\ndisplay(f\"{str(e.value)}\")\n</code></pre> <pre><code>  0%|          | 0/1 [00:15&lt;?, ?it/s]\n\n\"remote_url='https://invalid_url', subclasses=[&lt;class 'airt.remote_path.LocalPath'&gt;, &lt;class 'airt.remote_path.S3Path'&gt;, &lt;class 'airt.remote_path.AzureBlobPath'&gt;]\"\n</code></pre> <pre><code># Tests for DataBlob.from_clickhouse:\n\n# Testing positive scenario.\n\nhost = os.environ.get(\"CLICKHOUSE_HOST\")\ndatabase = os.environ.get(\"CLICKHOUSE_DATABASE\")\ntable = os.environ.get(\"CLICKHOUSE_EVENTS_TABLE\")\nprotocol = \"native\"\nindex_column = \"PersonId\"\ntimestamp_column = \"OccurredTimeTicks\"\nfilters = {\"AccountId\": 312571}\n\n\nregion = \"eu-west-1\"\n\n# with DataBlob.set_default_s3_region(region=region):\nwith DataBlob.set_default_cloud_provider(cloud_provider=\"aws\", region=region):\n    data_blob_clickhouse = DataBlob.from_clickhouse(\n        host=host,\n        database=database,\n        table=table,\n        protocol=protocol,\n        index_column=index_column,\n        timestamp_column=timestamp_column,\n        filters=filters,\n    )\n\n    data_blob_clickhouse.progress_bar()\n\ndisplay(f\"{data_blob_clickhouse.uuid=}\")\nassert len(remove_hypens_from_id(data_blob_clickhouse.uuid)) == 32\nassert (\n    data_blob_clickhouse.source\n    == f\"clickhouse+{protocol}://{host}:0/{database}/{table}\"\n)\n\ndf = data_blob_clickhouse.details()\nassert df[\"region\"][0] == region\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.56s/it]\n\n\"data_blob_clickhouse.uuid='792b2cfe-a80a-4a26-89eb-471f018427b3'\"\n</code></pre> <pre><code># Tests for DataBlob.from_clickhouse:\n\n# Testing negative scenario. Passing wrong username and password\n\nusername = \"fake-username\"\npassword = \"fake-password\"\n\n\ndata_blob_clickhouse = DataBlob.from_clickhouse(\n    host=host,\n    database=database,\n    table=table,\n    protocol=protocol,\n    index_column=index_column,\n    timestamp_column=timestamp_column,\n    username=username,\n    password=password,\n    filters=filters,\n)\n\nwith pytest.raises(ValueError) as e:\n    data_blob_clickhouse.progress_bar()\n\ndisplay(f\"{str(e.value)=}\")\nassert (\n    \"Exception: fake-username: Authentication failed: password is incorrect, or there is no user with such name.\"\n    in str(e.value)\n)\nassert (\n    data_blob_clickhouse.source\n    == f\"clickhouse+{protocol}://{host}:0/{database}/{table}\"\n)\n</code></pre> <pre><code>  0%|          | 0/1 [00:10&lt;?, ?it/s]\n\n\"str(e.value)='Orig exception: Code: 516.\\\\nDB::Exception: fake-username: Authentication failed: password is incorrect, or there is no user with such name.. Stack trace:\\\\n\\\\n0. DB::Exception::Exception(DB::Exception::MessageMasked&amp;&amp;, int, bool) @ 0xddb0df5 in /usr/bin/clickh'\"\n</code></pre> <pre><code># Tests for DataBlob.from_mysql\n# Testing positive scenario.\n\nusername = os.environ[\"DB_USERNAME\"]\npassword = os.environ[\"DB_PASSWORD\"]\nhost = os.environ[\"DB_HOST\"]\nport = int(os.environ[\"DB_PORT\"])\ndatabase = os.environ[\"DB_DATABASE\"]\ndatabase_server = os.environ[\"DB_DATABASE_SERVER\"]\ntable = \"test_db_pull\"\n\n# Creating a new db data source\n\ndata_blob_db = DataBlob.from_mysql(\n    host=host,\n    database=database,\n    table=table,\n    port=port,\n    username=username,\n    password=password,\n)\n\ndisplay(f\"{data_blob_db.is_ready()=}\")\nassert not data_blob_db.is_ready()\n\ndata_blob_db.progress_bar()\n\ndisplay(f\"{data_blob_db.is_ready()=}\")\nassert data_blob_db.is_ready()\nassert data_blob_db.source == f\"{database_server}://{host}:{port}/{database}/{table}\"\n</code></pre> <pre><code>'data_blob_db.is_ready()=False'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.28s/it]\n\n'data_blob_db.is_ready()=True'\n</code></pre> <pre><code># Tests for DataBlob.from_mysql:\n# Testing negative scenario. Passing wrong host values\n\ndata_blob_db = DataBlob.from_mysql(\n    host=\"fake-host-name\", database=\"fake-host-database\", table=\"fake-host-table\"\n)\n\nwith pytest.raises(ValueError) as e:\n    data_blob_db.progress_bar()\n\ndisplay(f\"{str(e.value)=}\")\nassert \"Unknown MySQL server host 'fake-host-name'\" in str(e.value)\nassert (\n    data_blob_db.source\n    == f\"{database_server}://fake-host-name:{port}/fake-host-database/fake-host-table\"\n)\n</code></pre> <pre><code>  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n'str(e.value)=\\'(MySQLdb.OperationalError) (2005, \"Unknown MySQL server host \\\\\\'fake-host-name\\\\\\' (-3)\")\\\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\''\n</code></pre> <pre><code># Tests for DataBlob.from_mysql:\n\n# Checking negative scenario. The username and password not passed in params nor set in the env variables\n\n# Clearing previously set env variables\nif os.environ.get(CLIENT_DB_USERNAME):\n    del os.environ[CLIENT_DB_USERNAME]\n\nif os.environ.get(CLIENT_DB_PASSWORD):\n    del os.environ[CLIENT_DB_PASSWORD]\n\ndata_blob_db = DataBlob.from_mysql(\n    host=os.environ[\"DB_HOST\"],\n    database=os.environ[\"DB_DATABASE\"],\n    table=\"test_db_pull\",\n    port=int(os.environ[\"DB_PORT\"]),\n)\n\nwith pytest.raises(ValueError) as e:\n    data_blob_db.progress_bar()\n\ndisplay(f\"{str(e.value)=}\")\nassert \"Access denied for user\" in str(e.value)\n\n# setting back the environment variable\nos.environ[CLIENT_DB_USERNAME] = os.environ[\"DB_USERNAME\"]\nos.environ[CLIENT_DB_PASSWORD] = os.environ[\"DB_PASSWORD\"]\n</code></pre> <pre><code>  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n'str(e.value)=\\'(MySQLdb.OperationalError) (1045, \"Access denied for user \\\\\\'root\\\\\\'@\\\\\\'172.23.0.6\\\\\\' (using password: NO)\")\\\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\''\n</code></pre> <pre><code># Tests for DataBlob.from_mysql:\n\n# Checking positive scenario: Storing the database username and password in the environment variables\ndata_blob_db = DataBlob.from_mysql(\n    host=os.environ[\"DB_HOST\"],\n    database=os.environ[\"DB_DATABASE\"],\n    table=\"test_db_pull\",\n    port=int(os.environ[\"DB_PORT\"]),\n)\n\n\ndata_blob_db.progress_bar()\n\ndisplay(f\"{data_blob_db.uuid=}\")\nassert len(remove_hypens_from_id(data_blob_db.uuid)) == 32\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.25s/it]\n\n\"data_blob_db.uuid='5cb2a542-b368-45e8-ba24-429c6d7222ae'\"\n</code></pre> <pre><code># Tests for DataBlob.from_local:\n\n# Testing positive scenario. Multiple file upload.\n\n# Create temp directory\ntemp_dir, csv_dirpath, parquet_path = get_test_csv_path()\n\n\ndisplay(\"Uploading CSV files with show_progress=True:\")\ndb_local_csv = DataBlob.from_local(path=csv_dirpath)\n\ndisplay(f\"{db_local_csv.uuid=}\")\nassert len(remove_hypens_from_id(db_local_csv.uuid)) == 32\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_wk0ykm9e/parquet/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_wk0ykm9e/parquet/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.12.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.8.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.9.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_wk0ykm9e/parquet/part.6.parquet\n\n[Path('/tmp/test_s3_download_wk0ykm9e/csv/file-15.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-13.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-17.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-4.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-19.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-3.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-18.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-2.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-11.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-9.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-0.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-7.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-5.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-1.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-16.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-6.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-8.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-14.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-12.csv'),\n Path('/tmp/test_s3_download_wk0ykm9e/csv/file-10.csv')]\n\n'Uploading CSV files with show_progress=True:'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:11&lt;00:00,  3.56s/it]\n\n\"db_local_csv.uuid='4911c647-dae1-469e-8768-a7c45c105c5c'\"\n</code></pre> <pre><code># Uploading Parquet files with with show_progress=False\n\ndisplay(\"\\n\\nUploading Parquet files with with show_progress=False:\")\ndb_local_parquet = DataBlob.from_local(path=parquet_path, show_progress=False)\n\ndisplay(f\"{db_local_parquet.uuid=}\")\nassert len(remove_hypens_from_id(db_local_parquet.uuid)) == 32\n\ndb_details = db_local_parquet.details()\n\ndisplay(f\"{db_details['source'][0]=}\")\nassert db_details[\"source\"][0] == f\"local:{str(parquet_path)}\"\nassert db_details[\"region\"][0] == DEFAULT_S3_REGION\n\n# Deleting the temp directory\n# shutil.rmtree(temp_dir)\n# display(f\"{temp_dir.exists()=}\")\n# assert not temp_dir.exists()\n</code></pre> <pre><code>'\\n\\nUploading Parquet files with with show_progress=False:'\n\n\"db_local_parquet.uuid='096063b8-16da-453f-863f-61567b25a904'\"\n\n\"db_details['source'][0]='local:/tmp/test_s3_download_wk0ykm9e/parquet'\"\n</code></pre> <pre><code># Tests for DataBlob.from_local:\n\n# Testing positive scenario. Single file upload.\n\n# Create temp directory\n# temp_dir, csv_dirpath, parquet_path = get_test_csv_path()\n\ndisplay(\"Uploading CSV file with show_progress=True:\")\n\ncsv_file_path = csv_dirpath / \"file-1.csv\"\ndb_local_csv = DataBlob.from_local(path=csv_file_path)\n\ndisplay(f\"{db_local_csv.uuid=}\")\nassert len(remove_hypens_from_id(db_local_csv.uuid)) == 32\n\ndisplay(\"\\n\\nUploading CSV file with with show_progress=False:\\n\")\ndb_local_csv = DataBlob.from_local(path=csv_file_path, show_progress=False)\n\ndisplay(f\"{db_local_csv.uuid=}\")\nassert len(remove_hypens_from_id(db_local_csv.uuid)) == 32\n\ndb_local_csv_details = db_local_csv.details()\n\ndisplay(f\"{db_local_csv_details['source'][0]=}\")\nassert db_local_csv_details[\"source\"][0] == f\"local:{str(csv_file_path)}\"\n\n\n# Deleting the temp directory\nshutil.rmtree(temp_dir)\ndisplay(f\"{temp_dir.exists()=}\")\nassert not temp_dir.exists()\n</code></pre> <pre><code>'Uploading CSV file with show_progress=True:'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:04&lt;00:00,  4.07s/it]\n\n\"db_local_csv.uuid='e5a7e776-3ccf-4ae7-b21c-3af178daa251'\"\n\n'\\n\\nUploading CSV file with with show_progress=False:\\n'\n\n\"db_local_csv.uuid='9b69af4f-5c45-4492-9eaf-318ca768571b'\"\n\n\"db_local_csv_details['source'][0]='local:/tmp/test_s3_download_wk0ykm9e/csv/file-1.csv'\"\n\n'temp_dir.exists()=False'\n</code></pre> <pre><code># Tests for DataBlob.ls:\n# Tests for the offset and limit parameters\n\ndbx = DataBlob.ls()\n\ndisplay(f\"{len(dbx)=}\")\nassert len(dbx) &gt;= 0\n\n# Testing list with offset and limit\noffset = 1\nlimit = 3\n\ndbx = DataBlob.ls(offset=offset, limit=limit)\n\ndisplay(f\"{len(dbx)=}\")\nassert 0 &lt;= len(dbx) &lt;= limit\n\n# Testing list with invalid offset and limit\noffset = 1_000_000_000\nlimit = 3\n\ndbx = DataBlob.ls(offset=offset, limit=limit)\n\ndisplay(f\"{len(dbx)=}\")\nassert dbx == []\n</code></pre> <pre><code>'len(dbx)=25'\n\n'len(dbx)=3'\n\n'len(dbx)=0'\n</code></pre> <pre><code># Tests for DataBlob.ls:\n# Tests for the completed parameter\n\n# Create a datablob\ndb = DataBlob.from_s3(\n    uri=TEST_S3_URI,\n)\n\n# Passing completed=False. Should show all the datablobs.\ndbx = DataBlob.ls(completed=False, limit=5000)\ndb_id_list = [db.uuid for db in dbx]\n\ndisplay(f\"{db_id_list=}\")\nassert db.uuid in db_id_list\n\n# Passing completed=True. Should show only the pulled datablobs.\ndbx = DataBlob.ls(completed=True, limit=5000)\n\ndb_id_list = [db.uuid for db in dbx]\ndisplay(f\"{db_id_list=}\")\nassert db.uuid not in db_id_list\n</code></pre> <pre><code>\"db_id_list=['e73f421b-3a91-4a6b-a269-444a3c7d1c90', '92c9bcb5-8681-4c4d-a9d8-9317ffbaef08', '56cb3306-27e3-4604-b4b0-59216fe996b3', '0cc90f14-b0bd-4976-a090-48b4996b74d4', 'cd976ec5-54b7-4462-ad00-b9517ccc6b67', '0fe1ff4c-f176-4965-9b38-1650b0ae850b', 'a67d7ceb-b5f3-4cfd-bc08-043442cc8973', '28d97722-fbdc-4c8b-a6c4-65672407bce9', 'a146f37d-44f9-4763-8cd6-f9a76414eef6', '98d15c9f-17e1-4ba5-bae5-80ee3a5c482c', 'a64cb073-eff9-4725-8bba-95896776eb07', '290a0e04-0f66-4ffe-b51d-a9fd7cda6c25', 'cfbe8a09-b93e-4e1c-bc1a-2ff02c94fbc4', 'c4c969e4-3e27-4375-b6c4-1ff536354d9b', '792b2cfe-a80a-4a26-89eb-471f018427b3', '3e2d89f8-88e3-40cd-a4a6-e589c116377b', '0f1ecfc4-85ed-409d-b027-1bd211c2cced', '3a928206-0868-4ae8-aa22-80f2301313d2', '35955244-47bb-434d-9afd-0271b78e30e8', '863e53bf-5f1c-431b-8ffc-eb0c2b2e8d2a', '5cb2a542-b368-45e8-ba24-429c6d7222ae', '4911c647-dae1-469e-8768-a7c45c105c5c', '096063b8-16da-453f-863f-61567b25a904', 'e5a7e776-3ccf-4ae7-b21c-3af178daa251', '9b69af4f-5c45-4492-9eaf-318ca768571b', '173c5812-e3b5-4fd2-9537-13a2d0bca23c']\"\n\n\"db_id_list=['e73f421b-3a91-4a6b-a269-444a3c7d1c90', '92c9bcb5-8681-4c4d-a9d8-9317ffbaef08', '56cb3306-27e3-4604-b4b0-59216fe996b3', '0cc90f14-b0bd-4976-a090-48b4996b74d4', 'cd976ec5-54b7-4462-ad00-b9517ccc6b67', 'a67d7ceb-b5f3-4cfd-bc08-043442cc8973', '28d97722-fbdc-4c8b-a6c4-65672407bce9', 'a146f37d-44f9-4763-8cd6-f9a76414eef6', 'a64cb073-eff9-4725-8bba-95896776eb07', '290a0e04-0f66-4ffe-b51d-a9fd7cda6c25', 'cfbe8a09-b93e-4e1c-bc1a-2ff02c94fbc4', '792b2cfe-a80a-4a26-89eb-471f018427b3', '3a928206-0868-4ae8-aa22-80f2301313d2', '5cb2a542-b368-45e8-ba24-429c6d7222ae']\"\n</code></pre> <pre><code># Tests for DataBlob.as_df:\n\ndbx = DataBlob.ls()\n\ndf = DataBlob.as_df(dbx)\n\nfor c in [\"datasource_uuids\", \"datablob_uuid\", \"source\"]:\n    assert c in list(df.columns)\n\n\nassert df.shape == (len(dbx), len(DataBlob.BASIC_DB_COLS) - 1)\nassert \"&lt;none&gt;\" in df[\"datasource_uuids\"].to_list()\n\ndf[df.type == \"s3\"].head()\n</code></pre>   |     | datablob_uuid                        | datasource_uuids | type | source                                            | region     | cloud_provider | tags     | pulled_on           | folder_size | ready | |-----|--------------------------------------|------------------|------|---------------------------------------------------|------------|----------------|----------|---------------------|-------------|-------| | 1   | 92c9bcb5-8681-4c4d-a9d8-9317ffbaef08 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | eu-west-3  | aws            | \\ | 2023-02-23T09:46:27 | 10191763.0  | True  | | 6   | a67d7ceb-b5f3-4cfd-bc08-043442cc8973 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | eu-west-3  | aws            | \\ | 2023-02-23T09:50:51 | 10191763.0  | True  | | 7   | 28d97722-fbdc-4c8b-a6c4-65672407bce9 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | eu-west-1  | aws            | \\ | 2023-02-23T09:51:48 | 10191763.0  | True  | | 8   | a146f37d-44f9-4763-8cd6-f9a76414eef6 | \\         | s3   | s3://test-airt-service/ecommerce_behavior_note... | westeurope | azure          | \\ | 2023-02-23T09:53:17 | 10191763.0  | True  | | 9   | 98d15c9f-17e1-4ba5-bae5-80ee3a5c482c | \\         | s3   | s3://fake-bucket-not-existing/fake-object-not-... | eu-west-1  | aws            | latest   | None                | NaN         | False |   <pre><code># Tests for DataBlob.as_df:\n# Testing with empty response\n\ndbx = []\n\ndf = DataBlob.as_df(dbx)\n\nfor c in [\"datasource_uuids\", \"datablob_uuid\"]:\n    assert c in list(df.columns)\n\nassert df.shape == (len(dbx), len(DataBlob.BASIC_DB_COLS) - 1)\n\ndf\n</code></pre>   |     | datablob_uuid | datasource_uuids | type | source | region | cloud_provider | tags | pulled_on | folder_size | ready | |-----|---------------|------------------|------|--------|--------|----------------|------|-----------|-------------|-------|   <p>source</p>"},{"location":"API_DataBlob/#datablobto_datasource","title":"DataBlob.to_datasource","text":"<pre><code> DataBlob.to_datasource (file_type:str, index_column:str,\n                         sort_by:Union[str,List[str]],\n                         deduplicate_data:bool=False,\n                         blocksize:str='256MB', **kwargs)\n</code></pre> <p>Process the datablob and return a datasource object.</p> <p>Args: file_type: The file type of the datablob. Currently, the API only supports \u201ccsv\u201d and \u201cparquet\u201d as file types. index_column: The column to use as index (row labels). sort_by: The column(s) to sort the data. Can either be a string or a list of strings. deduplicate_data: If set to True (default value False), the datasource will be created with duplicate rows removed. blocksize: The number of bytes used to split larger files. If None, then the default value 256MB will be used. kwargs: Additional keyword arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file, pass **{\u201cskipfooter\u201d: 100}</p> <p>Returns: An instance of the <code>DataSource</code> class.</p> <p>Raises: ValueError: If the CSV file processing fails. ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for DataBlob.to_datasource:\n# Positive case: Uploading a from from s3\n\nwith generate_db() as db:\n    # Creating ds with kwargs\n    ds = db.to_datasource(\n        file_type=\"parquet\",\n        index_column=\"user_id\",\n        sort_by=\"event_time\",\n        **{\"parse_dates\": [\"event_time\"], \"skipfooter\": 100},\n    )\n\n    display(f\"{ds.uuid=}\")\n    assert len(ds.uuid.replace(\"-\", \"\")) == 32\n\n    ds.progress_bar()\n\n    display(f\"{len(ds.head())=}\")\n    assert len(ds.head()) == 10\n\n    display(f\"{ds.dtypes['event_time'][0]=}\")\n    assert ds.dtypes[\"event_time\"][0] == \"datetime64[ns, UTC]\", ds.dtypes[\"event_time\"][\n        0\n    ]\n\n    ds.head()\n</code></pre> <pre><code>\"ds.uuid='8218dde1-b39b-4dba-8f57-fc826e57573f'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00, 55.80s/it]\n\n'len(ds.head())=10'\n\n\"ds.dtypes['event_time'][0]='datetime64[ns, UTC]'\"\n</code></pre> <pre><code># Tests for DataBlob.to_datasource:\n# Positive case: Uploading a single csv file from local\n\n# Downloading the sample\ntemp_dir, csv_dirpath, paruqet_dirpath = get_test_csv_path()\n\ndb_local_csv = DataBlob.from_local(path=csv_dirpath / \"file-1.csv\")\n\ndisplay(f\"{db_local_csv.uuid=}\")\nassert len(remove_hypens_from_id(db_local_csv.uuid)) == 32\n\ndisplay(f\"{db_local_csv.is_ready()=}\")\nassert db_local_csv.is_ready()\ndb_local_csv.progress_bar()\n\nds = db_local_csv.to_datasource(\n    file_type=\"csv\",\n    index_column=\"user_id\",\n    sort_by=\"event_time\",\n)\n\ndisplay(f\"{ds.uuid=}\")\nassert len(ds.uuid.replace(\"-\", \"\")) == 32\n\nds.progress_bar()\n\ndisplay(f\"{len(ds.head())=}\")\nassert len(ds.head()) == 10\n\nds.head()\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_w9woyb82/parquet/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_w9woyb82/parquet/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.12.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.6.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.8.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_w9woyb82/parquet/part.9.parquet\n\n[Path('/tmp/test_s3_download_w9woyb82/csv/file-15.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-13.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-17.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-4.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-19.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-3.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-18.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-2.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-11.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-9.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-0.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-7.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-5.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-1.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-16.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-6.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-8.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-14.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-12.csv'),\n Path('/tmp/test_s3_download_w9woyb82/csv/file-10.csv')]\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:03&lt;00:00,  3.25s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.46s/it]\n\n\"db_local_csv.uuid='88c66045-05d8-46f1-8885-183e7395aa9a'\"\n\n'db_local_csv.is_ready()=True'\n\n\"ds.uuid='a979066a-edbc-402d-99ca-df01b3cc3fcf'\"\n\n'len(ds.head())=10'\n</code></pre>   |           | event_time                | event_type | product_id | category_id         | category_code      | brand  | price   | user_session                         | |-----------|---------------------------|------------|------------|---------------------|--------------------|--------|---------|--------------------------------------| | user_id   |                           |            |            |                     |                    |        |         |                                      | | 447889667 | 2019-11-06 06:54:15+00:00 | view       | 1306569    | 2053013558920217191 | computers.notebook | acer   | 1029.60 | 219e1ee2-dc29-40fe-84e5-386309f11d82 | | 490599351 | 2019-11-06 00:42:06+00:00 | view       | 1305808    | 2053013558920217191 | computers.notebook | hp     | 869.78  | 3ec0eb00-1072-4ce1-b221-94d9ffe25072 | | 497403461 | 2019-11-06 05:37:02+00:00 | view       | 1307310    | 2053013558920217191 | computers.notebook | acer   | 283.07  | e53c264b-db03-4e0f-b7ca-9f2f893f32c4 | | 497403461 | 2019-11-06 05:38:47+00:00 | view       | 1307310    | 2053013558920217191 | computers.notebook | acer   | 283.07  | e53c264b-db03-4e0f-b7ca-9f2f893f32c4 | | 499359460 | 2019-11-06 01:36:08+00:00 | view       | 1307076    | 2053013558920217191 | computers.notebook | asus   | 669.23  | 28cfd249-10d7-4ca4-8d59-77d4f5bfec8c | | 500383663 | 2019-11-05 20:33:53+00:00 | view       | 1307004    | 2053013558920217191 | computers.notebook | lenovo | 290.60  | fb1c58ec-3ded-453e-b90a-9aff884f2653 | | 501884298 | 2019-11-06 06:13:47+00:00 | view       | 1300742    | 2053013558920217191 | computers.notebook | apple  | 2181.22 | 7ec67179-bd15-4c55-8c6d-8f643ffe5bc4 | | 501884298 | 2019-11-06 06:14:35+00:00 | view       | 1306315    | 2053013558920217191 | computers.notebook | apple  | 1492.70 | 7ec67179-bd15-4c55-8c6d-8f643ffe5bc4 | | 501884298 | 2019-11-06 06:14:47+00:00 | view       | 1306198    | 2053013558920217191 | computers.notebook | apple  | 1783.55 | 7ec67179-bd15-4c55-8c6d-8f643ffe5bc4 | | 501884298 | 2019-11-06 06:15:34+00:00 | view       | 1304409    | 2053013558920217191 | computers.notebook | apple  | 1402.87 | 7ec67179-bd15-4c55-8c6d-8f643ffe5bc4 |   <p>source</p>"},{"location":"API_DataBlob/#datablobtag","title":"DataBlob.tag","text":"<pre><code> DataBlob.tag (name:str)\n</code></pre> <p>Tag an existing datablob in the server.</p> <p>Args: name: A string to tag the datablob.</p> <p>Returns: A pandas dataframe with the details of the tagged datablob.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for DataBlob.tag\n\nwith generate_db() as db:\n    # getting the details of the data source\n    df = db.tag(name=\"v1.1.0\")\n\n    display(df)\n    assert \"v1.1.0\" in df.tags[0], df.tags[0]\n    assert df[\"source\"][0] == TEST_S3_URI\n</code></pre>   |     | datablob_uuid                        | datasource_uuids                     | type | source                                            | region     | cloud_provider | tags   | pulled_on           | folder_size | ready | |-----|--------------------------------------|--------------------------------------|------|---------------------------------------------------|------------|----------------|--------|---------------------|-------------|-------| | 0   | a146f37d-44f9-4763-8cd6-f9a76414eef6 | 8218dde1-b39b-4dba-8f57-fc826e57573f | s3   | s3://test-airt-service/ecommerce_behavior_note... | westeurope | azure          | v1.1.0 | 2023-02-23T09:53:17 | 10191763    | True  |   <p>source</p>"},{"location":"API_DataBlob/#datablobdelete","title":"DataBlob.delete","text":"<pre><code> DataBlob.delete ()\n</code></pre> <p>Delete a datablob from the server.</p> <p>Returns: A pandas DataFrame encapsulating the details of the deleted datablob.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Datablob.delete\n# Testing positive scenario\n\nwith generate_db() as db:\n    df = db.delete()\n\n    display(df)\n    assert df.datablob_uuid[0] == db.uuid\n    assert df.shape == (1, len(DataBlob.BASIC_DB_COLS) - 1), df.shape\n    assert df[\"source\"][0] == TEST_S3_URI\n\n    # Passing disabled=False. Should show only the active datablobs.\n    dbx = DataBlob.ls(disabled=False, limit=5000)\n    db_id_list = [db.uuid for db in dbx]\n\n    display(f\"{db_id_list=}\")\n    assert db.uuid not in db_id_list\n\n    # Passing disabled=True. Should show only the deleted datablobs.\n    dbx = DataBlob.ls(disabled=True, limit=5000)\n\n    db_id_list = [db.uuid for db in dbx]\n    display(f\"{db_id_list=}\")\n    assert db.uuid in db_id_list\n\n    # Testing negative scenario. Deleting already deleted datablob\n    with pytest.raises(ValueError) as e:\n        db.delete()\n\n    display(f\"{e.value=}\")\n</code></pre>   |     | datablob_uuid                        | datasource_uuids                     | type | source                                            | region     | cloud_provider | tags   | pulled_on           | folder_size | ready | |-----|--------------------------------------|--------------------------------------|------|---------------------------------------------------|------------|----------------|--------|---------------------|-------------|-------| | 0   | a146f37d-44f9-4763-8cd6-f9a76414eef6 | 8218dde1-b39b-4dba-8f57-fc826e57573f | s3   | s3://test-airt-service/ecommerce_behavior_note... | westeurope | azure          | v1.1.0 | 2023-02-23T09:53:17 | 10191763    | True  |   <pre><code>\"db_id_list=['e73f421b-3a91-4a6b-a269-444a3c7d1c90', '92c9bcb5-8681-4c4d-a9d8-9317ffbaef08', '56cb3306-27e3-4604-b4b0-59216fe996b3', '0cc90f14-b0bd-4976-a090-48b4996b74d4', 'cd976ec5-54b7-4462-ad00-b9517ccc6b67', '0fe1ff4c-f176-4965-9b38-1650b0ae850b', 'a67d7ceb-b5f3-4cfd-bc08-043442cc8973', '28d97722-fbdc-4c8b-a6c4-65672407bce9', '98d15c9f-17e1-4ba5-bae5-80ee3a5c482c', 'a64cb073-eff9-4725-8bba-95896776eb07', '290a0e04-0f66-4ffe-b51d-a9fd7cda6c25', 'cfbe8a09-b93e-4e1c-bc1a-2ff02c94fbc4', 'c4c969e4-3e27-4375-b6c4-1ff536354d9b', '792b2cfe-a80a-4a26-89eb-471f018427b3', '3e2d89f8-88e3-40cd-a4a6-e589c116377b', '0f1ecfc4-85ed-409d-b027-1bd211c2cced', '3a928206-0868-4ae8-aa22-80f2301313d2', '35955244-47bb-434d-9afd-0271b78e30e8', '863e53bf-5f1c-431b-8ffc-eb0c2b2e8d2a', '5cb2a542-b368-45e8-ba24-429c6d7222ae', '4911c647-dae1-469e-8768-a7c45c105c5c', '096063b8-16da-453f-863f-61567b25a904', 'e5a7e776-3ccf-4ae7-b21c-3af178daa251', '9b69af4f-5c45-4492-9eaf-318ca768571b', '173c5812-e3b5-4fd2-9537-13a2d0bca23c', '88c66045-05d8-46f1-8885-183e7395aa9a']\"\n\n\"db_id_list=['2266a8b6-b242-4400-96e6-a3eda7157482', 'a146f37d-44f9-4763-8cd6-f9a76414eef6']\"\n\n\"e.value=ValueError('The datablob has already been deleted.')\"\n</code></pre> <pre><code># Tests for Datablob.delete\n# Testing negative scenario. Deleting invalid datablob\n\n\nwith pytest.raises(ValueError) as e:\n    db = DataBlob(uuid=RANDOM_UUID_FOR_TESTING, type=\"s3\")\n    db.delete()\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The datablob uuid is incorrect. Please try again.')\"\n</code></pre>"},{"location":"API_DataSource/","title":"API_DataSource","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime, timedelta\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._components.datablob import DataBlob\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <p>source</p>"},{"location":"API_DataSource/#datasource","title":"DataSource","text":"<pre><code> DataSource (uuid:str, datablob:Optional[str]=None,\n             folder_size:Optional[int]=None,\n             no_of_rows:Optional[int]=None, error:Optional[str]=None,\n             disabled:Optional[bool]=None, created:Optional[str]=None,\n             pulled_on:Optional[str]=None, user:Optional[str]=None,\n             hash:Optional[str]=None, region:Optional[str]=None,\n             cloud_provider:Optional[str]=None,\n             tags:Optional[List[Dict[str,str]]]=None,\n             total_steps:Optional[int]=None,\n             completed_steps:Optional[int]=None)\n</code></pre> <p>A class for managing datasources and training ML models on them.</p> <p>To instantiate the DataSource class, please call <code>DataBlob.to_datasource</code> method of the <code>DataBlob</code> class.</p> <p>The DataSource class has two categories of methods,</p> <ul> <li>Methods for managing the datasources.</li> <li>Method for training a model against a datasource.</li> </ul> <p>Methods such as <code>delete</code>, <code>ls</code>, <code>details</code>, <code>head</code>, etc., can be used to manage and obtain additional information from a datasource instance.</p> <p>And, the <code>train</code> method can be used to train a new model against a datasource instance.</p> <p>All the function calls to the library are asynchronous and they return immediately. To manage completion, methods inside the returned object will return a status object indicating the completion status and a method to display an interactive progress bar that can be called to check the progress.</p> <pre><code># Run example for _docstring_example\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    _docstring_example,\n    username=username,\n    password=password,\n    uri=TEST_S3_URI,\n    file_type=\"parquet\",\n    index_column=\"user_id\",\n    sort_by=\"event_time\",\n    client_column=\"user_id\",\n    target_column=\"category_code\",\n    tag_name=\"v1.0\",\n)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from datetime import timedelta                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from  airt.client import Client, DataBlob, DataSource                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The                                     \u2502\n\u2502     # access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and                                        \u2502\n\u2502     # AWS_SECRET_ACCESS_KEY environment variables, and the region is set to                                     \u2502\n\u2502     # eu-west-3; feel free to change the cloud provider and the region to                                       \u2502\n\u2502     # suit your needs.                                                                                          \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datasource                                                                                       \u2502\n\u2502     ds = db.to_datasource(                                                                                      \u2502\n\u2502         file_type=\"{fill in file_type}\",                                                                        \u2502\n\u2502         index_column=\"{fill in index_column}\",                                                                  \u2502\n\u2502         sort_by=\"{fill in sort_by}\",                                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     # Call the wait method to wait for the progress to finish but                                               \u2502\n\u2502     # without displaying an interactive progress bar.                                                           \u2502\n\u2502     ds.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the ready status                                                                                  \u2502\n\u2502     print(ds.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the data types of the datasource's columns.                                                       \u2502\n\u2502     print(ds.dtypes)                                                                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the datasource                                                                     \u2502\n\u2502     print(ds.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of all datasource created by the currently                                            \u2502\n\u2502     # logged-in user                                                                                            \u2502\n\u2502     print(DataSource.as_df(DataSource.ls()))                                                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the first few records of the datasource                                                           \u2502\n\u2502     print(ds.head())                                                                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Train a model against the datasource.                                                                     \u2502\n\u2502     # This example predicts which users will perform a purchase                                                 \u2502\n\u2502     # event (\"*purchase\") three hours before they actually do it.                                               \u2502\n\u2502     model = ds.train(                                                                                           \u2502\n\u2502         client_column=\"{fill in client_column}\",                                                                \u2502\n\u2502         target_column=\"{fill in target_column}\",                                                                \u2502\n\u2502         target=\"*purchase\",                                                                                     \u2502\n\u2502         predict_after=timedelta(hours=3)                                                                        \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the training status in a progress bar                                                             \u2502\n\u2502     model.progress_bar()                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the newly created model                                                            \u2502\n\u2502     print(model.details())                                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Tag the datasource                                                                                        \u2502\n\u2502     print(ds.tag(name=\"{fill in tag_name}\"))                                                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Delete the datasource                                                                                     \u2502\n\u2502     print(ds.delete())                                                                                          \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 True                                                                                                        \u2502 \u2502\n\u2502 \u2502             event_time event_type product_id  ...   brand    price user_session                             \u2502 \u2502\n\u2502 \u2502 0  datetime64     object      int64  ...  object  float64       object                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 8 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                         datasource_uuid  ... ready                                                          \u2502 \u2502\n\u2502 \u2502 0  0430fb36-f6c7-41ab-acfe-ecbcf82b866f  ...  True                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 12 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                          datasource_uuid  ... ready                                                         \u2502 \u2502\n\u2502 \u2502 0   b6124d8d-3eba-4a73-8817-671e300f0298  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 1   9de6c9bb-181d-4d6e-80d6-8c650b621998  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 2   9633eee6-e8f4-4595-aa97-abea58446032  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 3   d7c0d49e-cb01-4fa4-86db-a32705b9341a  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 4   691ca6b4-3a83-479b-a7c1-5114c5444678  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 5   6c44323d-0453-4a21-9aaa-d7ae4a9e0916  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 6   574b0458-a1fc-4dd9-a5b4-f0a7a5a57003  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 7   8509ad7f-f971-4ec1-8a55-af775223df83  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 8   cae91cb2-24ae-4afb-8f2f-b2aaec5de724  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 9   455c89d2-6781-46bf-a7eb-15e3efd09362  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 10  e067d1db-3781-4c3c-8ae0-d3825c273b12  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 11  05272168-d830-424e-b623-8508df42d9dd  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 12  b81d1ba1-7beb-4fea-985c-6bbe244fb3ca  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 13  fa18ebdf-5357-4f78-8610-21160c3c4280  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 14  5c48dd20-56d7-467b-a914-4f9d7f8e60f2  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 15  a33630b1-8380-44fd-903a-4ec18a2ff0c3  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 16  3b2c3145-ac09-40f1-ac08-d4808e7e6684  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 17  78ae4260-1839-4265-9c22-042dc2ccc9a3  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 18  7cfe03dd-15c4-48ff-b3cf-941cb2d90a9f  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 19  262c9639-7ffb-42d4-a732-4a76750b3e67  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 20  a49d9bb8-da21-403e-b59e-70420aec4b4c  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 21  c083cf06-4bdf-44e0-ab4f-7bd780670c1a  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 22  6d23b7ce-aabe-4867-98eb-1391f796873e  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 23  905b0592-ab66-47bf-8778-24db6288bbe8  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 24  86962325-070e-4ee3-be05-d6487586f73f  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 25  a7f8fe2d-3cc9-42ac-9d60-01c6e8497b8e  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 26  acaef8a8-83f6-455a-9fed-fdad335e679c  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 27  e0659fab-7794-47a9-9d51-2843242027e4  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 28  a2a63f8a-06f1-49e4-bb22-15979ecaf59a  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 29  3ddc9384-c153-483c-89b3-7c74ddb05e36  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 30  e9103626-e10d-4e54-9965-ed04400b21c7  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 31  cec66f84-4387-43e6-8cbb-e931d8a0b4ab  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 32  3b8dc332-a4eb-4de1-b6ed-496502332761  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 33  276c68f6-e01a-477d-bd59-ab7303aa1b34  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 34  840822c3-6c45-46e6-978c-eb7ced958534  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 35  61233e55-c49b-4c84-bcba-b2e1e6e76f24  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 36  f91e481f-7ff8-4d7f-be74-0cecbd33677e  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 37  3bab7c57-3f74-48d2-8e17-26e62e14d0a1  ...  True                                                         \u2502 \u2502\n\u2502 \u2502 38  0430fb36-f6c7-41ab-acfe-ecbcf82b866f  ...  True                                                         \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [39 rows x 9 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                          event_time  ...                          user_session                              \u2502 \u2502\n\u2502 \u2502 user_id                              ...                                                                    \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-03 14:26:26+00:00  ...  6c1f98d8-064e-4688-a8db-d261d9f94979                              \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-03 14:26:38+00:00  ...  6c1f98d8-064e-4688-a8db-d261d9f94979                              \u2502 \u2502\n\u2502 \u2502 253624608 2019-11-04 05:56:10+00:00  ...  6718074b-3058-41c2-a082-970cdeeb4a8e                              \u2502 \u2502\n\u2502 \u2502 275256741 2019-11-01 02:23:03+00:00  ...  48b5b9c0-3d1b-4380-94f8-dcadb9dd7b5c                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:02+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:43+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 280194708 2019-11-06 15:23:55+00:00  ...  4c51d9d1-8000-4050-a921-3b6fc29db8e9                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:09:20+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:10:59+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502 301823874 2019-11-02 08:14:46+00:00  ...  4d2cb750-093f-413a-ba27-ba862507d22d                              \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [10 rows x 8 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                              model_uuid              created  ... disabled ready                            \u2502 \u2502\n\u2502 \u2502 0  547724d5-d117-4c92-b73f-a8c6e0432fed  2022-10-31T13:00:25  ...    False  True                            \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 14 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                         datasource_uuid  ... ready                                                          \u2502 \u2502\n\u2502 \u2502 0  0430fb36-f6c7-41ab-acfe-ecbcf82b866f  ...  True                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 9 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                         datasource_uuid  ... ready                                                          \u2502 \u2502\n\u2502 \u2502 0  0430fb36-f6c7-41ab-acfe-ecbcf82b866f  ...  True                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 9 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00,  5.04s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.31s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/5 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 128.48it/s]                                                              \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Context manager for creating a Datasource\n\n# Authenticate\nClient.get_token()\n\n_ds = None\n\n\n@contextmanager\ndef generate_ds(force_create: bool = False, pull_ds: bool = True):\n    global _ds\n\n    if _ds is None or force_create:\n        # Create a s3 datasource\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n            cloud_provider=\"aws\",\n            region=\"eu-west-1\",\n        )\n\n        db.progress_bar()\n        display(f\"{db.uuid=}\")\n        assert len(db.uuid.replace(\"-\", \"\")) == 32\n\n        _ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{_ds.uuid=}\")\n        assert len(_ds.uuid.replace(\"-\", \"\")) == 32\n\n        if pull_ds:\n            _ds.progress_bar()\n\n    yield _ds\n</code></pre> <p>source</p>"},{"location":"API_DataSource/#datasourceis_ready","title":"DataSource.is_ready","text":"<pre><code> DataSource.is_ready ()\n</code></pre> <p>Check if the method\u2019s progress is complete.</p> <p>Returns: True if the progress is completed, else False.</p> <pre><code># Tests for DataBlob.is_ready:\n\nwith generate_ds() as ds:\n    ready_status = ds.is_ready()\n    display(f\"{ready_status=}\")\n    assert ready_status\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.16s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.33s/it]\n\n\"db.uuid='797886d0-5d3a-4f78-a381-e13eb87f1281'\"\n\n\"_ds.uuid='4d0ce6e5-751f-4aa5-a389-aae7d0660fcb'\"\n\n'ready_status=True'\n</code></pre> <p>source</p>"},{"location":"API_DataSource/#datasourceprogress_bar","title":"DataSource.progress_bar","text":"<pre><code> DataSource.progress_bar (sleep_for:Union[int,float]=5, timeout:int=0)\n</code></pre> <p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Args: sleep_for: The time interval in seconds between successive API calls. timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable. TimeoutError: in case of connection timeout.</p> <p>source</p>"},{"location":"API_DataSource/#datasourcewait","title":"DataSource.wait","text":"<pre><code> DataSource.wait (sleep_for:Union[int,float]=1, timeout:int=0)\n</code></pre> <p>Blocks execution while waiting for the remote action to complete.</p> <p>Args: sleep_for: The time interval in seconds between successive API calls. timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable. TimeoutError: in case of timeout.</p> <pre><code># Tests for DataSource ls\n# Testing offset and limit parameters\n\n# Testing list without offset and limit\n\nwith generate_ds() as ds:\n    ds_list = DataSource.ls()\n\n    for _ds in ds_list:\n        assert isinstance(_ds, DataSource)\n\n    display(f\"{len(ds_list)=}\")\n    assert len(ds_list) &gt;= 0\n\n    # Testing list with offset and limit\n    offset = 1\n    limit = 3\n\n    ds_list = DataSource.ls(offset=offset, limit=limit)\n\n    display(f\"{len(ds_list)=}\")\n    assert 0 &lt;= len(ds_list) &lt;= limit\n\n    # Testing list with invalid offset and limit\n    offset = 1_000_000_000\n    limit = 3\n\n    ds_list = DataSource.ls(offset=offset, limit=limit)\n\n    display(f\"{len(ds_list)=}\")\n    assert ds_list == []\n</code></pre> <pre><code>'len(ds_list)=39'\n\n'len(ds_list)=3'\n\n'len(ds_list)=0'\n</code></pre> <pre><code># Tests for DataSource ls\n# Testing the completed parameter\nwith generate_ds(force_create=True, pull_ds=False) as ds:\n    # Passing Fasle to completed flag. Should show all the data sources including the one's that are yet to be processed and pulled\n    ds_list = DataSource.ls(completed=False, limit=500)\n\n    ds_uuid_list = [ds.uuid for ds in ds_list]\n    display(f\"{ds_uuid_list=}\")\n    assert ds.uuid in ds_uuid_list\n\n    # Passing True to completed flag. Should only the pulled data sources\n    ds_list = DataSource.ls(completed=True, limit=500)\n\n    ds_uuid_list = [ds.uuid for ds in ds_list]\n    display(f\"{ds_uuid_list=}\")\n    assert ds.uuid not in ds_uuid_list\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.18s/it]\n\n\"db.uuid='4533d8ac-b2ab-489b-933d-d751bec289a2'\"\n\n\"_ds.uuid='70d2e95d-7708-4042-a095-65164f2d8afb'\"\n\n\"ds_uuid_list=['b6124d8d-3eba-4a73-8817-671e300f0298', '9de6c9bb-181d-4d6e-80d6-8c650b621998', '9633eee6-e8f4-4595-aa97-abea58446032', 'd7c0d49e-cb01-4fa4-86db-a32705b9341a', '691ca6b4-3a83-479b-a7c1-5114c5444678', '6c44323d-0453-4a21-9aaa-d7ae4a9e0916', '574b0458-a1fc-4dd9-a5b4-f0a7a5a57003', '8509ad7f-f971-4ec1-8a55-af775223df83', 'cae91cb2-24ae-4afb-8f2f-b2aaec5de724', '455c89d2-6781-46bf-a7eb-15e3efd09362', 'e067d1db-3781-4c3c-8ae0-d3825c273b12', '05272168-d830-424e-b623-8508df42d9dd', 'b81d1ba1-7beb-4fea-985c-6bbe244fb3ca', 'fa18ebdf-5357-4f78-8610-21160c3c4280', '5c48dd20-56d7-467b-a914-4f9d7f8e60f2', 'a33630b1-8380-44fd-903a-4ec18a2ff0c3', '3b2c3145-ac09-40f1-ac08-d4808e7e6684', '78ae4260-1839-4265-9c22-042dc2ccc9a3', '7cfe03dd-15c4-48ff-b3cf-941cb2d90a9f', '262c9639-7ffb-42d4-a732-4a76750b3e67', 'a49d9bb8-da21-403e-b59e-70420aec4b4c', 'c083cf06-4bdf-44e0-ab4f-7bd780670c1a', '6d23b7ce-aabe-4867-98eb-1391f796873e', '905b0592-ab66-47bf-8778-24db6288bbe8', '86962325-070e-4ee3-be05-d6487586f73f', 'a7f8fe2d-3cc9-42ac-9d60-01c6e8497b8e', 'acaef8a8-83f6-455a-9fed-fdad335e679c', 'e0659fab-7794-47a9-9d51-2843242027e4', 'a2a63f8a-06f1-49e4-bb22-15979ecaf59a', '3ddc9384-c153-483c-89b3-7c74ddb05e36', 'e9103626-e10d-4e54-9965-ed04400b21c7', 'cec66f84-4387-43e6-8cbb-e931d8a0b4ab', '3b8dc332-a4eb-4de1-b6ed-496502332761', '276c68f6-e01a-477d-bd59-ab7303aa1b34', '840822c3-6c45-46e6-978c-eb7ced958534', '61233e55-c49b-4c84-bcba-b2e1e6e76f24', 'f91e481f-7ff8-4d7f-be74-0cecbd33677e', '3bab7c57-3f74-48d2-8e17-26e62e14d0a1', '4d0ce6e5-751f-4aa5-a389-aae7d0660fcb', '70d2e95d-7708-4042-a095-65164f2d8afb']\"\n\n\"ds_uuid_list=['b6124d8d-3eba-4a73-8817-671e300f0298', '9de6c9bb-181d-4d6e-80d6-8c650b621998', '9633eee6-e8f4-4595-aa97-abea58446032', 'd7c0d49e-cb01-4fa4-86db-a32705b9341a', '691ca6b4-3a83-479b-a7c1-5114c5444678', '6c44323d-0453-4a21-9aaa-d7ae4a9e0916', '574b0458-a1fc-4dd9-a5b4-f0a7a5a57003', '8509ad7f-f971-4ec1-8a55-af775223df83', 'cae91cb2-24ae-4afb-8f2f-b2aaec5de724', '455c89d2-6781-46bf-a7eb-15e3efd09362', 'e067d1db-3781-4c3c-8ae0-d3825c273b12', '05272168-d830-424e-b623-8508df42d9dd', 'b81d1ba1-7beb-4fea-985c-6bbe244fb3ca', 'fa18ebdf-5357-4f78-8610-21160c3c4280', '5c48dd20-56d7-467b-a914-4f9d7f8e60f2', 'a33630b1-8380-44fd-903a-4ec18a2ff0c3', '3b2c3145-ac09-40f1-ac08-d4808e7e6684', '78ae4260-1839-4265-9c22-042dc2ccc9a3', '7cfe03dd-15c4-48ff-b3cf-941cb2d90a9f', '262c9639-7ffb-42d4-a732-4a76750b3e67', 'a49d9bb8-da21-403e-b59e-70420aec4b4c', 'c083cf06-4bdf-44e0-ab4f-7bd780670c1a', '6d23b7ce-aabe-4867-98eb-1391f796873e', '905b0592-ab66-47bf-8778-24db6288bbe8', '86962325-070e-4ee3-be05-d6487586f73f', 'a7f8fe2d-3cc9-42ac-9d60-01c6e8497b8e', 'acaef8a8-83f6-455a-9fed-fdad335e679c', 'e0659fab-7794-47a9-9d51-2843242027e4', 'a2a63f8a-06f1-49e4-bb22-15979ecaf59a', '3ddc9384-c153-483c-89b3-7c74ddb05e36', 'e9103626-e10d-4e54-9965-ed04400b21c7', 'cec66f84-4387-43e6-8cbb-e931d8a0b4ab', '3b8dc332-a4eb-4de1-b6ed-496502332761', '276c68f6-e01a-477d-bd59-ab7303aa1b34', '840822c3-6c45-46e6-978c-eb7ced958534', '61233e55-c49b-4c84-bcba-b2e1e6e76f24', 'f91e481f-7ff8-4d7f-be74-0cecbd33677e', '3bab7c57-3f74-48d2-8e17-26e62e14d0a1', '4d0ce6e5-751f-4aa5-a389-aae7d0660fcb']\"\n</code></pre> <pre><code># Tests for DataSource.as_df:\n\n\ndsx = DataSource.ls()\n\ndf = DataSource.as_df(dsx)\n\nfor c in [\"datasource_uuid\", \"datablob_uuid\"]:\n    assert c in list(df.columns)\n\nassert df.shape == (len(dsx), len(DataSource.BASIC_DS_COLS) - 1)\n\ndf\n</code></pre>   |     | datasource_uuid                      | datablob_uuid                        | region    | cloud_provider | tags           | pulled_on           | no_of_rows | folder_size | ready | |-----|--------------------------------------|--------------------------------------|-----------|----------------|----------------|---------------------|------------|-------------|-------| | 0   | b6124d8d-3eba-4a73-8817-671e300f0298 | b47d59f2-ab15-4d98-a791-b195da2b8662 | eu-west-1 | aws            | latest         | 2022-10-31T09:16:24 | 294599.0   | 6166138.0   | True  | | 1   | 9de6c9bb-181d-4d6e-80d6-8c650b621998 | 16afd522-2a93-4762-970d-8fcd0032fde4 | eu-west-1 | aws            | latest         | 2022-10-31T09:17:35 | 294599.0   | 6166131.0   | True  | | 2   | 9633eee6-e8f4-4595-aa97-abea58446032 | ef058c0c-96c0-42e5-86cf-b0c9d1e82749 | eu-west-3 | aws            | latest         | 2022-10-31T11:13:39 | 294599.0   | 6166146.0   | True  | | 3   | d7c0d49e-cb01-4fa4-86db-a32705b9341a | d3732a6d-25d6-4be6-be95-ecbf412ad1c3 | eu-west-3 | aws            | latest         | 2022-10-31T11:15:14 | 294599.0   | 6166146.0   | True  | | 4   | 691ca6b4-3a83-479b-a7c1-5114c5444678 | aed0a6ff-9865-4356-85b2-21ad8b0d1c1d | eu-west-3 | aws            | latest         | 2022-10-31T11:15:42 | 294599.0   | 6166141.0   | True  | | 5   | 6c44323d-0453-4a21-9aaa-d7ae4a9e0916 | 51822544-72b4-4962-942a-75d2864b96b1 | eu-west-3 | aws            | latest         | 2022-10-31T11:22:17 | 294599.0   | 6166145.0   | True  | | 6   | 574b0458-a1fc-4dd9-a5b4-f0a7a5a57003 | 93c29721-cb54-4f94-94ad-378c536e6511 | eu-west-3 | aws            | latest         | 2022-10-31T11:24:23 | 294599.0   | 6166133.0   | True  | | 7   | 8509ad7f-f971-4ec1-8a55-af775223df83 | 45d4926c-540f-447e-bf1b-b6c37d87c112 | eu-west-3 | aws            | latest         | 2022-10-31T11:30:46 | 294599.0   | 6166142.0   | True  | | 8   | cae91cb2-24ae-4afb-8f2f-b2aaec5de724 | 14f80b29-43fe-4233-8462-d1451d0e7e15 | eu-west-3 | aws            | latest         | 2022-10-31T11:32:00 | 294599.0   | 6166131.0   | True  | | 9   | 455c89d2-6781-46bf-a7eb-15e3efd09362 | 5adbfd8a-c100-4e61-9f9c-5d39909d0df2 | eu-west-3 | aws            | latest         | 2022-10-31T11:35:03 | 294599.0   | 6166141.0   | True  | | 10  | e067d1db-3781-4c3c-8ae0-d3825c273b12 | 3fc405e4-8b6d-486c-a2d5-35549a174235 | eu-west-3 | aws            | latest         | 2022-10-31T11:36:07 | 294599.0   | 6166138.0   | True  | | 11  | 05272168-d830-424e-b623-8508df42d9dd | 167e2b94-473c-4246-9743-3977edac7269 | eu-west-3 | aws            | latest         | 2022-10-31T11:38:25 | 294599.0   | 6166144.0   | True  | | 12  | b81d1ba1-7beb-4fea-985c-6bbe244fb3ca | bed19d03-9f38-496f-addf-ca90e3829d2b | eu-west-3 | aws            | latest         | 2022-10-31T11:39:24 | 294599.0   | 6166140.0   | True  | | 13  | fa18ebdf-5357-4f78-8610-21160c3c4280 | 9253d82e-582b-47c6-b5c0-fc21d1f04dd3 | eu-west-3 | aws            | \\       | 2022-10-31T11:40:25 | 294599.0   | 6166134.0   | True  | | 14  | 5c48dd20-56d7-467b-a914-4f9d7f8e60f2 | 374eb683-c538-46ae-90ed-677197902f4c | eu-west-3 | aws            | latest         | 2022-10-31T11:40:48 | 294599.0   | 6166141.0   | True  | | 15  | a33630b1-8380-44fd-903a-4ec18a2ff0c3 | 2faec7cf-95e9-4777-bba1-29f597075c9e | eu-west-3 | aws            | latest         | 2022-10-31T11:41:30 | 294599.0   | 6166147.0   | True  | | 16  | 3b2c3145-ac09-40f1-ac08-d4808e7e6684 | 60f3d38d-a40d-4244-ac37-66032d2bfffd | eu-west-1 | aws            | latest         | 2022-10-31T11:42:56 | 294599.0   | 6166138.0   | True  | | 17  | 78ae4260-1839-4265-9c22-042dc2ccc9a3 | 93f6c5c2-b408-4fc5-9095-9a0ed2be7bb3 | eu-west-1 | aws            | \\       | 2022-10-31T11:44:00 | 294599.0   | 6166133.0   | True  | | 18  | 7cfe03dd-15c4-48ff-b3cf-941cb2d90a9f | 34592ccb-4f59-49c1-95a4-be393aa67401 | eu-west-3 | aws            | latest         | 2022-10-31T11:44:20 | 294599.0   | 6166139.0   | True  | | 19  | 262c9639-7ffb-42d4-a732-4a76750b3e67 | fe44cccc-8978-4ba3-b9fa-1cc36204cc00 | eu-west-3 | aws            | latest         | 2022-10-31T11:44:44 | 294599.0   | 6166132.0   | True  | | 20  | a49d9bb8-da21-403e-b59e-70420aec4b4c | 9fc0c99d-7642-4d6b-adbc-2a588b06f6f6 | eu-west-3 | aws            | latest         | 2022-10-31T11:45:21 | 294599.0   | 6166133.0   | True  | | 21  | c083cf06-4bdf-44e0-ab4f-7bd780670c1a | 9afff184-91c8-4369-9ac9-a2d6c0bde7ee | eu-west-3 | aws            | latest         | 2022-10-31T11:45:48 | 294599.0   | 6166137.0   | True  | | 22  | 6d23b7ce-aabe-4867-98eb-1391f796873e | 038651b3-6f70-410a-8f4e-c205b5b69994 | eu-west-3 | aws            | \\       | 2022-10-31T11:46:47 | 294599.0   | 6166140.0   | True  | | 23  | 905b0592-ab66-47bf-8778-24db6288bbe8 | dbf1e543-ef78-4c41-93da-25187df10992 | eu-west-3 | aws            | latest         | 2022-10-31T11:47:06 | 294599.0   | 6166139.0   | True  | | 24  | 86962325-070e-4ee3-be05-d6487586f73f | 323695bd-804d-4a00-b833-3a7f0c138174 | eu-west-3 | aws            | latest         | 2022-10-31T11:47:48 | 294599.0   | 6166139.0   | True  | | 25  | a7f8fe2d-3cc9-42ac-9d60-01c6e8497b8e | 85bffc07-0cd9-4bab-8d80-063da0163884 | eu-west-3 | aws            | latest         | 2022-10-31T11:48:35 | 294599.0   | 6166145.0   | True  | | 26  | acaef8a8-83f6-455a-9fed-fdad335e679c | d546f45d-fc8d-4a19-8863-84111f1d27da | eu-west-3 | aws            | latest         | 2022-10-31T11:56:48 | 294599.0   | 6166138.0   | True  | | 27  | e0659fab-7794-47a9-9d51-2843242027e4 | 104cc3fb-24f5-4d8c-86e7-bcdf46c2f0c0 | eu-west-3 | aws            | latest         | 2022-10-31T12:01:46 | 294599.0   | 6166144.0   | True  | | 28  | a2a63f8a-06f1-49e4-bb22-15979ecaf59a | 275bc5b8-1b28-4aae-95be-15a7539d22e5 | eu-west-3 | aws            | \\       | 2022-10-31T12:03:59 | 294599.0   | 6166138.0   | True  | | 29  | 3ddc9384-c153-483c-89b3-7c74ddb05e36 | 479101f7-c74c-4818-a0ca-32b8ebb1a18d | eu-west-3 | aws            | latest         | 2022-10-31T12:04:11 | 294599.0   | 6166137.0   | True  | | 30  | e9103626-e10d-4e54-9965-ed04400b21c7 | 0d0d07af-d061-44ff-88ac-ea39b9edb696 | eu-west-3 | aws            | \\       | 2022-10-31T12:04:58 | 294599.0   | 6166148.0   | True  | | 31  | cec66f84-4387-43e6-8cbb-e931d8a0b4ab | e5218232-7917-4efc-b64e-a564bb976c59 | eu-west-3 | aws            | latest         | 2022-10-31T12:05:22 | 294599.0   | 6166140.0   | True  | | 32  | 3b8dc332-a4eb-4de1-b6ed-496502332761 | 27a76f1b-d5cb-4e9a-9c32-5259fd5b3374 | eu-west-3 | aws            | latest         | 2022-10-31T12:13:20 | 294599.0   | 6166140.0   | True  | | 33  | 276c68f6-e01a-477d-bd59-ab7303aa1b34 | 71535790-74cc-44d8-a83d-fded0e66c3f2 | eu-west-1 | aws            | latest         | 2022-10-31T12:15:22 | 294599.0   | 6166139.0   | True  | | 34  | 840822c3-6c45-46e6-978c-eb7ced958534 | db1d3aa4-0864-45c9-bb4c-59313e40158f | eu-west-1 | aws            | latest         | 2022-10-31T12:16:27 | 294599.0   | 6166137.0   | True  | | 35  | 61233e55-c49b-4c84-bcba-b2e1e6e76f24 | 0f9a72eb-0ec1-490f-9697-c499127d4b56 | eu-west-3 | aws            | latest         | 2022-10-31T12:23:21 | 294599.0   | 6166140.0   | True  | | 36  | f91e481f-7ff8-4d7f-be74-0cecbd33677e | fa8f3f1a-387c-49be-933e-6f9b13c7f890 | eu-west-1 | aws            | latest         | 2022-10-31T12:46:17 | 294599.0   | 6166138.0   | True  | | 37  | 3bab7c57-3f74-48d2-8e17-26e62e14d0a1 | e027dd69-a344-4ac5-861b-18fd7a5bf2d0 | eu-west-1 | aws            | latest, v1.1.0 | 2022-10-31T12:57:25 | 294599.0   | 6166134.0   | True  | | 38  | 4d0ce6e5-751f-4aa5-a389-aae7d0660fcb | 797886d0-5d3a-4f78-a381-e13eb87f1281 | eu-west-1 | aws            | latest         | 2022-10-31T13:01:00 | 294599.0   | 6166141.0   | True  | | 39  | 70d2e95d-7708-4042-a095-65164f2d8afb | 4533d8ac-b2ab-489b-933d-d751bec289a2 | eu-west-1 | aws            | latest         | None                | NaN        | NaN         | False |   <pre><code># Tests for DataSource.as_df:\n# Testing with empty response\n\ndsx = []\n\ndf = DataSource.as_df(dsx)\n\nfor c in [\"datasource_uuid\", \"datablob_uuid\"]:\n    assert c in list(df.columns)\n\nassert df.shape == (len(dsx), len(DataSource.BASIC_DS_COLS) - 1)\n\ndf\n</code></pre>   |     | datasource_uuid | datablob_uuid | region | cloud_provider | tags | pulled_on | no_of_rows | folder_size | ready | |-----|-----------------|---------------|--------|----------------|------|-----------|------------|-------------|-------|   <pre><code># Tests for DataSource.dtypes:\n\nwith generate_ds() as ds:\n    ds.progress_bar()\n\n    dtypes = ds.dtypes\n    \"int64\" in list(dtypes[\"product_id\"])\n    \"datetime64[ns, UTC]\" in list(dtypes[\"event_time\"])\n    \"object\" in list(dtypes[\"category_code\"])\n\n    display(f\"{ds.dtypes.shape=}\")\n    assert ds.dtypes.shape == (1, 8)\n    display(dtypes)\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.35s/it]\n\n'ds.dtypes.shape=(1, 8)'\n</code></pre>   |     | event_time            | event_type | product_id | category_id | category_code | brand  | price   | user_session | |-----|-----------------------|------------|------------|-------------|---------------|--------|---------|--------------| | 0   | datetime64\\[ns, UTC\\] | object     | int64      | int64       | object        | object | float64 | object       |   <p>source</p>"},{"location":"API_DataSource/#datasourcedelete","title":"DataSource.delete","text":"<pre><code> DataSource.delete ()\n</code></pre> <p>Delete a datasource from the server.</p> <p>Returns: A pandas DataFrame encapsulating the details of the deleted datasource.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for DataSource.delete\n# Testing positive scenario\n\nwith generate_ds() as ds:\n    df = ds.delete()\n\n    display(df)\n    assert ds.uuid in list(df.datasource_uuid)\n    assert df.shape == (1, len(DataSource.BASIC_DS_COLS) - 1), df.shape\n\n    # Passing False to disabled flag. Should show all the active data sources\n    ds_list = DataSource.ls(disabled=False, limit=500)\n\n    ds_uuid_list = [ds.uuid for ds in ds_list]\n    display(f\"{ds_uuid_list=}\")\n\n    assert ds.uuid not in ds_uuid_list\n\n    # Passing True to disabled flag. Should show all the deleted data sources\n    ds_list = DataSource.ls(disabled=True, limit=500)\n\n    ds_uuid_list = [ds.uuid for ds in ds_list]\n    display(f\"{ds_uuid_list=}\")\n    assert ds.uuid in ds_uuid_list\n\n    # Testing negative scenario. Deleting already deleted datasource\n    with pytest.raises(ValueError) as e:\n        ds.delete()\n\n    display(f\"{e.value=}\")\n</code></pre>   |     | datasource_uuid                      | datablob_uuid                        | region    | cloud_provider | tags   | pulled_on           | no_of_rows | folder_size | ready | |-----|--------------------------------------|--------------------------------------|-----------|----------------|--------|---------------------|------------|-------------|-------| | 0   | 70d2e95d-7708-4042-a095-65164f2d8afb | 4533d8ac-b2ab-489b-933d-d751bec289a2 | eu-west-1 | aws            | latest | 2022-10-31T13:02:05 | 294599     | 6166142     | True  |   <pre><code>\"ds_uuid_list=['b6124d8d-3eba-4a73-8817-671e300f0298', '9de6c9bb-181d-4d6e-80d6-8c650b621998', '9633eee6-e8f4-4595-aa97-abea58446032', 'd7c0d49e-cb01-4fa4-86db-a32705b9341a', '691ca6b4-3a83-479b-a7c1-5114c5444678', '6c44323d-0453-4a21-9aaa-d7ae4a9e0916', '574b0458-a1fc-4dd9-a5b4-f0a7a5a57003', '8509ad7f-f971-4ec1-8a55-af775223df83', 'cae91cb2-24ae-4afb-8f2f-b2aaec5de724', '455c89d2-6781-46bf-a7eb-15e3efd09362', 'e067d1db-3781-4c3c-8ae0-d3825c273b12', '05272168-d830-424e-b623-8508df42d9dd', 'b81d1ba1-7beb-4fea-985c-6bbe244fb3ca', 'fa18ebdf-5357-4f78-8610-21160c3c4280', '5c48dd20-56d7-467b-a914-4f9d7f8e60f2', 'a33630b1-8380-44fd-903a-4ec18a2ff0c3', '3b2c3145-ac09-40f1-ac08-d4808e7e6684', '78ae4260-1839-4265-9c22-042dc2ccc9a3', '7cfe03dd-15c4-48ff-b3cf-941cb2d90a9f', '262c9639-7ffb-42d4-a732-4a76750b3e67', 'a49d9bb8-da21-403e-b59e-70420aec4b4c', 'c083cf06-4bdf-44e0-ab4f-7bd780670c1a', '6d23b7ce-aabe-4867-98eb-1391f796873e', '905b0592-ab66-47bf-8778-24db6288bbe8', '86962325-070e-4ee3-be05-d6487586f73f', 'a7f8fe2d-3cc9-42ac-9d60-01c6e8497b8e', 'acaef8a8-83f6-455a-9fed-fdad335e679c', 'e0659fab-7794-47a9-9d51-2843242027e4', 'a2a63f8a-06f1-49e4-bb22-15979ecaf59a', '3ddc9384-c153-483c-89b3-7c74ddb05e36', 'e9103626-e10d-4e54-9965-ed04400b21c7', 'cec66f84-4387-43e6-8cbb-e931d8a0b4ab', '3b8dc332-a4eb-4de1-b6ed-496502332761', '276c68f6-e01a-477d-bd59-ab7303aa1b34', '840822c3-6c45-46e6-978c-eb7ced958534', '61233e55-c49b-4c84-bcba-b2e1e6e76f24', 'f91e481f-7ff8-4d7f-be74-0cecbd33677e', '3bab7c57-3f74-48d2-8e17-26e62e14d0a1', '4d0ce6e5-751f-4aa5-a389-aae7d0660fcb']\"\n\n\"ds_uuid_list=['4c344a80-9bc8-4ede-8746-0524dbed6dac', '137881dd-f3a7-413d-b762-6fa638203842', '59c2d437-17fb-4af8-9e9d-378a885defc7', '8a5e38d8-457b-4092-8680-3c7b83a9d457', '0430fb36-f6c7-41ab-acfe-ecbcf82b866f', '70d2e95d-7708-4042-a095-65164f2d8afb']\"\n\n\"e.value=ValueError('The datasource has already been deleted.')\"\n</code></pre> <pre><code># Tests for DataSource.delete\n# Testing negative scenario. Deleting invalid DataSource ID\n\n\nwith pytest.raises(ValueError) as e:\n    db = DataSource(uuid=RANDOM_UUID_FOR_TESTING)\n    db.delete()\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The datasource uuid is incorrect. Please try again.')\"\n</code></pre> <p>source</p>"},{"location":"API_DataSource/#datasourcedetails","title":"DataSource.details","text":"<pre><code> DataSource.details ()\n</code></pre> <p>Return details of a datasource.</p> <p>Returns: The datasource details as a pandas dataframe.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Datasource.details\n\nwith generate_ds(force_create=True) as ds:\n    df = ds.details()\n\n    assert df.datasource_uuid[0] == ds.uuid\n    assert df.shape == (1, len(DataSource.ALL_DS_COLS) - 1), df.shape\n\n    display(df)\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.33s/it]\n\n\"db.uuid='7df27562-bfbb-4492-a05b-0951225e748d'\"\n\n\"_ds.uuid='48dd8838-1ee0-405b-a718-3a4781b2b37d'\"\n</code></pre>   |     | datasource_uuid                      | datablob_uuid                        | region    | cloud_provider | tags   | pulled_on           | no_of_rows | folder_size | user_uuid                            | error | disabled | ready | |-----|--------------------------------------|--------------------------------------|-----------|----------------|--------|---------------------|------------|-------------|--------------------------------------|-------|----------|-------| | 0   | 48dd8838-1ee0-405b-a718-3a4781b2b37d | 7df27562-bfbb-4492-a05b-0951225e748d | eu-west-1 | aws            | latest | 2022-10-31T13:03:05 | 294599     | 6166135     | c68991a4-0b78-47c6-857d-9a22514f9f09 | None  | False    | True  |   <p>source</p>"},{"location":"API_DataSource/#datasourcetag","title":"DataSource.tag","text":"<pre><code> DataSource.tag (name:str)\n</code></pre> <p>Tag an existing datasource in server.</p> <p>Args: name: A string to tag the datasource.</p> <p>Returns: A pandas dataframe with the details of the tagged datasource.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for DataSource.tag\n\nwith generate_ds() as ds:\n    # getting the details of the data source\n    df = ds.tag(name=\"v1.1.0\")\n\n    display(df)\n    assert \"v1.1.0\" in df.tags[0], df.tags[0]\n</code></pre>   |     | datasource_uuid                      | datablob_uuid                        | region    | cloud_provider | tags           | pulled_on           | no_of_rows | folder_size | ready | |-----|--------------------------------------|--------------------------------------|-----------|----------------|----------------|---------------------|------------|-------------|-------| | 0   | 48dd8838-1ee0-405b-a718-3a4781b2b37d | 7df27562-bfbb-4492-a05b-0951225e748d | eu-west-1 | aws            | latest, v1.1.0 | 2022-10-31T13:03:05 | 294599     | 6166135     | True  |   <p>source</p>"},{"location":"API_DataSource/#datasourcehead","title":"DataSource.head","text":"<pre><code> DataSource.head ()\n</code></pre> <p>Return the first few rows of the datasource.</p> <p>Returns: The first few rows of the datasource as a pandas dataframe.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code>with generate_ds() as ds:\n    ds_head = ds.head()\n\n    assert ds_head.shape == (10, 8)\n    assert ds_head.index.name == \"user_id\"\n    pd.testing.assert_frame_equal(ds.dtypes, ds_head.dtypes.to_frame().T)\n    display(ds_head)\n</code></pre>   |           | event_time                | event_type | product_id | category_id         | category_code      | brand  | price   | user_session                         | |-----------|---------------------------|------------|------------|---------------------|--------------------|--------|---------|--------------------------------------| | user_id   |                           |            |            |                     |                    |        |         |                                      | | 253624608 | 2019-11-03 14:26:26+00:00 | view       | 1304297    | 2053013558920217191 | computers.notebook | apple  | 1029.09 | 6c1f98d8-064e-4688-a8db-d261d9f94979 | | 253624608 | 2019-11-03 14:26:38+00:00 | view       | 1306310    | 2053013558920217191 | computers.notebook | apple  | 1389.74 | 6c1f98d8-064e-4688-a8db-d261d9f94979 | | 253624608 | 2019-11-04 05:56:10+00:00 | view       | 1306310    | 2053013558920217191 | computers.notebook | apple  | 1389.74 | 6718074b-3058-41c2-a082-970cdeeb4a8e | | 275256741 | 2019-11-01 02:23:03+00:00 | view       | 1306265    | 2053013558920217191 | computers.notebook | hp     | 1415.48 | 48b5b9c0-3d1b-4380-94f8-dcadb9dd7b5c | | 280194708 | 2019-11-06 15:23:02+00:00 | view       | 1306952    | 2053013558920217191 | computers.notebook | apple  | 2084.74 | 4c51d9d1-8000-4050-a921-3b6fc29db8e9 | | 280194708 | 2019-11-06 15:23:43+00:00 | view       | 1306952    | 2053013558920217191 | computers.notebook | apple  | 2084.74 | 4c51d9d1-8000-4050-a921-3b6fc29db8e9 | | 280194708 | 2019-11-06 15:23:55+00:00 | view       | 1307053    | 2053013558920217191 | computers.notebook | apple  | 1773.02 | 4c51d9d1-8000-4050-a921-3b6fc29db8e9 | | 301823874 | 2019-11-02 08:09:20+00:00 | view       | 1307345    | 2053013558920217191 | computers.notebook | acer   | 1029.60 | 4d2cb750-093f-413a-ba27-ba862507d22d | | 301823874 | 2019-11-02 08:10:59+00:00 | view       | 1306609    | 2053013558920217191 | computers.notebook | lenovo | 720.71  | 4d2cb750-093f-413a-ba27-ba862507d22d | | 301823874 | 2019-11-02 08:14:46+00:00 | view       | 1307354    | 2053013558920217191 | computers.notebook | asus   | 926.64  | 4d2cb750-093f-413a-ba27-ba862507d22d |   <p>source</p>"},{"location":"API_DataSource/#datasourcetrain","title":"DataSource.train","text":"<pre><code> DataSource.train (client_column:str, timestamp_column:Optional[str]=None,\n                   target_column:str, target:str,\n                   predict_after:datetime.timedelta)\n</code></pre> <p>Train a model against the datasource.</p> <p>This method trains the model for predicting which clients are most likely to have a specified event in the future.</p> <p>The call to this method is asynchronous and the progress can be checked using the progress bar method or the status flag attribute available in the <code>DataSource</code> class.</p> <p>For more model specific information, please check the documentation of <code>Model</code> class.</p> <p>Args: client_column: The column name that uniquely identifies the users/clients. timestamp_column: The timestamp column indicating the time of an event. If not passed, then the default value None will be used. target_column: Target column name that indicates the type of the event. target: Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event. predict_after: Time delta in hours of the expected target event.</p> <p>Returns: An instance of the <code>Model</code> class.</p> <p>Raises: ValueError: If the input parameters to the API are invalid. ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Train:\n# Checking positive scenario.\n\nwith generate_ds() as ds:\n    model = ds.train(\n        client_column=\"user_id\",\n        target_column=\"category_code\",\n        target=\"*checkout\",\n        predict_after=timedelta(hours=3),\n    )\n\n    model.progress_bar()\n\n    display(f\"{model.is_ready()=}\")\n\n    assert model.is_ready()\n    assert len(model.uuid.replace(\"-\", \"\")) == 32\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 119.60it/s]\n\n'model.is_ready()=True'\n</code></pre>"},{"location":"API_Helper/","title":"API_Helper","text":"<pre><code>import tempfile\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pytest\n\nimport airt._sanitizer\nfrom airt._constant import (\n    CLIENT_NAME,\n    SERVICE_PASSWORD,\n    SERVICE_TOKEN,\n    SERVICE_USERNAME,\n)\n</code></pre>"},{"location":"API_Helper/#ensure_is_instance","title":"ensure_is_instance","text":"<pre><code> ensure_is_instance (o:Any, cls:Type)\n</code></pre> <p>A function to check if the object argument is an instance of the class argument.</p> <p>Args: o: A python object for which the instance needs to be checked. cls: The expected instance of the object argument.</p> <p>Raises: A TypeError if the object is not an instance of the class type.</p> <pre><code># Tests for _ensure_is_instance\n\nensure_is_instance(\"sample\", str)\n</code></pre> <pre><code># Tests for _get_json\n\nexpected = {\"key1\": {\"key2\": \"Success\"}}\n\nresponse = requests.models.Response()\nresponse.error_type = \"expired\"\n\n# success status code\nfor ok_status_code in [200, 202, 205, 399]:\n    display(f\"{ok_status_code=}\")\n    response.status_code = ok_status_code\n    response._content = b'{ \"key1\" : {\"key2\" : \"Success\"   } }'\n\n    actual = _get_json(response)\n\n    assert actual == expected\n\n# error status code\nfor error_status_code in [400, 599]:\n    display(f\"{error_status_code=}\")\n    response.status_code = error_status_code\n    response._content = b'{ \"detail\" : \"Failed response\" }'\n\n    with pytest.raises(ValueError):\n        _get_json(response)\n</code></pre> <pre><code>'ok_status_code=200'\n\n'ok_status_code=202'\n\n'ok_status_code=205'\n\n'ok_status_code=399'\n\n'error_status_code=400'\n\n'error_status_code=599'\n</code></pre> <pre><code>def mask(s: str) -&gt; str:\n    return \"*\" * len(s)\n</code></pre> <pre><code>assert mask(\"davor\") == \"*****\"\n</code></pre>"},{"location":"API_Helper/#get_base_url","title":"get_base_url","text":"<pre><code> get_base_url (server:Optional[str])\n</code></pre> <p>Return the base URL for the airt server.</p> <p>If the server value is <code>None</code>, retrive the value from the environment variable <code>AIRT_SERVER_URL</code>. If the variable is not set as well, then the default public server will be used.</p> <pre><code># Tests for get_base_url. Server is not None\n\nserver = \"http://example-service:6006\"\nactual = get_base_url(server)\n\ndisplay(f\"{actual=}\")\nassert actual == server\n</code></pre> <pre><code>\"actual='http://example-service:6006'\"\n</code></pre> <pre><code># Tests for get_base_url. Server is None and the value should be returned from the env variable\n\nserver = None\nactual = get_base_url(server)\nexpected = os.environ.get(SERVER_URL)\n\ndisplay(f\"{mask(actual)=}\")\nassert actual == expected\n</code></pre> <pre><code>\"mask(actual)='************************'\"\n</code></pre> <pre><code># Tests for get_base_url. Server is None and the env variable is also not set. Default value\n# should be returned.\n\n# deleting the env variable\n_airt_server_url = None\n\nif os.environ.get(SERVER_URL):\n    _airt_server_url = os.environ.get(SERVER_URL)\n    del os.environ[SERVER_URL]\n\nserver = None\nactual = get_base_url(server)\nexpected = PROD_URL\n\ndisplay(f\"{actual=}\")\nassert actual == expected\n\n# Assigning the value back to the env variable\nif _airt_server_url:\n    os.environ[SERVER_URL] = _airt_server_url\n</code></pre> <pre><code>\"actual='https://api.airt.ai'\"\n</code></pre>"},{"location":"API_Helper/#post_data","title":"post_data","text":"<pre><code> post_data (url:str, token:Optional[str],\n            data:Optional[Dict[str,Any]]=None,\n            json:Optional[Dict[str,Any]]=None)\n</code></pre> <p>A function to send a POST request.</p> <p>Args: url: The URL of the server to which the request needs to be sent. data: A Dictionary object to send in the body of the POST request. The data sent in this param will automatically be form-encoded by the request library. json: A Dictionary object to send in the body of the POST request. The data sent in this param will automatically be JSON-encoded by the request library. token: The unique auth token for the client, obtained via calling the <code>Client.get_token()</code> method. Set it to <code>None</code> in <code>Client.get_token()</code> to obtain the token.</p> <p>Returns: A dictionary that encapsulates the response body.</p> <p>Raises: ConnectionError: If the server is not reachable. ValueError: If the response code is not in range of 200 - 399.</p> <pre><code># A helper context manager for creating a sample datablob using _post_data.\n\n\n@contextmanager\ndef create_sample_db():\n    # Getting the token\n    username = os.environ[SERVICE_USERNAME]\n    password = os.environ[SERVICE_PASSWORD]\n    server = os.environ.get(SERVER_URL)\n\n    response = requests.post(\n        url=f\"{server}/token\", data=dict(username=username, password=password)\n    )\n\n    token = response.json()[\"access_token\"]\n\n    # Creating a s3 data source by calling _post_data\n    uri = \"s3://test-airt-service/account_312571_events_csv\"\n    access_key = os.environ.get(\"AWS_ACCESS_KEY_ID\")\n    secret_key = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\n\n    response = post_data(\n        url=f\"{server}/datablob/from_s3\",\n        json=dict(uri=uri, access_key=access_key, secret_key=secret_key),\n        token=token,\n    )\n    yield (response[\"uuid\"], token)\n\n\nwith create_sample_db() as (db_id, auth_token):\n    display(f\"{db_id=}, {mask(auth_token)=}\")\n    assert len(db_id) == 36  # including hypens\n    assert len(auth_token) &gt;= 127  # maybe\n</code></pre> <pre><code>\"db_id='abe05b70-4fbb-4215-a62d-e99f6efc5c0f', mask(auth_token)='*******************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for _post_data\n# Checking negative scenario. Checking for invalid username and password combination\n\nusername = \"random_user\"\npassword = \"random password\"\nserver = os.environ.get(SERVER_URL)\n\nwith pytest.raises(ValueError) as e:\n    response = post_data(\n        url=f\"{server}/token\",\n        json=dict(username=username, password=password),\n        token=auth_token,\n    )\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError([{'loc': ['body', 'username'], 'msg': 'field required', 'type': 'value_error.missing'}, {'loc': ['body', 'password'], 'msg': 'field required', 'type': 'value_error.missing'}])\"\n</code></pre>"},{"location":"API_Helper/#get_data","title":"get_data","text":"<pre><code> get_data (url:str, token:Optional[str])\n</code></pre> <p>Send a GET request.</p> <p>Args: url: The URL of the server to which the request needs to be sent. token: The unique auth token for the client, obtained via calling the <code>Client.get_token()</code> method.</p> <p>Returns: A dictionary that encapsulates the response body.</p> <p>Raises: ConnectionError: If the server is not reachable. ValueError: If the response code is not in range of 200 - 399.</p> <pre><code># Tests for _get_data\n# Checking negative scenario. Passing Invalid data_id\nTEST_UUID_V4 = \"00000000-0000-0000-0000-000000000000\"\n\nwith create_sample_db() as (db_id, token):\n    with pytest.raises(ValueError) as e:\n        response = get_data(url=f\"{server}/datablob/{TEST_UUID_V4}\", token=token)\n\n    display(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The datablob uuid is incorrect. Please try again.')\"\n</code></pre>"},{"location":"API_Helper/#delete_data","title":"delete_data","text":"<pre><code> delete_data (url:str, token:Optional[str])\n</code></pre> <p>Send a DELETE request.</p> <p>Args: url: The URL of the server to which the request needs to be sent. token: The unique auth token for the client, obtained via calling the <code>Client.get_token()</code> method.</p> <p>Returns: A dictionary that encapsulates the response body.</p> <p>Raises: ConnectionError: If the server is not reachable. ValueError: If the response code is not in range of 200 - 399.</p> <pre><code># Tests for _delete_data\n# Checking positive scenario.\n\nwith create_sample_db() as (db_id, token):\n    # delete the sample data source\n    response = delete_data(url=f\"{server}/datablob/{db_id}\", token=token)\n\n    display(f\"{response=}\")\n    assert db_id == response[\"uuid\"]\n\n    # Testing negative scenario: Deleting already deleted data source\n    with pytest.raises(ValueError) as e:\n        response = delete_data(url=f\"{server}/datablob/{db_id}\", token=token)\n\n    display(f\"\\n{e.value=}\")\n</code></pre> <pre><code>\"response={'type': 's3', 'total_steps': 1, 'source': 's3://test-airt-service/account_312571_events_csv', 'completed_steps': 0, 'folder_size': None, 'error': None, 'cloud_provider': 'aws', 'region': 'eu-west-3', 'disabled': True, 'created': '2022-10-31T13:01:56', 'pulled_on': None, 'uuid': '5d9489cd-7382-49ea-ad71-ce0b8ff46c77', 'user': 'c68991a4-0b78-47c6-857d-9a22514f9f09', 'datasources': [], 'tags': [{'name': 'latest', 'uuid': '29c0d69f-579c-49e2-8d37-45ee6b6068f9', 'created': '2022-10-31T09:16:01'}]}\"\n\n\"\\ne.value=ValueError('The datablob has already been deleted.')\"\n</code></pre> <pre><code># Tests for _delete_data\n# Testing negative scenario: Deleting invalid datablob\n\nwith pytest.raises(ValueError) as e:\n    delete_data(url=f\"{server}/datablob/{TEST_UUID_V4}\", token=token)\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The datablob uuid is incorrect. Please try again.')\"\n</code></pre>"},{"location":"API_Helper/#add_ready_column","title":"add_ready_column","text":"<pre><code> add_ready_column (df:pandas.core.frame.DataFrame)\n</code></pre> <p>Add ready column to the DataFrame</p> <p>Args: df: A pandas DataFrame with completed_steps and total_steps columns</p> <p>Returns: A pandas DataFrame with ready column</p> <pre><code># Tests for _add_ready_column\n\ntest_df = pd.DataFrame(\n    [\n        {\"total_steps\": 5, \"completed_steps\": 5, \"id\": 2},\n        {\"total_steps\": 5, \"completed_steps\": 3, \"id\": 2},\n    ]\n)\n\nresult = add_ready_column(test_df)\n\ndisplay(result)\nassert result.shape == (2, 2), result.shape\nassert result.iloc[0][\"ready\"]\nassert not result.iloc[1][\"ready\"]\n</code></pre>   |     | id  | ready | |-----|-----|-------| | 0   | 2   | True  | | 1   | 2   | False |"},{"location":"API_Helper/#generate_df","title":"generate_df","text":"<pre><code> generate_df (items:Union[Dict[str,Any],List[Dict[str,Any]]],\n              columns:list)\n</code></pre> <p>Generate a DataFrame based on the items length</p> <p>Args: items: A list encapsulating the response from an API endpoint that needs to be converted into a DataFrame. columns: A list of columns names to be included in the DataFrame.</p> <p>Returns: A DataFrame with a shape of (items, columns), if the length of the items is &gt; 0, otherwise an empty DataFrame with only columns names.</p> <pre><code># Tests for _generate_df\n\nitems = [{\"total_steps\": 5, \"completed_steps\": 5, \"id\": 2}]\ncolumns = [\"id\", \"total_steps\"]\n\n# Testing Positive Scenario\nresult = generate_df(items, columns)\n\ndisplay(result)\nassert result.shape == (len(items), len(columns))\n\n# Testing Negative Scenario\n\nitems = []\n\nresult = generate_df(items, columns)\n\ndisplay(result)\nassert result.shape == (len(items), len(columns))\n</code></pre>   |     | id  | total_steps | |-----|-----|-------------| | 0   | 2   | 5           |     |     | id  | total_steps | |-----|-----|-------------|"},{"location":"API_Helper/#get_values_from_item","title":"get_values_from_item","text":"<pre><code> get_values_from_item (items:list, value:Optional[str]=None)\n</code></pre> <p>Get values from items seperated by comma.</p> <p>Args: items: The item list from the response. value: The value to extract from each items.</p> <p>Returns: The values as string seperated by comma. If the tags list is empty,  will be returned. <pre><code>RANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n\n_tags = [\n    {\n        \"name\": \"version_1.0\",\n        \"id\": RANDOM_UUID_FOR_TESTING,\n        \"created\": \"2021-11-15T00:24:02.571Z\",\n    },\n    {\n        \"name\": \"version_2.0\",\n        \"id\": RANDOM_UUID_FOR_TESTING,\n        \"created\": \"2021-11-15T00:24:02.571Z\",\n    },\n]\n\nvalue = \"name\"\ndisplay(f\"{get_values_from_item(_tags, value)=}\")\nassert get_values_from_item(_tags, value) == \"version_1.0, version_2.0\"\n</code></pre> <pre><code>\"get_values_from_item(_tags, value)='version_1.0, version_2.0'\"\n</code></pre> <pre><code>_tags = []\nvalue = \"name\"\n\ndisplay(f\"{get_values_from_item(_tags, value)=}\")\nassert get_values_from_item(_tags, value) == \"&lt;none&gt;\"\n</code></pre> <pre><code>\"get_values_from_item(_tags, value)='&lt;none&gt;'\"\n</code></pre> <pre><code>response = [\n    {\n        \"type\": \"s3\",\n        \"uuid\": RANDOM_UUID_FOR_TESTING,\n        \"datasources\": [\n            RANDOM_UUID_FOR_TESTING,\n            RANDOM_UUID_FOR_TESTING,\n            RANDOM_UUID_FOR_TESTING,\n        ],\n        \"tags\": \"latest\",\n    },\n    {\n        \"type\": \"s3\",\n        \"uuid\": RANDOM_UUID_FOR_TESTING,\n        \"datasources\": [],\n        \"tags\": \"latest\",\n    },\n]\n\nvalue = \"id\"\n\nfor r in response:\n    r[\"datasources\"] = get_values_from_item(r[\"datasources\"])\n\nassert (\n    response[0][\"datasources\"]\n    == f\"{RANDOM_UUID_FOR_TESTING}, {RANDOM_UUID_FOR_TESTING}, {RANDOM_UUID_FOR_TESTING}\"\n)\nassert response[1][\"datasources\"] == \"&lt;none&gt;\"\nresponse\n</code></pre> <pre><code>[{'type': 's3',\n  'uuid': '00000000-0000-0000-0000-000000000000',\n  'datasources': '00000000-0000-0000-0000-000000000000, 00000000-0000-0000-0000-000000000000, 00000000-0000-0000-0000-000000000000',\n  'tags': 'latest'},\n {'type': 's3',\n  'uuid': '00000000-0000-0000-0000-000000000000',\n  'datasources': '&lt;none&gt;',\n  'tags': 'latest'}]\n</code></pre>"},{"location":"API_Helper/#get_attributes_from_instances","title":"get_attributes_from_instances","text":"<pre><code> get_attributes_from_instances (ox:List[object], attributes:List[str])\n</code></pre> <p>Extract the attributes from the instances.</p> <p>Args: ox: List of instances. attributes: Attributes to extract from the instances as a list</p> <p>Returns: A list encapsulating the attribute name and value pairs of each instance.</p> <pre><code>class Test:\n    def __init__(self, name, age, sex):\n        self.name = name\n        self.age = age\n        self.sex = sex\n\n\ntest_1 = Test(\"sample_user_1\", 30, \"M\")\ntest_2 = Test(\"sample_user_2\", 30, \"F\")\nattributes = [\"name\", \"sex\"]\n\nactual = get_attributes_from_instances([test_1, test_2], attributes)\nexpected = [\n    {\"name\": \"sample_user_1\", \"sex\": \"M\"},\n    {\"name\": \"sample_user_2\", \"sex\": \"F\"},\n]\nassert actual == expected\nactual\n</code></pre> <pre><code>[{'name': 'sample_user_1', 'sex': 'M'}, {'name': 'sample_user_2', 'sex': 'F'}]\n</code></pre>"},{"location":"API_Helper/#dict_to_df","title":"dict_to_df","text":"<pre><code> dict_to_df (d:Dict[str,Any])\n</code></pre> <p>Convert the dict into a pandas dataframe</p> <p>Args: d: Dict containing the data and dtypes</p> <p>Returns: The pandas dataframe constructed from the dict</p> <pre><code>df = pd.util.testing.makeDataFrame().set_index(\"A\")\n\nfor c in df.columns:\n    df[f\"{c}_float32\"] = df[c].astype(\"float32\")\n    df[f\"{c}_int32\"] = df[c].astype(\"int32\")\n    df[f\"{c}_bool\"] = df[c].astype(\"bool\")\ndf[\"ts\"] = np.datetime64(\"now\")\n\ndf_head = df.head()\nd = {\n    \"data\": df_head.to_dict(\"tight\"),\n    \"dtypes\": df_head.dtypes.apply(lambda x: str(x)).to_dict(),\n}\nactual = dict_to_df(d)\n\npd.testing.assert_frame_equal(df_head, actual)\nactual\n</code></pre> <pre><code>/root/.local/lib/python3.8/site-packages/pandas/util/__init__.py:16: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n  import pandas.util.testing\n</code></pre>   |           | B         | C         | D         | B_float32 | B_int32 | B_bool | C_float32 | C_int32 | C_bool | D_float32 | D_int32 | D_bool | ts                  | |-----------|-----------|-----------|-----------|-----------|---------|--------|-----------|---------|--------|-----------|---------|--------|---------------------| | A         |           |           |           |           |         |        |           |         |        |           |         |        |                     | | -0.105421 | 0.476382  | -1.089520 | -1.575199 | 0.476382  | 0       | True   | -1.089520 | -1      | True   | -1.575199 | -1      | True   | 2022-10-31 13:02:09 | | -1.031717 | -1.425013 | 1.237312  | 0.430026  | -1.425013 | -1      | True   | 1.237311  | 1       | True   | 0.430026  | 0       | True   | 2022-10-31 13:02:09 | | -0.544447 | -0.969146 | -0.663001 | -0.020152 | -0.969146 | 0       | True   | -0.663001 | 0       | True   | -0.020152 | 0       | True   | 2022-10-31 13:02:09 | | 0.651276  | 0.020701  | 0.035531  | -0.961769 | 0.020701  | 0       | True   | 0.035531  | 0       | True   | -0.961769 | 0       | True   | 2022-10-31 13:02:09 | | -0.369108 | 0.467793  | -0.586772 | -1.806261 | 0.467793  | 0       | True   | -0.586772 | 0       | True   | -1.806261 | -1      | True   | 2022-10-31 13:02:09 |   <pre><code>url = \"/search?a=string\"\notp = 123\nexpected = \"/search?a=string&amp;otp=123\"\nactual = check_and_append_otp_query_param(url, otp)\nassert actual == expected\nactual\n</code></pre> <pre><code>'/search?a=string&amp;otp=123'\n</code></pre> <pre><code>url = \"/search\"\notp = 123\nexpected = \"/search?otp=123\"\nactual = check_and_append_otp_query_param(url, otp)\n\nassert actual == expected\nactual\n</code></pre> <pre><code>'/search?otp=123'\n</code></pre> <pre><code>url = \"/search\"\notp = None\nexpected = \"/search\"\nactual = check_and_append_otp_query_param(url, otp)\n\nassert actual == expected\nactual\n</code></pre> <pre><code>'/search'\n</code></pre>"},{"location":"API_Helper/#standardize_phone_number","title":"standardize_phone_number","text":"<pre><code> standardize_phone_number (phone_number:str)\n</code></pre> <p>Standardize the user\u2019s phone number</p> <p>This function takes the user\u2019s phone number in different formats and converts it into a standardized format. For example, the user can enter the phone number as 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 to register a UK-based phone number and this function takes the user input and converts it into 440123456789 standardized format.</p> <p>Args: phone_number: The phone number to convert into a standardized format.</p> <p>Returns: The phone number in a standardized format.</p> <pre><code>phone_numbers = [\n    \"+441234567890\",\n    \"00441234567890\",\n    \"441234567890\",\n    \"0044\u2013123-456-7890\",\n    \"+44\u20131234567890\",\n    \"+44 123 456 7890\",\n    \"(+44) 123 456 7890\",\n    \"+44 1234567890\",\n]\n\nfor phone_number in phone_numbers:\n    actual = standardize_phone_number(phone_number=phone_number)\n    expected = \"441234567890\"\n\n    display(actual)\n    assert actual == expected\n</code></pre> <pre><code>'441234567890'\n\n'441234567890'\n\n'441234567890'\n\n'441234567890'\n\n'441234567890'\n\n'441234567890'\n\n'441234567890'\n\n'441234567890'\n</code></pre> <pre><code>def _test(s: str = \"hello\"):\n\"\"\"This is a test function\n\n    Args:\n        s: sample text\n\n    Returns:\n        None\n    \"\"\"\n    pass\n\n\nexample = \"\"\"\nExample:\n    ```python\n    print(\"hello world\")\n    ```\n\"\"\"\nexpected = textwrap.dedent(\n\"\"\"This is a test function\n\nArgs:\n    s: sample text\n\nReturns:\n    None\n\n\nExample:\n    ```python\n    print(\"hello world\")\n    ```\n\"\"\"\n)\n\nadd_example_to_docs(_test, example)\nactual = textwrap.dedent(_test.__doc__)\nnp.testing.assert_array_equal(actual, expected)\n\nactual\n</code></pre> <pre><code>'This is a test function\\n\\nArgs:\\n    s: sample text\\n\\nReturns:\\n    None\\n\\n\\nExample:\\n    ```python\\n    print(\"hello world\")\\n    ```\\n'\n</code></pre>"},{"location":"API_Keys/","title":"API_Keys","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport os\nimport random\nimport string\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\nfrom airt.client import User\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>RANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>def mask(s: str) -&gt; str:\n    return \"*\" * len(s)\n\n\nassert mask(\"test\") == \"****\"\n</code></pre> <p>source</p>"},{"location":"API_Keys/#apikey","title":"APIKey","text":"<pre><code> APIKey (uuid:str, name:Optional[str]=None, expiry:Optional[str]=None,\n         disabled:Optional[bool]=None, created:Optional[str]=None)\n</code></pre> <p>A class for managing the APIKeys in the server.</p> <p>Both the APIKey and the token can be used for accessing the airt services. However, there is a slight difference in generating and managing the two.</p> <p>For generating the APIKey, you first need to get the developer token. Please refer to <code>Client.get_token</code> method documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new APIKeys and can set an expiration date individually. You can also access other methods available in the APIKey class to list, revoke the APIKey at any time.</p> <p>Here\u2019s an example of how to use the APIKey class to create a new key and use it to access the airt service.</p> <p>Example: ```python # Importing necessary libraries from airt.client import Client, APIKey, User</p> <pre><code># Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a new key with the given name\nkey_name = \"{fill in key_name}\"\nnew_key = APIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# Call the set_token method to set the newly generated key\nClient.set_token(token=new_key[\"access_token\"])\n\n# Print the logged-in user details\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n```\n</code></pre> <p>``` python</p>"},{"location":"API_Keys/#tests-for-_get_key_names","title":"tests for _get_key_names","text":"<p>_input = \"key_name\" expected = \"key_name\" actual = APIKey._get_key_names(_input) display(actual)</p> <p>_input = [\"key_name_1\", \"key_name_2\", \"key_name_3\"] expected = [\"key_name_1\", \"key_name_2\", \"key_name_3\"] actual = APIKey._get_key_names(_input) display(actual)</p> <p>class T:     name = \"key_name\"</p> <p>_input = [T(), T(), T()] expected = [\"key_name\", \"key_name\", \"key_name\"] actual = APIKey._get_key_names(_input) display(actual) <pre><code>    ['key_name']\n\n    ['key_name_1', 'key_name_2', 'key_name_3']\n\n    ['key_name', 'key_name', 'key_name']\n\n``` python\ndef generate_random_name(size=15, chars=string.ascii_uppercase + string.digits):\n    return \"\".join(random.choice(chars) for _ in range(size))\n\n\nassert len(generate_random_name()) == 15\nassert type(generate_random_name()) == str\n</code></pre></p> <pre><code># Run example for APIKey\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    APIKey,\n    username=username,\n    password=password,\n    key_name=generate_random_name(),\n)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey, User                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a new key with the given name                                                                      \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     new_key = APIKey.create(name=key_name)                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the newly created key                                                              \u2502\n\u2502     print(APIKey.details(apikey=key_name))                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Call the set_token method to set the newly generated key                                                  \u2502\n\u2502     Client.set_token(token=new_key[\"access_token\"])                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the logged-in user details                                                                          \u2502\n\u2502     # If set_token fails, the line below will throw an error.                                                   \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                    uuid             name  ... expiry disabled                               \u2502 \u2502\n\u2502 \u2502 0  5fd74b8e-b4a0-4055-a2e2-1b8192733d63  I1LMY6MZAH7CGPS  ...   None    False                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 5 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502 {'username': 'johndoe', 'first_name': 'John', 'last_name': 'Doe', 'email': 'johndoe@airt.ai',               \u2502 \u2502\n\u2502 \u2502 'subscription_type': 'small', 'super_user': False, 'phone_number': None, 'uuid':                            \u2502 \u2502\n\u2502 \u2502 '06a385d1-66a1-4ffc-8306-7f5821902fcc', 'disabled': False, 'created': '2022-11-02T08:17:09',                \u2502 \u2502\n\u2502 \u2502 'is_phone_number_verified': False, 'is_mfa_active': False}                                                  \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for APIKey.create\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    APIKey.create,\n    username=username,\n    password=password,\n    key_name=generate_random_name(),\n)\n</code></pre> <pre><code>&lt;module&gt;:13: No type or annotation for parameter 'name'\n&lt;module&gt;:14: No type or annotation for parameter 'expiry'\n&lt;module&gt;:17: No type or annotation for parameter 'otp'\n&lt;module&gt;:21: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a key with the given name and set the expiry to 10 days from now.                                  \u2502\n\u2502     # If the expiry parameter is not specified, a key with no expiry date is created.                           \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     new_key_details = APIKey.create(name=key_name, expiry=10)                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the newly created key                                                              \u2502\n\u2502     print(APIKey.details(apikey=key_name))                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If a new key with the same name is created, an exception will be raised.                                  \u2502\n\u2502     # However, you can create a new key with the name of a revoked key.                                         \u2502\n\u2502     try:                                                                                                        \u2502\n\u2502         APIKey.create(name=key_name, expiry=10)                                                                 \u2502\n\u2502         print(\"Should not print this, the above line should raise an exception\")                                \u2502\n\u2502         raise RuntimeException()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     except ValueError as e:                                                                                     \u2502\n\u2502         print(\"Expected to fail, everything is fine\")                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Finally, either call the below method to set the newly generated key                                      \u2502\n\u2502     # or store it in the AIRT_SERVICE_TOKEN environment variable.                                               \u2502\n\u2502     Client.set_token(token=new_key_details[\"access_token\"])                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If set_token fails, the line below will throw an error.                                                   \u2502\n\u2502     print(APIKey.details(apikey=key_name))                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                    uuid  ... disabled                                                       \u2502 \u2502\n\u2502 \u2502 0  653905a5-a385-4510-b207-44868ef29fae  ...    False                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 5 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502 Expected to fail, everything is fine                                                                        \u2502 \u2502\n\u2502 \u2502                                    uuid  ... disabled                                                       \u2502 \u2502\n\u2502 \u2502 0  653905a5-a385-4510-b207-44868ef29fae  ...    False                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 5 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for APIKey.as_df\n\nrun_examples_from_docstring(\n    APIKey.as_df, key_name=generate_random_name(), username=username, password=password\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'ax'\n&lt;module&gt;:6: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a key without an expiry date in the given name                                                     \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     APIKey.create(name=key_name)                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display all the APIKey instance details in a pandas dataframe                                             \u2502\n\u2502     df = APIKey.as_df(APIKey.ls())                                                                              \u2502\n\u2502     print(df)                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                     uuid  ... disabled                                                      \u2502 \u2502\n\u2502 \u2502 0   37c644b3-4a18-4689-881e-30ed5b6bd1c7  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 1   9c0d3637-15d9-4a8f-ab71-8fc188ab4492  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 2   3d1a2643-440a-4d89-916f-63540b6e9edc  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 3   5bfcbe9e-0dd8-4475-baf1-360228348353  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 4   8b58a44a-1bb0-4d91-8753-be392bdbb613  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 5   2a5759d3-2995-439c-9914-b55579aa9bd8  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 6   5fe476d8-48c3-4464-b57d-bf4f1109710d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 7   b6d27167-38d5-492c-86aa-8920fafcba5c  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 8   77207e77-5453-4055-a8bf-f3379ea4a1fb  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 9   2a85864e-74d7-4392-8415-9703454ecce1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 10  4e577454-aa0a-4c1e-9fe8-240b03f5cb18  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 11  7b25cd3b-ea98-4bdd-8336-48104536010d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 12  bd66c94f-0033-4506-8353-2785cc6623b2  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 13  f45edd6a-9eb6-4854-b1a0-064078cd006f  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 14  55263b34-fbd2-4ebb-87ee-e842acb4e8ed  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 15  9305ae9b-8cd3-467d-8b5e-bb7a244ae720  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 16  559391e6-20a7-4603-bd90-47506c5474d1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 17  0c9b02cf-a890-43d0-8bb5-d730b92fdadf  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 18  a27e01d9-fe4a-464f-9a6f-4ec7d99059e5  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 19  5fd74b8e-b4a0-4055-a2e2-1b8192733d63  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 20  653905a5-a385-4510-b207-44868ef29fae  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 21  3877c87d-564b-43eb-b782-4fa726d4c72e  ...    False                                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [22 rows x 5 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for APIKey.ls\n\nrun_examples_from_docstring(\n    APIKey.ls, key_name=generate_random_name(), username=username, password=password\n)\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'user'\n&lt;module&gt;:8: No type or annotation for parameter 'offset'\n&lt;module&gt;:9: No type or annotation for parameter 'limit'\n&lt;module&gt;:10: No type or annotation for parameter 'include_disabled'\n&lt;module&gt;:13: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a key without an expiry date in the given name                                                     \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     APIKey.create(name=key_name)                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Get the list of all APIKey instances created by the currently logged-in user.                             \u2502\n\u2502     # If you are a super user, you can view the APIkeys created by other users by                               \u2502\n\u2502     # passing their uuid/username in the user parameter.                                                        \u2502\n\u2502     ax = APIKey.ls()                                                                                            \u2502\n\u2502     print(ax)                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the instances in a pandas dataframe                                                \u2502\n\u2502     df = APIKey.as_df(ax)                                                                                       \u2502\n\u2502     print(df)                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 [&lt;airt.client.APIKey object at 0x7fba8b563040&gt;, &lt;airt.client.APIKey object at 0x7fba8b667be0&gt;,              \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba8b58a070&gt;, &lt;airt.client.APIKey object at 0x7fba8b58a9a0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba8b58aa00&gt;, &lt;airt.client.APIKey object at 0x7fba7b2fa8e0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2faf40&gt;, &lt;airt.client.APIKey object at 0x7fba7b2fa940&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2fa820&gt;, &lt;airt.client.APIKey object at 0x7fba7b2fa9a0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2fab20&gt;, &lt;airt.client.APIKey object at 0x7fba7b2fa9d0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2faa30&gt;, &lt;airt.client.APIKey object at 0x7fba7b2faa60&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2fa850&gt;, &lt;airt.client.APIKey object at 0x7fba7b2fa910&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b2faa90&gt;, &lt;airt.client.APIKey object at 0x7fba7b28b820&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b28b8e0&gt;, &lt;airt.client.APIKey object at 0x7fba7b28b9d0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b28ba00&gt;, &lt;airt.client.APIKey object at 0x7fba7b28bac0&gt;,               \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.APIKey object at 0x7fba7b28b760&gt;]                                                              \u2502 \u2502\n\u2502 \u2502                                     uuid  ... disabled                                                      \u2502 \u2502\n\u2502 \u2502 0   37c644b3-4a18-4689-881e-30ed5b6bd1c7  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 1   9c0d3637-15d9-4a8f-ab71-8fc188ab4492  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 2   3d1a2643-440a-4d89-916f-63540b6e9edc  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 3   5bfcbe9e-0dd8-4475-baf1-360228348353  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 4   8b58a44a-1bb0-4d91-8753-be392bdbb613  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 5   2a5759d3-2995-439c-9914-b55579aa9bd8  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 6   5fe476d8-48c3-4464-b57d-bf4f1109710d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 7   b6d27167-38d5-492c-86aa-8920fafcba5c  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 8   77207e77-5453-4055-a8bf-f3379ea4a1fb  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 9   2a85864e-74d7-4392-8415-9703454ecce1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 10  4e577454-aa0a-4c1e-9fe8-240b03f5cb18  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 11  7b25cd3b-ea98-4bdd-8336-48104536010d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 12  bd66c94f-0033-4506-8353-2785cc6623b2  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 13  f45edd6a-9eb6-4854-b1a0-064078cd006f  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 14  55263b34-fbd2-4ebb-87ee-e842acb4e8ed  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 15  9305ae9b-8cd3-467d-8b5e-bb7a244ae720  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 16  559391e6-20a7-4603-bd90-47506c5474d1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 17  0c9b02cf-a890-43d0-8bb5-d730b92fdadf  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 18  a27e01d9-fe4a-464f-9a6f-4ec7d99059e5  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 19  5fd74b8e-b4a0-4055-a2e2-1b8192733d63  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 20  653905a5-a385-4510-b207-44868ef29fae  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 21  3877c87d-564b-43eb-b782-4fa726d4c72e  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 22  3be53309-2863-4502-a28e-14526041ece9  ...    False                                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [23 rows x 5 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for APIKey.details\nrun_examples_from_docstring(\n    APIKey.details,\n    key_name=generate_random_name(),\n    username=username,\n    password=password,\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'apikey'\n&lt;module&gt;:6: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a key without an expiry date in the given name                                                     \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     APIKey.create(name=key_name)                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the newly created key                                                              \u2502\n\u2502     print(APIKey.details(apikey=key_name))                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # To display the details of all keys created by the user, use the method below.                             \u2502\n\u2502     df = APIKey.as_df(APIKey.ls())                                                                              \u2502\n\u2502     print(df)                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                    uuid             name  ... expiry disabled                               \u2502 \u2502\n\u2502 \u2502 0  941cb4ea-b453-4f52-808a-ce6a4d06755c  618R65M0PTOWIF6  ...   None    False                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 5 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                                     uuid  ... disabled                                                      \u2502 \u2502\n\u2502 \u2502 0   37c644b3-4a18-4689-881e-30ed5b6bd1c7  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 1   9c0d3637-15d9-4a8f-ab71-8fc188ab4492  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 2   3d1a2643-440a-4d89-916f-63540b6e9edc  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 3   5bfcbe9e-0dd8-4475-baf1-360228348353  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 4   8b58a44a-1bb0-4d91-8753-be392bdbb613  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 5   2a5759d3-2995-439c-9914-b55579aa9bd8  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 6   5fe476d8-48c3-4464-b57d-bf4f1109710d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 7   b6d27167-38d5-492c-86aa-8920fafcba5c  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 8   77207e77-5453-4055-a8bf-f3379ea4a1fb  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 9   2a85864e-74d7-4392-8415-9703454ecce1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 10  4e577454-aa0a-4c1e-9fe8-240b03f5cb18  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 11  7b25cd3b-ea98-4bdd-8336-48104536010d  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 12  bd66c94f-0033-4506-8353-2785cc6623b2  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 13  f45edd6a-9eb6-4854-b1a0-064078cd006f  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 14  55263b34-fbd2-4ebb-87ee-e842acb4e8ed  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 15  9305ae9b-8cd3-467d-8b5e-bb7a244ae720  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 16  559391e6-20a7-4603-bd90-47506c5474d1  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 17  0c9b02cf-a890-43d0-8bb5-d730b92fdadf  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 18  a27e01d9-fe4a-464f-9a6f-4ec7d99059e5  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 19  5fd74b8e-b4a0-4055-a2e2-1b8192733d63  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 20  653905a5-a385-4510-b207-44868ef29fae  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 21  3877c87d-564b-43eb-b782-4fa726d4c72e  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 22  3be53309-2863-4502-a28e-14526041ece9  ...    False                                                      \u2502 \u2502\n\u2502 \u2502 23  941cb4ea-b453-4f52-808a-ce6a4d06755c  ...    False                                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [24 rows x 5 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for APIKey.revoke\n\n# Create a new user and revoke all their apikeys\nClient.get_token(username=os.environ[\"AIRT_SERVICE_SUPER_USER\"])\n\nrandom_name = generate_random_name()\n_user_name = random_name\n_password = random_name\n_email = f\"{random_name}@email.com\"\n\nresponse_df = User.create(\n    username=_user_name,\n    first_name=\"random_first_name\",\n    last_name=\"random_last_name\",\n    email=_email,\n    password=_password,\n    super_user=False,\n    subscription_type=\"test\",\n)\nassert response_df.shape == (1, len(User.USER_COLS))\n\nrun_examples_from_docstring(\n    APIKey.revoke,\n    username=username,\n    password=password,\n    key_name=generate_random_name(),\n    super_user_username=os.environ[\"AIRT_SERVICE_SUPER_USER\"],\n    super_user_password=password,\n    other_username=_user_name,\n)\n# loggin in back as default user\nClient.get_token()\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'keys'\n&lt;module&gt;:7: No type or annotation for parameter 'user'\n&lt;module&gt;:9: No type or annotation for parameter 'otp'\n&lt;module&gt;:13: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a key without an expiry date in the given name                                                     \u2502\n\u2502     key_name = \"{fill in key_name}\"                                                                             \u2502\n\u2502     APIKey.create(name=key_name)                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check that the newly created key exists                                                                   \u2502\n\u2502     print()                                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Revoke the newly created key                                                                              \u2502\n\u2502     # To delete multiple keys, pass a list of key names or key instances                                        \u2502\n\u2502     APIKey.revoke(keys=key_name)                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check that the newly created key does not exists                                                          \u2502\n\u2502     print()                                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 ['SRHE6D4DNOPZON6', 'YY96A5USMFKVLR2', 'Z8D61SQQIBBPTDA', 'D7WPXUSL7HSE39U', 'MLQAANQ3JG2P2LE',             \u2502 \u2502\n\u2502 \u2502 'HYEWVV6LGVYP8XE', '1XSBMNX2LS4W4ET', '14SMS5QRUJ78YPX', '47QN5TNTD9L773E', 'BK1ED7XSCYZD4DH',              \u2502 \u2502\n\u2502 \u2502 'YV7UAHEPG9KBJ05', 'N7LWCXWLDWBN89P', 'PHS18A5DNBYBIAF', 'XACPIZ1XC179M1L', 'QUUF17ZMWFJ9UQK',              \u2502 \u2502\n\u2502 \u2502 'PYQF1BXXM4R3L8K', 'MZP7KPGTWYY9E17', 'CXW83S6H53OTGJ3', '7BSAGI37I8MDIPJ', 'I1LMY6MZAH7CGPS',              \u2502 \u2502\n\u2502 \u2502 'IQ37Y5NEMKAIKPZ', 'ZN5H0ZE9AIVV3CQ', '2R85BB4WSKEBXD8', '618R65M0PTOWIF6', 'NR2ZYP83JT7M0EZ']              \u2502 \u2502\n\u2502 \u2502 ['SRHE6D4DNOPZON6', 'YY96A5USMFKVLR2', 'Z8D61SQQIBBPTDA', 'D7WPXUSL7HSE39U', 'MLQAANQ3JG2P2LE',             \u2502 \u2502\n\u2502 \u2502 'HYEWVV6LGVYP8XE', '1XSBMNX2LS4W4ET', '14SMS5QRUJ78YPX', '47QN5TNTD9L773E', 'BK1ED7XSCYZD4DH',              \u2502 \u2502\n\u2502 \u2502 'YV7UAHEPG9KBJ05', 'N7LWCXWLDWBN89P', 'PHS18A5DNBYBIAF', 'XACPIZ1XC179M1L', 'QUUF17ZMWFJ9UQK',              \u2502 \u2502\n\u2502 \u2502 'PYQF1BXXM4R3L8K', 'MZP7KPGTWYY9E17', 'CXW83S6H53OTGJ3', '7BSAGI37I8MDIPJ', 'I1LMY6MZAH7CGPS',              \u2502 \u2502\n\u2502 \u2502 'IQ37Y5NEMKAIKPZ', 'ZN5H0ZE9AIVV3CQ', '2R85BB4WSKEBXD8', '618R65M0PTOWIF6']                                 \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, APIKey                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # List the APIKeys generated by a specific user                                                             \u2502\n\u2502     user = \"{fill in other_username}\"                                                                           \u2502\n\u2502     ax = APIKey.ls(user=user)                                                                                   \u2502\n\u2502     print()                                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Revoke the APIKeys                                                                                        \u2502\n\u2502     APIKey.revoke(keys=ax, user=user)                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check that all APIkeys have been revoked                                                                  \u2502\n\u2502     print()                                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 []                                                                                                          \u2502 \u2502\n\u2502 \u2502 []                                                                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Tests for APIKeys.create\n# Positive scenario. Passing the expiry as int\nClient.get_token()\nres = APIKey.create(name=generate_random_name(), expiry=5)\n\ndisplay(f\"{mask(res['access_token'])=}\")\nassert len(res[\"access_token\"]) &gt; 0, len(res[\"access_token\"])\n</code></pre> <pre><code>\"mask(res['access_token'])='*************************************************************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for APIKeys.create\n# Positive scenario. Passing the expiry as timedelta\n\nres = APIKey.create(name=generate_random_name(), expiry=timedelta(days=5))\n\ndisplay(f\"{mask(res['access_token'])=}\")\nassert len(res[\"access_token\"]) &gt; 0\n</code></pre> <pre><code>\"mask(res['access_token'])='*************************************************************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for APIKeys.create\n# Positive scenario. Passing the expiry as datetime\n\nres = APIKey.create(name=generate_random_name(), expiry=datetime(2022, 5, 17))\n\ndisplay(f\"{mask(res['access_token'])=}\")\nassert len(res[\"access_token\"]) &gt; 0\n</code></pre> <pre><code>\"mask(res['access_token'])='*************************************************************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for APIKeys.create\n# Positive scenario. Passing the expiry as datetime\n\nres = APIKey.create(name=generate_random_name(), expiry=datetime(2022, 5, 17))\n\ndisplay(f\"{mask(res['access_token'])=}\")\nassert len(res[\"access_token\"]) &gt; 0\n</code></pre> <pre><code>\"mask(res['access_token'])='*************************************************************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for APIKeys.create\n# Positive scenario. Not passing expiry date\n\nres = APIKey.create(name=generate_random_name())\n\ndisplay(f\"{mask(res['access_token'])=}\")\nassert len(res[\"access_token\"]) &gt; 0, len(res[\"access_token\"])\n</code></pre> <pre><code>\"mask(res['access_token'])='***************************************************************************************************************************************************************************'\"\n</code></pre> <pre><code># Tests for APIKeys.create\n# Negative scenario. Passing existing key name\n\nkey_name = generate_random_name()\nres = APIKey.create(name=key_name, expiry=datetime(2022, 5, 17))\n\nwith pytest.raises(ValueError) as e:\n    APIKey.create(name=key_name, expiry=5)\n\ndisplay(str(e.value))\nassert str(e.value) == \"An Api-key with the same name already exists\"\n</code></pre> <pre><code>'An Api-key with the same name already exists'\n</code></pre> <pre><code># Tests for APIKeys.create\n# Negative scenario. Non-MFA user passing OTP parameter while creating new API key\n\nwith pytest.raises(ValueError) as e:\n    random_otp = 123456\n    APIKey.create(name=key_name, expiry=5, otp=random_otp)\ndisplay(str(e.value))\n</code></pre> <pre><code>'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># Tests for APIKey.ls\n\napikeys = APIKey.ls()\nlen(apikeys) &gt; 0\n\nassert isinstance(apikeys[0], APIKey)\n\n# Testing list without offset and limit\ndf = APIKey.as_df(APIKey.ls())\n\ndisplay(df.uuid)\n\nassert 0 &lt; df.shape[0]\n\n# Testing list with offset and limit\noffset = 0\nlimit = 3\n\ndf = APIKey.as_df(APIKey.ls(offset=offset, limit=limit))\n\ndisplay(df.uuid)\n\nassert 0 &lt; df.shape[0] &lt;= limit\n\n# Testing list with invalid offset and limit\noffset = 1_000_000_000\nlimit = 3\n\ndf = APIKey.as_df(APIKey.ls(offset=offset, limit=limit))\ndisplay(df.uuid)\n\nassert df.shape == (0, 5)\n</code></pre> <pre><code>0     37c644b3-4a18-4689-881e-30ed5b6bd1c7\n1     9c0d3637-15d9-4a8f-ab71-8fc188ab4492\n2     3d1a2643-440a-4d89-916f-63540b6e9edc\n3     5bfcbe9e-0dd8-4475-baf1-360228348353\n4     8b58a44a-1bb0-4d91-8753-be392bdbb613\n5     2a5759d3-2995-439c-9914-b55579aa9bd8\n6     5fe476d8-48c3-4464-b57d-bf4f1109710d\n7     b6d27167-38d5-492c-86aa-8920fafcba5c\n8     77207e77-5453-4055-a8bf-f3379ea4a1fb\n9     2a85864e-74d7-4392-8415-9703454ecce1\n10    4e577454-aa0a-4c1e-9fe8-240b03f5cb18\n11    7b25cd3b-ea98-4bdd-8336-48104536010d\n12    bd66c94f-0033-4506-8353-2785cc6623b2\n13    f45edd6a-9eb6-4854-b1a0-064078cd006f\n14    55263b34-fbd2-4ebb-87ee-e842acb4e8ed\n15    9305ae9b-8cd3-467d-8b5e-bb7a244ae720\n16    559391e6-20a7-4603-bd90-47506c5474d1\n17    0c9b02cf-a890-43d0-8bb5-d730b92fdadf\n18    a27e01d9-fe4a-464f-9a6f-4ec7d99059e5\n19    5fd74b8e-b4a0-4055-a2e2-1b8192733d63\n20    653905a5-a385-4510-b207-44868ef29fae\n21    3877c87d-564b-43eb-b782-4fa726d4c72e\n22    3be53309-2863-4502-a28e-14526041ece9\n23    941cb4ea-b453-4f52-808a-ce6a4d06755c\n24    5ee654ea-6b58-4527-accb-7a6f40f2ac8b\n25    3add1b09-bda9-449f-a04f-c3d57068ff2f\n26    62304b89-9532-4417-9787-88ae8c01e655\n27    5af35914-f081-41a5-af57-bfb4946d49ab\n28    311685ca-a88c-4954-8d52-2141590c6495\n29    bc716550-ba83-4917-adcc-13d379a68c33\nName: uuid, dtype: object\n\n0    37c644b3-4a18-4689-881e-30ed5b6bd1c7\n1    9c0d3637-15d9-4a8f-ab71-8fc188ab4492\n2    3d1a2643-440a-4d89-916f-63540b6e9edc\nName: uuid, dtype: object\n\nSeries([], Name: uuid, dtype: float64)\n</code></pre> <pre><code># Tests for APIKey.ls\n# Negative scenario. Normal user accessing other's apikey\n\nwith pytest.raises(ValueError) as e:\n    APIKey.ls(user=RANDOM_UUID_FOR_TESTING)\n\ndisplay(str(e.value))\nassert str(e.value) == \"Insufficient permission to access other user's data\"\n</code></pre> <pre><code>\"Insufficient permission to access other user's data\"\n</code></pre> <pre><code># Tests for APIKey.ls\n# Positive scenario. Super user accessing other's apikey\n\n# logging in as normal user\nClient.get_token()\nexpected = APIKey.as_df(APIKey.ls()).shape\nnormal_user_uuid = User.details()[\"uuid\"]\nnormal_user_name = User.details()[\"username\"]\n\n# logging in as super user\nClient.get_token(username=os.environ[\"AIRT_SERVICE_SUPER_USER\"])\nactual = APIKey.as_df(APIKey.ls(user=normal_user_uuid)).shape\nassert actual == expected, f\"{actual=}, {expected=}\"\nexpected\n\nactual = APIKey.as_df(APIKey.ls(user=normal_user_name)).shape\nassert actual == expected, f\"{actual=}, {expected=}\"\nexpected\n\n# Negative scenario. Super user accessing invalid user's apikey\nwith pytest.raises(ValueError) as e:\n    APIKey.ls(user=RANDOM_UUID_FOR_TESTING)\n\ndisplay(str(e.value))\n\n# login back as normal user\nClient.get_token()\n</code></pre> <pre><code>'The user uuid is incorrect. Please try again.'\n</code></pre> <pre><code># Tests for APIKey.details\n# Getting details by passing api_key name\n\nAPIKey.details(apikey=APIKey.ls()[0].name)\n</code></pre>   |     | uuid                                 | name            | created             | expiry | disabled | |-----|--------------------------------------|-----------------|---------------------|--------|----------| | 0   | 37c644b3-4a18-4689-881e-30ed5b6bd1c7 | SRHE6D4DNOPZON6 | 2022-11-02T08:46:49 | None   | False    |   <pre><code># Tests for APIKey.details\n# Testing negative scenario. Passing invalid key\n\nwith pytest.raises(ValueError) as e:\n    APIKey.details(apikey=RANDOM_UUID_FOR_TESTING)\n\ndisplay(e.value)\n</code></pre> <pre><code>ValueError('No such apikey or not enough authorization to access the apikey.')\n</code></pre> <pre><code># Tests for APIKey.revoke\n# revoking by passing key_name and id\n\n# creating sample keys\nfor i in range(5):\n    APIKey.create(name=generate_random_name())\n\nkey_name = APIKey.ls()[0].name\nkey_uuid = APIKey.ls()[1].uuid\nAPIKey.revoke(keys=[key_name, key_uuid])\n</code></pre>   |     | uuid                                 | name            | created             | expiry              | disabled | |-----|--------------------------------------|-----------------|---------------------|---------------------|----------| | 0   | 37c644b3-4a18-4689-881e-30ed5b6bd1c7 | SRHE6D4DNOPZON6 | 2022-11-02T08:46:49 | None                | True     | | 1   | 9c0d3637-15d9-4a8f-ab71-8fc188ab4492 | YY96A5USMFKVLR2 | 2022-11-02T08:46:49 | 2022-11-07T08:46:00 | True     |   <pre><code># Tests for APIKey.revoke\n# Passing list of api key ids\nAPIKey.revoke(keys=[APIKey.ls()[0].uuid, APIKey.ls()[1].uuid, APIKey.ls()[2].uuid])\n</code></pre>   |     | uuid                                 | name            | created             | expiry              | disabled | |-----|--------------------------------------|-----------------|---------------------|---------------------|----------| | 0   | 3d1a2643-440a-4d89-916f-63540b6e9edc | Z8D61SQQIBBPTDA | 2022-11-02T08:46:50 | 2022-11-07T08:46:00 | True     | | 1   | 5bfcbe9e-0dd8-4475-baf1-360228348353 | D7WPXUSL7HSE39U | 2022-11-02T08:46:50 | 2022-05-17T00:00:00 | True     | | 2   | 8b58a44a-1bb0-4d91-8753-be392bdbb613 | MLQAANQ3JG2P2LE | 2022-11-02T08:46:50 | 2022-05-17T00:00:00 | True     |   <pre><code># Tests for APIKey.revoke\n# revoking by passing key_name and id\n\n# cerating sample keys\nfor i in range(5):\n    APIKey.create(name=generate_random_name())\n\nkey_name = APIKey.ls()[0].name\nkey_uuid = APIKey.ls()[1].uuid\nAPIKey.revoke(keys=[key_name, key_uuid])\n</code></pre>   |     | uuid                                 | name            | created             | expiry              | disabled | |-----|--------------------------------------|-----------------|---------------------|---------------------|----------| | 0   | 2a5759d3-2995-439c-9914-b55579aa9bd8 | HYEWVV6LGVYP8XE | 2022-11-02T08:46:50 | None                | True     | | 1   | 5fe476d8-48c3-4464-b57d-bf4f1109710d | 1XSBMNX2LS4W4ET | 2022-11-02T08:46:50 | 2022-05-17T00:00:00 | True     |   <pre><code># Tests for APIKey.revoke\n# Testing negative scenario. Passing invalid key\n\nwith pytest.raises(ValueError) as e:\n    APIKey.revoke(keys=RANDOM_UUID_FOR_TESTING)\n\ndisplay(e.value)\n</code></pre> <pre><code>ValueError('No such apikey or not enough authorization to access the apikey.')\n</code></pre> <pre><code># Tests for APIKey.revoke\n# Testing negative scenario. Normal user deleting other user's key\n\nwith pytest.raises(ValueError) as e:\n    random_user_id = RANDOM_UUID_FOR_TESTING\n    random_key_id = RANDOM_UUID_FOR_TESTING\n    APIKey.revoke(keys=random_key_id, user=random_user_id)\n\ndisplay(e.value)\nassert str(e.value) == \"Insufficient permission to access other user's data\"\n</code></pre> <pre><code>ValueError(\"Insufficient permission to access other user's data\")\n</code></pre> <pre><code># Tests for APIKey.revoke\n# Positive scenario. Super user deleting other's apikey\nClient.get_token()\nnormal_user_uuid = User.details()[\"uuid\"]\nexpected_api_key_uuid = APIKey.ls()[0].uuid\n\ndisplay(f\"{expected_api_key_uuid=}\")\n\nClient.get_token(username=os.environ[\"AIRT_SERVICE_SUPER_USER\"])\nactual_api_key_uuid = APIKey.revoke(\n    keys=expected_api_key_uuid, user=normal_user_uuid\n).uuid[0]\nassert (\n    actual_api_key_uuid == expected_api_key_uuid\n), f\"{actual_api_key_uuid=}, {expected_api_key_uuid=}\"\n\n# Negative scenario. Super user accessing invalid apikey\nwith pytest.raises(ValueError) as e:\n    APIKey.revoke(keys=RANDOM_UUID_FOR_TESTING, user=normal_user_uuid)\n\n\n# Negative scenario. Super user accessing invalid user\nwith pytest.raises(ValueError) as e:\n    APIKey.revoke(keys=expected_api_key_uuid, user=RANDOM_UUID_FOR_TESTING)\n\n\n# loggin back as normal user\nClient.get_token()\ndisplay(\"OK\")\n</code></pre> <pre><code>\"expected_api_key_uuid='b6d27167-38d5-492c-86aa-8920fafcba5c'\"\n\n'OK'\n</code></pre> <pre><code># Tests for APIKey.revoke\n# Testing negative scenario. Non-MFA user passing otp\n\n\nAPIKey.create(name=generate_random_name())\nkey_name = APIKey.ls()[0].name\nwith pytest.raises(ValueError) as e:\n    random_otp = 123456\n    APIKey.revoke(keys=key_name, otp=random_otp)\n\ndisplay(e.value)\n</code></pre> <pre><code>ValueError('MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.')\n</code></pre> <pre><code># Positive scenario: Super user revoking all keys created by a specific user\n\n# login as super user\nClient.get_token(username=os.environ[\"AIRT_SERVICE_SUPER_USER\"])\n# create a new user\nrandom_name = generate_random_name()\n_user_name = random_name\n_password = random_name\n_email = f\"{random_name}@email.com\"\nresponse_df = User.create(\n    username=_user_name,\n    first_name=\"random_first_name\",\n    last_name=\"random_last_name\",\n    email=_email,\n    password=_password,\n    super_user=False,\n    subscription_type=\"test\",\n)\ndisplay(response_df[[\"uuid\", \"username\", \"created\"]])\nassert response_df.shape == (1, len(User.USER_COLS))\n\n# login as new user\nClient.get_token(username=_user_name, password=_password)\n# create new apikeys\nfor i in range(3):\n    APIKey.create(name=generate_random_name())\nax = APIKey.ls()\ndisplay(APIKey.as_df(ax))\nassert len(ax) == 3, len(ax)\n\n# login as super user\nClient.get_token(username=os.environ[\"AIRT_SERVICE_SUPER_USER\"])\n# List the APIKeys generated by a specific user\nax = APIKey.ls(user=_user_name)\ndisplay(APIKey.as_df(ax))\nassert len(ax) == 3, len(ax)\n# Revoke the APIKeys\nAPIKey.revoke(keys=ax, user=_user_name)\n# Check that all APIkeys have been revoked\nax = APIKey.ls(user=_user_name)\ndisplay(APIKey.as_df(ax))\nassert len(ax) == 0, len(ax)\n\n# loggin back with default user credentials\nClient.get_token()\n</code></pre>   |     | uuid                                 | username        | created             | |-----|--------------------------------------|-----------------|---------------------| | 0   | 1469d528-6900-49a2-8c77-a64470e54f5c | IT5PYBZWFZINKFH | 2022-11-02T08:49:34 |     |     | uuid                                 | name            | created             | expiry | disabled | |-----|--------------------------------------|-----------------|---------------------|--------|----------| | 0   | 31b8a072-3baa-4113-b1f0-c4c3799f42c9 | 3AXQ1P9VGEF2H3K | 2022-11-02T08:49:35 | None   | False    | | 1   | 7439b44b-0ed7-44ac-b70e-27a81057b392 | IGUWJDAMIPMS9CN | 2022-11-02T08:49:35 | None   | False    | | 2   | 4db4e416-76b6-4279-b61a-3222892c2019 | 0ATEMGYO7SS6PER | 2022-11-02T08:49:35 | None   | False    |     |     | uuid                                 | name            | created             | expiry | disabled | |-----|--------------------------------------|-----------------|---------------------|--------|----------| | 0   | 31b8a072-3baa-4113-b1f0-c4c3799f42c9 | 3AXQ1P9VGEF2H3K | 2022-11-02T08:49:35 | None   | False    | | 1   | 7439b44b-0ed7-44ac-b70e-27a81057b392 | IGUWJDAMIPMS9CN | 2022-11-02T08:49:35 | None   | False    | | 2   | 4db4e416-76b6-4279-b61a-3222892c2019 | 0ATEMGYO7SS6PER | 2022-11-02T08:49:35 | None   | False    |     |     | uuid | name | created | expiry | disabled | |-----|------|------|---------|--------|----------|"},{"location":"API_Model/","title":"API_Model","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime, timedelta\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._components.datablob import DataBlob\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\nfrom airt.client import DataSource\n</code></pre> <pre><code>display(f\"{logger.getEffectiveLevel()=}\")\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>'logger.getEffectiveLevel()=20'\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <p>source</p>"},{"location":"API_Model/#model","title":"Model","text":"<pre><code> Model (uuid:str, datasource:Optional[str]=None,\n        client_column:Optional[str]=None,\n        target_column:Optional[str]=None, target:Optional[str]=None,\n        predict_after:Optional[str]=None,\n        timestamp_column:Optional[str]=None,\n        total_steps:Optional[int]=None,\n        completed_steps:Optional[int]=None, region:Optional[str]=None,\n        cloud_provider:Optional[str]=None, error:Optional[str]=None,\n        disabled:Optional[bool]=None, created:Optional[str]=None,\n        user:Optional[str]=None)\n</code></pre> <p>A class for querying the model training, evaluation, and prediction status.</p> <p>The Model class is instantiated automatically when the <code>DataSource.train</code> method is called on a datasource. Currently, it is the only way to instantiate the Model class.</p> <p>The model is trained to predict a specific event in the future and we assume the input data to have:</p> <ul> <li>a column identifying a client (client_column). E.g: person, car,   business, etc.,</li> <li>a column specifying a type of event to predict (target_column).   E.g: buy, checkout, etc.,</li> <li>a timestamp column (timestamp_column) specifying the time of an   occurred event.</li> </ul> <p>Along with the above mandatory columns, the input data can have additional columns of any type (int, category, float, datetime type, etc.,). These additional columns will be used in the model training for making more accurate predictions.</p> <p>Finally, we need to know how much ahead we wish to make predictions. This lead time varies widely for each use case and can be in minutes for a webshop or even several weeks for a banking product such as a loan.</p> <p>As always, the model training and prediction is an asynchronous process and can take a few hours to finish depending on the size of your dataset. The progress for the same can be checked by calling the <code>ProgressStatus.is_ready</code> method on the Model instance. Alternatively, you can call the <code>ProgressStatus.progress_bar</code> method to monitor the status interactively.</p> <pre><code># Run example for _docstring_example\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    _docstring_example,\n    username=username,\n    password=password,\n    uri=TEST_S3_URI,\n    file_type=\"parquet\",\n    index_column=\"user_id\",\n    sort_by=\"event_time\",\n    client_column=\"user_id\",\n    target_column=\"category_code\",\n)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from datetime import timedelta                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from  airt.client import Client, DataBlob, Model                                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The                                     \u2502\n\u2502     # access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and                                        \u2502\n\u2502     # AWS_SECRET_ACCESS_KEY environment variables, and the region is set to                                     \u2502\n\u2502     # eu-west-3; feel free to change the cloud provider and the region to                                       \u2502\n\u2502     # suit your needs.                                                                                          \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datasource                                                                                       \u2502\n\u2502     ds = db.to_datasource(                                                                                      \u2502\n\u2502         file_type=\"{fill in file_type}\",                                                                        \u2502\n\u2502         index_column=\"{fill in index_column}\",                                                                  \u2502\n\u2502         sort_by=\"{fill in sort_by}\",                                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     ds.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Train a model to predicts which users will perform a purchase                                             \u2502\n\u2502     # event (\"*purchase\") three hours before they actually do it.                                               \u2502\n\u2502     model = ds.train(                                                                                           \u2502\n\u2502         client_column=\"{fill in client_column}\",                                                                \u2502\n\u2502         target_column=\"{fill in target_column}\",                                                                \u2502\n\u2502         target=\"*purchase\",                                                                                     \u2502\n\u2502         predict_after=timedelta(hours=3)                                                                        \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     model.progress_bar()                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created model                                                              \u2502\n\u2502     print(model.details())                                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of all models created by the currently                                                \u2502\n\u2502     # logged-in user                                                                                            \u2502\n\u2502     print(Model.as_df(Model.ls()))                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Evaluate the newly created model                                                                          \u2502\n\u2502     print(model.evaluate())                                                                                     \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Run predictions on the newly created model                                                                \u2502\n\u2502     prediction = model.predict()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the prediction status in a progress bar                                                           \u2502\n\u2502     prediction.progress_bar()                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display details of the predictions                                                                        \u2502\n\u2502     print(prediction.details())                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Delete the newly created model                                                                            \u2502\n\u2502     print(model.delete())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                              model_uuid              created  ... disabled ready                            \u2502 \u2502\n\u2502 \u2502 0  d6bb1704-8643-457d-8b87-ac09d575d936  2022-10-31T11:38:50  ...    False  True                            \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 14 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                              model_uuid              created  ready                                         \u2502 \u2502\n\u2502 \u2502 0  b3b17f4c-2f00-4f51-9841-5dac52bfea61  2022-10-31T09:16:47   True                                         \u2502 \u2502\n\u2502 \u2502 1  4b4b3909-671f-43f9-b868-d7d70a790e39  2022-10-31T09:17:58   True                                         \u2502 \u2502\n\u2502 \u2502 2  5e80898d-a2a0-4341-8412-157086638d43  2022-10-31T11:14:02   True                                         \u2502 \u2502\n\u2502 \u2502 3  5c9b02a4-23a0-4743-b163-ad74f217d685  2022-10-31T11:35:27   True                                         \u2502 \u2502\n\u2502 \u2502 4  d6bb1704-8643-457d-8b87-ac09d575d936  2022-10-31T11:38:50   True                                         \u2502 \u2502\n\u2502 \u2502             eval                                                                                            \u2502 \u2502\n\u2502 \u2502 accuracy   0.985                                                                                            \u2502 \u2502\n\u2502 \u2502 recall     0.962                                                                                            \u2502 \u2502\n\u2502 \u2502 precision  0.934                                                                                            \u2502 \u2502\n\u2502 \u2502                         prediction_uuid              created  ... error ready                               \u2502 \u2502\n\u2502 \u2502 0  46415528-0c1c-4d07-abef-2db40e33e45f  2022-10-31T11:38:50  ...  None  True                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 8 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502                              model_uuid              created  ready                                         \u2502 \u2502\n\u2502 \u2502 0  d6bb1704-8643-457d-8b87-ac09d575d936  2022-10-31T11:38:50   True                                         \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.35s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/5 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 130.40it/s]                                                              \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/3 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.70s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.70s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code>Client.get_token()\n\n# Context manager for creating and a trained model id\n\n_model = None\n\n\n@contextmanager\ndef generate_model(force_create: bool = False):\n    global _model\n\n    if _model is None or force_create:\n        # Create a s3 datasource\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n        )\n\n        db.progress_bar()\n        display(f\"{db.uuid=}\")\n        assert len(db.uuid.replace(\"-\", \"\")) == 32\n\n        ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{ds.uuid=}\")\n        assert len(ds.uuid.replace(\"-\", \"\")) == 32\n\n        ds.progress_bar()\n\n        _model = ds.train(\n            client_column=\"user_id\",\n            target_column=\"category_code\",\n            target=\"*purchase\",\n            predict_after=timedelta(hours=3),\n        )\n\n        _model.progress_bar()\n\n    yield _model\n</code></pre> <pre><code>with generate_model() as model:\n    # Testing list without offset and limit\n    mx = Model.ls()\n\n    display(f\"{len(mx)=}\")\n    assert len(mx) &gt;= 0\n\n    # Testing list with offset and limit\n    offset = 1\n    limit = 3\n\n    mx = Model.ls(offset=offset, limit=limit)\n\n    display(f\"{len(mx)=}\")\n    assert 0 &lt;= len(mx) &lt;= limit\n\n    # Testing list with invalid offset and limit\n    offset = 1_000_000_000\n    limit = 3\n\n    mx = Model.ls(offset=offset, limit=limit)\n\n    display(f\"{len(mx)=}\")\n    assert mx == []\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.35s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 119.98it/s]\n\n\"db.uuid='bed19d03-9f38-496f-addf-ca90e3829d2b'\"\n\n\"ds.uuid='b81d1ba1-7beb-4fea-985c-6bbe244fb3ca'\"\n\n'len(mx)=5'\n\n'len(mx)=3'\n\n'len(mx)=0'\n</code></pre> <pre><code># Tests for Model.as_df:\n\nmx = Model.ls()\n\ndf = Model.as_df(mx)\n\nassert df.shape == (len(mx), len(Model.BASIC_MODEL_COLS) - 1)\n\ndf\n</code></pre>   |     | model_uuid                           | created             | ready | |-----|--------------------------------------|---------------------|-------| | 0   | b3b17f4c-2f00-4f51-9841-5dac52bfea61 | 2022-10-31T09:16:47 | True  | | 1   | 4b4b3909-671f-43f9-b868-d7d70a790e39 | 2022-10-31T09:17:58 | True  | | 2   | 5e80898d-a2a0-4341-8412-157086638d43 | 2022-10-31T11:14:02 | True  | | 3   | 5c9b02a4-23a0-4743-b163-ad74f217d685 | 2022-10-31T11:35:27 | True  | | 4   | 127e4018-cdb5-4141-8c41-3f7db667367d | 2022-10-31T11:39:47 | True  |   <pre><code># Tests for Model.as_df:\n# Passing empty mx list\n\nmx = []\n\ndf = Model.as_df(mx)\n\nassert df.shape == (len(mx), len(Model.BASIC_MODEL_COLS) - 1)\n\ndf\n</code></pre>   |     | model_uuid | created | ready | |-----|------------|---------|-------|   <p>source</p>"},{"location":"API_Model/#modeldetails","title":"Model.details","text":"<pre><code> Model.details ()\n</code></pre> <p>Return the details of a model.</p> <p>Returns: A pandas DataFrame encapsulating the details of the model.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Model.details\n\nwith generate_model() as model:\n    df = model.details()\n\n    display(df)\n    assert df.model_uuid[0] == model.uuid\n    assert df.shape == (1, len(Model.ALL_MODEL_COLS) - 1), df.shape\n</code></pre>   |     | model_uuid                           | created             | datasource_uuid                      | user_uuid                            | client_column | target_column | target     | predict_after | timestamp_column | region    | cloud_provider | error | disabled | ready | |-----|--------------------------------------|---------------------|--------------------------------------|--------------------------------------|---------------|---------------|------------|---------------|------------------|-----------|----------------|-------|----------|-------| | 0   | 127e4018-cdb5-4141-8c41-3f7db667367d | 2022-10-31T11:39:47 | b81d1ba1-7beb-4fea-985c-6bbe244fb3ca | c68991a4-0b78-47c6-857d-9a22514f9f09 | user_id       | category_code | \\*purchase | 10800.0       | None             | eu-west-3 | aws            | None  | False    | True  |   <pre><code># Tests for Model.details\n# Testing negative scenario. Passing invalid data ID\n\nwith pytest.raises(ValueError) as e:\n    model = Model(uuid=RANDOM_UUID_FOR_TESTING)\n    model.details()\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The model uuid is incorrect. Please try again.')\"\n</code></pre> <p>source</p>"},{"location":"API_Model/#modeldelete","title":"Model.delete","text":"<pre><code> Model.delete ()\n</code></pre> <p>Delete a model from the server.</p> <p>Returns: A pandas DataFrame encapsulating the details of the deleted model.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for model.delete\n\nwith generate_model() as model:\n    df = model.delete()\n    display(df)\n\n    assert df.shape == (1, 3), df.shape\n    assert df.model_uuid[0] == model.uuid\n\n    # Passing disabled=False. Should show only the active models.\n    mx = Model.ls()\n    model_uuid_list = [m.uuid for m in mx]\n\n    display(f\"{model_uuid_list=}\")\n    assert model.uuid not in model_uuid_list\n\n    # Passing disabled=True. Should show only the deleted models.\n    mx = Model.ls(disabled=True)\n    model_uuid_list = [model.uuid for model in mx]\n\n    display(f\"{model_uuid_list=}\")\n    assert model.uuid in model_uuid_list\n\n    # Testing negative scenario. Deleting already deleted model\n    with pytest.raises(ValueError) as e:\n        model.delete()\n\n    display(f\"{e.value=}\")\n</code></pre>   |     | model_uuid                           | created             | ready | |-----|--------------------------------------|---------------------|-------| | 0   | 127e4018-cdb5-4141-8c41-3f7db667367d | 2022-10-31T11:39:47 | True  |   <pre><code>\"model_uuid_list=['b3b17f4c-2f00-4f51-9841-5dac52bfea61', '4b4b3909-671f-43f9-b868-d7d70a790e39', '5e80898d-a2a0-4341-8412-157086638d43', '5c9b02a4-23a0-4743-b163-ad74f217d685']\"\n\n\"model_uuid_list=['0ed30646-9ce7-4529-8d3e-ca8e97750182', '8ae5e31c-a77e-4d67-95f4-5bda6aee8685', '39112b6f-8c74-41f8-a39b-3ce8859a5ca1', '6e1800a4-8e23-4958-b63d-6bbad4a6c0b8', 'd6bb1704-8643-457d-8b87-ac09d575d936', '127e4018-cdb5-4141-8c41-3f7db667367d']\"\n\n\"e.value=ValueError('The model has already been deleted.')\"\n</code></pre> <p>source</p>"},{"location":"API_Model/#modelevaluate","title":"Model.evaluate","text":"<pre><code> Model.evaluate ()\n</code></pre> <p>Return the evaluation metrics of the trained model.</p> <p>Currently, this method returns the model\u2019s accuracy, precision, and recall. In the future, more performance metrics will be added.</p> <p>Returns: The performance metrics of the trained model as a pandas series.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for model.evaluate:\nwith generate_model(force_create=True) as model:\n    df = model.evaluate()\n    display(df)\n    assert df.shape == (3, 1)\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.14s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.34s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 138.69it/s]\n\n\"db.uuid='9253d82e-582b-47c6-b5c0-fc21d1f04dd3'\"\n\n\"ds.uuid='fa18ebdf-5357-4f78-8610-21160c3c4280'\"\n</code></pre>   |           | eval  | |-----------|-------| | accuracy  | 0.985 | | recall    | 0.962 | | precision | 0.934 |   <p>source</p>"},{"location":"API_Model/#modelpredict","title":"Model.predict","text":"<pre><code> Model.predict (data_uuid:Optional[int]=0)\n</code></pre> <p>Run predictions against the trained model.</p> <p>The progress for the same can be checked by calling the <code>is_ready</code> method on the <code>Model</code> instance. Alternatively, you can call the <code>progress_bar</code> method to monitor the status interactively.</p> <p>Args: data_uuid: The datasource uuid to run the predictions. If not set, then the datasource used for training the model will be used for prediction aswell.</p> <p>Returns: An instance of the <code>Prediction</code> class.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for model.predict:\n# Positive scenario. Taking the training data for prediction (not passing data_id in the params)\n\nwith generate_model() as model:\n    predictions = model.predict()\n\n    display(f\"{predictions.uuid=} \\n{predictions.datasource=}\")\n    assert len(predictions.uuid.replace(\"-\", \"\")) == 32\n</code></pre> <pre><code>\"predictions.uuid='31f03b0b-401d-48f4-baf0-91cf89267993' \\npredictions.datasource='fa18ebdf-5357-4f78-8610-21160c3c4280'\"\n</code></pre> <pre><code># Tests for model.predict:\n# Positive scenario. Explicitely passing a data_uuid in the params\n\nwith generate_model() as model:\n    # Create a s3 datasource\n    db = DataBlob.from_s3(\n        uri=TEST_S3_URI,\n        access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n        secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n    )\n\n    db.progress_bar()\n    display(f\"{db.uuid=}\")\n    assert len(db.uuid.replace(\"-\", \"\")) == 32\n\n    ds = db.to_datasource(\n        file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n    )\n\n    ds.progress_bar()\n\n    # Predicting the trained model with the newly created data source\n    predictions = model.predict(data_uuid=ds.uuid)\n\n    predictions.progress_bar()\n\n    display(f\"{predictions.is_ready()=}\")\n\n    display(f\"{predictions.uuid=} \\n{predictions.datasource=} \\n{ds.uuid=}\")\n    assert len(predictions.uuid.replace(\"-\", \"\")) == 32\n    assert predictions.datasource == ds.uuid\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.18s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.35s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.70s/it]\n\n\"db.uuid='2faec7cf-95e9-4777-bba1-29f597075c9e'\"\n\n'predictions.is_ready()=True'\n\n\"predictions.uuid='d9473bcb-5a1d-4b39-ad89-9d3370eb92cb' \\npredictions.datasource='a33630b1-8380-44fd-903a-4ec18a2ff0c3' \\nds.uuid='a33630b1-8380-44fd-903a-4ec18a2ff0c3'\"\n</code></pre>"},{"location":"API_Prediction/","title":"API_Prediction","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport tempfile\nimport time\nfrom contextlib import contextmanager\nfrom datetime import datetime, timedelta\n\nimport boto3\nimport numpy as np\nimport pytest\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nimport airt._sanitizer\nfrom airt._components.datablob import DataBlob\nfrom airt._components.datasource import DataSource\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_USERNAME\nfrom airt._docstring.helpers import run_examples_from_docstring\nfrom airt.client import User\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nTEST_AZURE_PUSH_URI = (\n    \"https://testairtservice.blob.core.windows.net/test-client-push-container\"\n)\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#prediction","title":"Prediction","text":"<pre><code> Prediction (uuid:str, datasource:Optional[str]=None,\n             model:Optional[str]=None, created:Optional[str]=None,\n             total_steps:Optional[int]=None,\n             completed_steps:Optional[int]=None,\n             region:Optional[str]=None, cloud_provider:Optional[str]=None,\n             error:Optional[str]=None, disabled:Optional[bool]=None)\n</code></pre> <p>A class to manage and download the predictions.</p> <p>The Prediction class is automatically instantiated by calling the <code>Model.predict</code> method of a <code>Model</code> instance. Currently, it is the only way to instantiate this class.</p> <p>At the moment, the prediction results can only be</p> <ul> <li> <p>downloaded to a local folder in parquet file format</p> </li> <li> <p>pushed to Azure Blob Storage or an AWS S3 bucket</p> </li> <li> <p>pushed to MySql or ClickHouse database</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <pre><code># Create a test s3 bucket for pushing predictions results\n\nClient.get_token()\n\nuser_details = User.details()\nDEV_BUCKET_NAME = f'{os.environ[\"STORAGE_BUCKET_PREFIX\"]}-eu-west-1'\nTEST_OBJECT_NAME = f\"{user_details['uuid']}/test_API_prediction_to_s3\"\nPREDICTION_TO_S3_URL = f\"s3://{DEV_BUCKET_NAME}/{TEST_OBJECT_NAME}\"\n\n# Create a new key in the s3 bucket\ns3_client = boto3.client(\"s3\")\n\ntry:\n    s3_client.create_bucket(\n        Bucket=DEV_BUCKET_NAME,\n        CreateBucketConfiguration={\"LocationConstraint\": \"eu-west-1\"},\n    )\nexcept s3_client.exceptions.BucketAlreadyOwnedByYou as e:\n    logger.info(\"Bucket already created\")\n\ns3_client.put_object(Bucket=DEV_BUCKET_NAME, Key=(TEST_OBJECT_NAME + \"/\"))\n\n# Run example for _docstring_example\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    _docstring_example,\n    azure_subscription_id=os.environ[\"AZURE_SUBSCRIPTION_ID\"],\n    azure_client_id=os.environ[\"AZURE_CLIENT_ID\"],\n    azure_client_secret=os.environ[\"AZURE_CLIENT_SECRET\"],\n    azure_tenant_id=os.environ[\"AZURE_TENANT_ID\"],\n    azure_group_name=\"test-airt-service\",\n    azure_storage_account_name=\"testairtservice\",\n    username=username,\n    password=password,\n    uri=TEST_S3_URI,\n    file_type=\"parquet\",\n    index_column=\"user_id\",\n    sort_by=\"event_time\",\n    client_column=\"user_id\",\n    target_column=\"category_code\",\n    s3_target_uri=PREDICTION_TO_S3_URL,\n    azure_target_uri=TEST_AZURE_PUSH_URI,\n    mysql_host=os.environ[\"DB_HOST\"],\n    mysql_database=os.environ[\"DB_DATABASE\"],\n    mysql_table=\"prediction_to_mysql\",\n    mysql_db_username=os.environ[\"DB_USERNAME\"],\n    mysql_db_password=os.environ[\"DB_PASSWORD\"],\n    clickhouse_host=os.environ.get(\"CLICKHOUSE_HOST\"),\n    clickhouse_database=os.environ.get(\"CLICKHOUSE_DATABASE\"),\n    clickhouse_table=\"test_clickhouse_push_prediction_airt_client\",\n    clickhouse_db_username=os.environ[\"CLICKHOUSE_USERNAME\"],\n    clickhouse_db_password=os.environ[\"CLICKHOUSE_PASSWORD\"],\n)\n</code></pre> <pre><code>[INFO] __main__: Bucket already created\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     import os                                                                                                   \u2502\n\u2502     import tempfile                                                                                             \u2502\n\u2502     from datetime import timedelta                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from azure.identity import DefaultAzureCredential                                                           \u2502\n\u2502     from azure.mgmt.storage import StorageManagementClient                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     from  airt.client import Client, DataBlob, DataSource, Model, Prediction                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The                                     \u2502\n\u2502     # access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and                                        \u2502\n\u2502     # AWS_SECRET_ACCESS_KEY environment variables, and the region is set to                                     \u2502\n\u2502     # eu-west-3; feel free to change the cloud provider and the region to                                       \u2502\n\u2502     # suit your needs.                                                                                          \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datasource                                                                                       \u2502\n\u2502     ds = db.to_datasource(                                                                                      \u2502\n\u2502         file_type=\"{fill in file_type}\",                                                                        \u2502\n\u2502         index_column=\"{fill in index_column}\",                                                                  \u2502\n\u2502         sort_by=\"{fill in sort_by}\",                                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     ds.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Train a model to predicts which users will perform a purchase                                             \u2502\n\u2502     # event (\"*purchase\") three hours before they actually do it.                                               \u2502\n\u2502     model = ds.train(                                                                                           \u2502\n\u2502         client_column=\"{fill in client_column}\",                                                                \u2502\n\u2502         target_column=\"{fill in target_column}\",                                                                \u2502\n\u2502         target=\"*purchase\",                                                                                     \u2502\n\u2502         predict_after=timedelta(hours=3)                                                                        \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     model.progress_bar()                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Run predictions                                                                                           \u2502\n\u2502     prediction = model.predict()                                                                                \u2502\n\u2502     prediction.progress_bar()                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created prediction                                                         \u2502\n\u2502     print(prediction.details())                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Get the list of all prediction instances created by the currently logged-in user                          \u2502\n\u2502     predx = Prediction.ls()                                                                                     \u2502\n\u2502     print(predx)                                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the prediction instances in a pandas dataframe                                     \u2502\n\u2502     df = Prediction.as_df(predx)                                                                                \u2502\n\u2502     print(df)                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the prediction results in a pandas DataFrame                                                      \u2502\n\u2502     print(prediction.to_pandas())                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Push the prediction results to an AWS S3 bucket                                                           \u2502\n\u2502     s3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Push the prediction results to an Azure Blob Storage                                                      \u2502\n\u2502     os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"                                     \u2502\n\u2502     os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"                                                 \u2502\n\u2502     os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"                                         \u2502\n\u2502     os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"                                                  \u2502\n\u2502     azure_group_name = \"{fill in azure_group_name}\"                                                             \u2502\n\u2502     azure_storage_account_name = \"{fill in azure_storage_account_name}\"                                         \u2502\n\u2502     azure_storage_client = StorageManagementClient(                                                             \u2502\n\u2502         DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]                                           \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = azure_storage_client.storage_accounts.list_keys(                                       \u2502\n\u2502         azure_group_name, azure_storage_account_name                                                            \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}                                 \u2502\n\u2502     azure_credential = azure_storage_keys['key1']                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502     azure_status = prediction.to_azure_blob_storage(                                                            \u2502\n\u2502         uri=\"{fill in azure_target_uri}\",                                                                       \u2502\n\u2502         credential=azure_credential                                                                             \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Push the prediction results to a MySQL database                                                           \u2502\n\u2502     mysql_status = prediction.to_mysql(                                                                         \u2502\n\u2502         username=\"{fill in mysql_db_username}\",                                                                 \u2502\n\u2502         password=\"{fill in mysql_db_password}\",                                                                 \u2502\n\u2502         host=\"{fill in mysql_host}\",                                                                            \u2502\n\u2502         database=\"{fill in mysql_database}\",                                                                    \u2502\n\u2502         table=\"{fill in mysql_table}\",                                                                          \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Push the prediction results to a ClickHouse database                                                      \u2502\n\u2502     clickhouse_status = prediction.to_clickhouse(                                                               \u2502\n\u2502         username=\"{fill in clickhouse_db_username}\",                                                            \u2502\n\u2502         password=\"{fill in clickhouse_db_password}\",                                                            \u2502\n\u2502         host=\"{fill in clickhouse_host}\",                                                                       \u2502\n\u2502         database=\"{fill in clickhouse_database}\",                                                               \u2502\n\u2502         table=\"{fill in clickhouse_table}\",                                                                     \u2502\n\u2502         protocol=\"native\",                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Download the predictions to a local directory                                                             \u2502\n\u2502     # In this example, the prediction results are downloaded                                                    \u2502\n\u2502     # to a temporary directory                                                                                  \u2502\n\u2502     with tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:                                       \u2502\n\u2502         prediction.to_local(path=d)                                                                             \u2502\n\u2502         # Check the downloaded prediction files                                                                 \u2502\n\u2502         downloaded_files = sorted(list(os.listdir(d)))                                                          \u2502\n\u2502         print(downloaded_files)                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the status                                                                                          \u2502\n\u2502     s3_status.wait()                                                                                            \u2502\n\u2502     azure_status.progress_bar()                                                                                 \u2502\n\u2502     mysql_status.progress_bar()                                                                                 \u2502\n\u2502     clickhouse_status.progress_bar()                                                                            \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Delete the prediction                                                                                     \u2502\n\u2502     prediction.delete()                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                         prediction_uuid              created  ... error ready                               \u2502 \u2502\n\u2502 \u2502 0  497a1c21-ca14-414a-beb6-b1ab0e7b8749  2022-11-02T10:34:24  ...  None  True                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 8 columns]                                                                                        \u2502 \u2502\n\u2502 \u2502 [&lt;airt.client.Prediction object at 0x7fcb34c6aa60&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6a7c0&gt;,      \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.Prediction object at 0x7fcb34c6aa90&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6ac70&gt;,       \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.Prediction object at 0x7fcb34c6ad30&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6af40&gt;,       \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.Prediction object at 0x7fcb34c6aa00&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6abe0&gt;,       \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.Prediction object at 0x7fcb34c6ac10&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6af10&gt;,       \u2502 \u2502\n\u2502 \u2502 &lt;airt.client.Prediction object at 0x7fcb34c6aee0&gt;, &lt;airt.client.Prediction object at 0x7fcb34c6a5b0&gt;]       \u2502 \u2502\n\u2502 \u2502                          prediction_uuid              created  ready                                        \u2502 \u2502\n\u2502 \u2502 0   883bac83-1376-4139-8f2b-1a5d60b59043  2022-11-02T08:49:52   True                                        \u2502 \u2502\n\u2502 \u2502 1   2713fc2c-8a46-4e46-8e4b-3f8c44ad1a3a  2022-11-02T08:50:55   True                                        \u2502 \u2502\n\u2502 \u2502 2   f3ae698e-3a2a-4dc6-8eb8-cf358f8851a9  2022-11-02T08:50:56   True                                        \u2502 \u2502\n\u2502 \u2502 3   cad071a7-6e6e-40fe-97db-1f3107665e4b  2022-11-02T08:51:07   True                                        \u2502 \u2502\n\u2502 \u2502 4   07507373-c927-437d-9024-41cb928404a2  2022-11-02T08:52:32   True                                        \u2502 \u2502\n\u2502 \u2502 5   4f017211-0b39-4666-b184-73f5b570a18a  2022-11-02T08:52:57   True                                        \u2502 \u2502\n\u2502 \u2502 6   cbc2a3a6-75ca-478b-8871-85fcc677c47b  2022-11-02T08:53:03   True                                        \u2502 \u2502\n\u2502 \u2502 7   272f3840-d43a-412c-b7e9-6583e57e4ce8  2022-11-02T08:53:32   True                                        \u2502 \u2502\n\u2502 \u2502 8   eb3ebcec-0b24-49fe-b62d-2f7a85025d0f  2022-11-02T08:54:23   True                                        \u2502 \u2502\n\u2502 \u2502 9   2187b579-9889-481b-b0aa-b682e79f7bad  2022-11-02T08:54:47   True                                        \u2502 \u2502\n\u2502 \u2502 10  f32900e3-fb83-4ccf-96ed-aac2d9b48b25  2022-11-02T10:00:03   True                                        \u2502 \u2502\n\u2502 \u2502 11  497a1c21-ca14-414a-beb6-b1ab0e7b8749  2022-11-02T10:34:24   True                                        \u2502 \u2502\n\u2502 \u2502               Score                                                                                         \u2502 \u2502\n\u2502 \u2502 user_id                                                                                                     \u2502 \u2502\n\u2502 \u2502 520088904  0.979853                                                                                         \u2502 \u2502\n\u2502 \u2502 530496790  0.979157                                                                                         \u2502 \u2502\n\u2502 \u2502 561587266  0.979055                                                                                         \u2502 \u2502\n\u2502 \u2502 518085591  0.978915                                                                                         \u2502 \u2502\n\u2502 \u2502 558856683  0.977960                                                                                         \u2502 \u2502\n\u2502 \u2502 520772685  0.004043                                                                                         \u2502 \u2502\n\u2502 \u2502 514028527  0.003890                                                                                         \u2502 \u2502\n\u2502 \u2502 518574284  0.001346                                                                                         \u2502 \u2502\n\u2502 \u2502 532364121  0.001341                                                                                         \u2502 \u2502\n\u2502 \u2502 532647354  0.001139                                                                                         \u2502 \u2502\n\u2502 \u2502 ['part.0.parquet']                                                                                          \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.33s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/5 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 149.65it/s]                                                              \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/3 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.69s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.69s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.82s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.82s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:15&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:20&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:25&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:30&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:35&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:40&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:45&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:50&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00,  5.06s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00, 55.58s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 25.66it/s]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Context manager for creating and a trained model id\n\n# Authentication\nClient.get_token()\n\n_prediction = None\n\n\n@contextmanager\ndef generate_prediction(force_create: bool = False):\n    global _prediction\n\n    if _prediction is None or force_create:\n        # Create a s3 datasource\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n            cloud_provider=\"aws\",\n            region=\"eu-west-1\",\n        )\n\n        db.progress_bar()\n        display(f\"{db.uuid=}\")\n        assert len(db.uuid.replace(\"-\", \"\")) == 32\n\n        ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{ds.uuid=}\")\n        assert len(ds.uuid.replace(\"-\", \"\")) == 32\n\n        ds.progress_bar()\n\n        # Train a model\n        model = ds.train(\n            client_column=\"user_id\",\n            target_column=\"category_code\",\n            target=\"*checkout\",\n            predict_after=timedelta(hours=3),\n        )\n        model.progress_bar()\n\n        # Run Predictions\n        _prediction = model.predict()\n        _prediction.progress_bar()\n\n    yield _prediction\n</code></pre> <pre><code># Tests for Prediction._download_prediction_file_to_local\n# Testing positive scenario\n\nwith generate_prediction() as prediction:\n    # Get sample files URL to download\n    response = Client._get_data(relative_url=f\"/prediction/{prediction.uuid}/to_local\")\n    display(response)\n    with tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n        assert os.listdir(d) == []\n        display(list(os.listdir(d)))\n\n        for file_name, url in response.items():\n            display(file_name, url)\n            Prediction._download_prediction_file_to_local(file_name, url, d)\n\n        downloaded_files = sorted(list(os.listdir(d)))\n        assert downloaded_files == [\"part.0.parquet\"], downloaded_files\n        display(f\"{downloaded_files=}\")\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.21s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.34s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 125.26it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.38s/it]\n\n\"db.uuid='bc63fa44-0184-464a-8f47-ac6dbb2d5310'\"\n\n\"ds.uuid='37a7513d-bc17-4b08-ad5e-906802728bc4'\"\n\n{'part.0.parquet': 'https://s3.eu-west-1.amazonaws.com/harish-airt-client-dev-eu-west-1/1/prediction/18/part.0.parquet?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=********************%2F20221102%2Feu-west-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221102T103650Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=06f499f5593177531237ab5d7dffa3ed6483e74031666b61d0ae81a92226ac2b'}\n\n[]\n\n'part.0.parquet'\n\n'https://s3.eu-west-1.amazonaws.com/harish-airt-client-dev-eu-west-1/1/prediction/18/part.0.parquet?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=********************%2F20221102%2Feu-west-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221102T103650Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=06f499f5593177531237ab5d7dffa3ed6483e74031666b61d0ae81a92226ac2b'\n\n\"downloaded_files=['part.0.parquet']\"\n</code></pre> <pre><code># Tests for Prediction._download_prediction_file_to_local\n# Testing negative scenario. Passing invalid url.\n\nwith generate_prediction() as prediction:\n    # Get sample files URL to download\n    response = {\"random-name\": \"https://random-name.s3.amazonaws.com/random-object\"}\n\n    with tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n        for file_name, url in response.items():\n            with pytest.raises(requests.exceptions.HTTPError) as e:\n                Prediction._download_prediction_file_to_local(file_name, url, d)\n\n        display(f\"{str(e.value)=}\")\n        assert \"403 Client Error\" in str(e.value)\n</code></pre> <pre><code>\"str(e.value)='403 Client Error: Forbidden for url: https://random-name.s3.amazonaws.com/random-object'\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictiondetails","title":"Prediction.details","text":"<pre><code> Prediction.details ()\n</code></pre> <p>Return the details of a prediction.</p> <p>Returns: A pandas DataFrame encapsulating the details of the prediction.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Prediction.details\n\nwith generate_prediction() as prediction:\n    # getting the details\n    df = prediction.details()\n\n    display(df)\n    assert df.prediction_uuid[0] == prediction.uuid\n    assert df.shape == (1, len(Prediction.ALL_PRED_COLS) - 1), df.shape\n</code></pre>   |     | prediction_uuid                      | created             | model_uuid                           | datasource_uuid                      | region    | cloud_provider | error | ready | |-----|--------------------------------------|---------------------|--------------------------------------|--------------------------------------|-----------|----------------|-------|-------| | 0   | a4f72526-c7be-4067-9d01-373c47082062 | 2022-11-02T10:36:40 | b6b5a9c2-3dc9-4bf5-933e-5a7e02fa155d | 37a7513d-bc17-4b08-ad5e-906802728bc4 | eu-west-1 | aws            | None  | True  |   <pre><code># Tests for Prediction.details\n# Testing negative scenario. Passing invalid data ID\n\nwith pytest.raises(ValueError) as e:\n    pred = Prediction(uuid=RANDOM_UUID_FOR_TESTING)\n    pred.details()\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The prediction uuid is incorrect. Please try again.')\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictiondelete","title":"Prediction.delete","text":"<pre><code> Prediction.delete ()\n</code></pre> <p>Delete a prediction from the server.</p> <p>Returns: A pandas DataFrame encapsulating the details of the deleted prediction.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Prediction.delete\n\nwith generate_prediction() as prediction:\n    df = prediction.delete()\n\n    display(df)\n\n    assert df.shape == (1, 3), df.shape\n    assert df.prediction_uuid[0] == prediction.uuid\n\n    # Testing negative scenario. Deleting already deleted model\n    with pytest.raises(ValueError) as e:\n        prediction.delete()\n\n    display(f\"{e.value=}\")\n</code></pre>   |     | prediction_uuid                      | created             | ready | |-----|--------------------------------------|---------------------|-------| | 0   | a4f72526-c7be-4067-9d01-373c47082062 | 2022-11-02T10:36:40 | True  |   <pre><code>\"e.value=ValueError('The prediction has already been deleted.')\"\n</code></pre> <pre><code># Tests for Prediction.ls\n# Testing with disabled flag\n\nwith generate_prediction() as prediction:\n    uuid = prediction.uuid\n\n    # Passing disabled=False. Should show only the active predictions.\n    predx = Prediction.ls()\n    pred_uuid_list = [pred.uuid for pred in predx]\n\n    display(f\"{pred_uuid_list=}\")\n    assert uuid not in pred_uuid_list\n\n    # Passing disabled=True. Should show only the deleted predictions.\n    predx = Prediction.ls(disabled=True)\n    pred_uuid_list = [pred.uuid for pred in predx]\n\n    display(f\"{pred_uuid_list=}\")\n    assert uuid in pred_uuid_list\n</code></pre> <pre><code>\"pred_uuid_list=['883bac83-1376-4139-8f2b-1a5d60b59043', '2713fc2c-8a46-4e46-8e4b-3f8c44ad1a3a', 'f3ae698e-3a2a-4dc6-8eb8-cf358f8851a9', 'cad071a7-6e6e-40fe-97db-1f3107665e4b', '07507373-c927-437d-9024-41cb928404a2', '4f017211-0b39-4666-b184-73f5b570a18a', 'cbc2a3a6-75ca-478b-8871-85fcc677c47b', '272f3840-d43a-412c-b7e9-6583e57e4ce8', 'eb3ebcec-0b24-49fe-b62d-2f7a85025d0f', '2187b579-9889-481b-b0aa-b682e79f7bad', 'f32900e3-fb83-4ccf-96ed-aac2d9b48b25']\"\n\n\"pred_uuid_list=['7243b10c-c655-4833-983c-e0818a80f235', 'c1a7b2a0-6e8b-4663-9d52-a784bd4dd50e', 'ca9eac04-9a44-4568-8316-ac04f24cabe4', 'ee6714f5-e6c6-45a6-94eb-9dac2d1a8264', 'c66f06ef-c88f-4dcc-a80d-741fe528c503', '497a1c21-ca14-414a-beb6-b1ab0e7b8749', 'a4f72526-c7be-4067-9d01-373c47082062']\"\n</code></pre> <pre><code># Tests for Prediction ls\n\nwith generate_prediction(force_create=True) as prediction:\n    # Testing list without offset and limit\n    predx = Prediction.ls()\n\n    display(f\"{len(predx)=}\")\n    assert len(predx) &gt; 0\n\n    # Testing list with offset and limit\n    offset = 1\n    limit = 3\n\n    predx = Prediction.ls(offset=offset, limit=limit)\n\n    display(f\"{len(predx)=}\")\n    assert 0 &lt;= len(predx) &lt;= limit\n\n    # Testing list with invalid offset and limit\n    offset = 1_000_000_000\n    limit = 3\n\n    predx = Prediction.ls(offset=offset, limit=limit)\n\n    display(f\"{len(predx)=}\")\n    assert predx == []\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.34s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 118.23it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.38s/it]\n\n\"db.uuid='09276f4e-fa31-449d-955a-8a4105635620'\"\n\n\"ds.uuid='ae398ccb-eaba-4570-8fc1-9c65dd7f3929'\"\n\n'len(predx)=12'\n\n'len(predx)=3'\n\n'len(predx)=0'\n</code></pre> <pre><code># Tests for Prediction.as_df:\n\npredx = Prediction.ls()\n\ndf = Prediction.as_df(predx)\n\nassert df.shape == (len(predx), len(Prediction.BASIC_PRED_COLS) - 1)\n\ndf\n</code></pre>   |     | prediction_uuid                      | created             | ready | |-----|--------------------------------------|---------------------|-------| | 0   | 883bac83-1376-4139-8f2b-1a5d60b59043 | 2022-11-02T08:49:52 | True  | | 1   | 2713fc2c-8a46-4e46-8e4b-3f8c44ad1a3a | 2022-11-02T08:50:55 | True  | | 2   | f3ae698e-3a2a-4dc6-8eb8-cf358f8851a9 | 2022-11-02T08:50:56 | True  | | 3   | cad071a7-6e6e-40fe-97db-1f3107665e4b | 2022-11-02T08:51:07 | True  | | 4   | 07507373-c927-437d-9024-41cb928404a2 | 2022-11-02T08:52:32 | True  | | 5   | 4f017211-0b39-4666-b184-73f5b570a18a | 2022-11-02T08:52:57 | True  | | 6   | cbc2a3a6-75ca-478b-8871-85fcc677c47b | 2022-11-02T08:53:03 | True  | | 7   | 272f3840-d43a-412c-b7e9-6583e57e4ce8 | 2022-11-02T08:53:32 | True  | | 8   | eb3ebcec-0b24-49fe-b62d-2f7a85025d0f | 2022-11-02T08:54:23 | True  | | 9   | 2187b579-9889-481b-b0aa-b682e79f7bad | 2022-11-02T08:54:47 | True  | | 10  | f32900e3-fb83-4ccf-96ed-aac2d9b48b25 | 2022-11-02T10:00:03 | True  | | 11  | 6ff64784-a5ab-4433-8cee-028905eb2e77 | 2022-11-02T10:37:58 | True  |   <pre><code># Tests for Prediction.as_df:\n# Passing empty predx list\n\npredx = []\n\ndf = Prediction.as_df(predx)\n\nassert df.shape == (len(predx), len(Prediction.BASIC_PRED_COLS) - 1)\n\ndf\n</code></pre>   |     | prediction_uuid | created | ready | |-----|-----------------|---------|-------|   <p>source</p>"},{"location":"API_Prediction/#predictionto_pandas","title":"Prediction.to_pandas","text":"<pre><code> Prediction.to_pandas ()\n</code></pre> <p>Return the prediction results as a pandas DataFrame</p> <p>Returns: A pandas DataFrame encapsulating the results of the prediction.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for prediction.to_pandas:\n# Checking positive scenario. Passing all the required variables\n\nwith generate_prediction() as prediction:\n    display(prediction.to_pandas())\n    assert prediction.to_pandas().shape == (10, 1)\n</code></pre>   |           | Score    | |-----------|----------| | user_id   |          | | 520088904 | 0.979853 | | 530496790 | 0.979157 | | 561587266 | 0.979055 | | 518085591 | 0.978915 | | 558856683 | 0.977960 | | 520772685 | 0.004043 | | 514028527 | 0.003890 | | 518574284 | 0.001346 | | 532364121 | 0.001341 | | 532647354 | 0.001139 |   <p>source</p>"},{"location":"API_Prediction/#predictionto_s3","title":"Prediction.to_s3","text":"<pre><code> Prediction.to_s3 (uri:str, access_key:Optional[str]=None,\n                   secret_key:Optional[str]=None)\n</code></pre> <p>Push the prediction results to the target AWS S3 bucket.</p> <p>Args: uri: Target S3 bucket uri. access_key: Access key for the target S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable is used. secret_key: Secret key for the target S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable is used.</p> <p>Returns: An instance of <code>ProgressStatus</code> class.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for Prediction.to_s3\n# Testing positive scenario\n\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_s3(\n        uri=PREDICTION_TO_S3_URL,\n        access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n        secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n    )\n\n    status.progress_bar()\n\n    assert status.is_ready()\n    display(f\"{status.is_ready()=}\")\n\n\n# Check in s3 if the uploaded files are present\ntime.sleep(10)\nresponse = s3_client.list_objects(Bucket=DEV_BUCKET_NAME, Prefix=TEST_OBJECT_NAME)\nactual_s3_contents = [content.get(\"Key\") for content in response.get(\"Contents\", [])]\nexpected_s3_contents = [\n    f\"{TEST_OBJECT_NAME}/\",\n    f\"{TEST_OBJECT_NAME}/part.0.parquet\",\n]\n\nassert len(actual_s3_contents) == 2, len(actual_s3_contents)\nassert actual_s3_contents == expected_s3_contents, actual_s3_contents\ndisplay(f\"{actual_s3_contents=}\")\n\n# Finally, delete the object in s3\nfor k in actual_s3_contents:\n    s3_client.delete_object(Bucket=DEV_BUCKET_NAME, Key=k)\n\nresponse = s3_client.list_objects(Bucket=DEV_BUCKET_NAME, Prefix=TEST_OBJECT_NAME)\ns3_contents = [content.get(\"Key\") for content in response.get(\"Contents\", [])]\n\nassert s3_contents == [], s3_contents\ndisplay(f\"{s3_contents=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\n\n'status.is_ready()=True'\n\n\"actual_s3_contents=['06a385d1-66a1-4ffc-8306-7f5821902fcc/test_API_prediction_to_s3/', '06a385d1-66a1-4ffc-8306-7f5821902fcc/test_API_prediction_to_s3/part.0.parquet']\"\n\n's3_contents=[]'\n</code></pre> <pre><code># Tests for Prediction.to_s3\n# Testing negative scenario\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_s3(\n        uri=\"s3://random-bucket-name/random-object-name\",\n        access_key=\"fake_access_key\",\n        secret_key=\"fake_secret_key\",\n    )\n\n    with pytest.raises(ValueError) as e:\n        status.progress_bar()\n\n    display(f\"{str(e.value)=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n\"str(e.value)='An error occurred (InvalidAccessKeyId) when calling the ListObjects operation: The AWS Access Key Id you provided does not exist in our records.'\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictionto_azure_blob_storage","title":"Prediction.to_azure_blob_storage","text":"<pre><code> Prediction.to_azure_blob_storage (uri:str, credential:str)\n</code></pre> <p>Push the prediction results to the target Azure Blob Storage.</p> <p>Args: uri: Target Azure Blob Storage uri. credential: Credential to access the Azure Blob Storage.</p> <p>Returns: An instance of <code>ProgressStatus</code> class.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for prediction.to_azure_blob_storage\n# Positive scenario: Passing the credential in the parameter\n\nstorage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nkeys = storage_client.storage_accounts.list_keys(\"test-airt-service\", \"testairtservice\")\ncredential = keys.keys[0].value\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_azure_blob_storage(\n        uri=TEST_AZURE_PUSH_URI,\n        credential=credential,\n    )\n\n    status.progress_bar()\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.10s/it]\n</code></pre> <pre><code># Tests for prediction.to_azure_blob_storage\n# Testing negative scenario\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_azure_blob_storage(\n        uri=\"https://invalid-blob-storage-path\",\n        credential=credential,\n    )\n\n    with pytest.raises(ValueError) as e:\n        status.progress_bar()\n\n    display(f\"{str(e.value)=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n\"str(e.value)='Unable to determine account name for shared key credential.'\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictionto_local","title":"Prediction.to_local","text":"<pre><code> Prediction.to_local (path:Union[str,pathlib.Path],\n                      show_progress:Optional[bool]=True)\n</code></pre> <p>Download the prediction results to a local directory.</p> <p>Args: path: Local directory path. show_progress: Flag to set the progressbar visibility. If not passed, then the default value True will be used.</p> <p>Raises: FileNotFoundError: If the path is invalid. HTTPError: If the presigned AWS s3 uri to download the prediction results are invalid or not reachable.</p> <pre><code># Tests for Prediction.to_local\n# Testing positive scenario\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    with tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n        assert os.listdir(d) == []\n        display(list(os.listdir(d)))\n\n        r = prediction.to_local(path=d)\n        time.sleep(10)\n\n        downloaded_files = sorted(list(os.listdir(d)))\n        assert downloaded_files == [\"part.0.parquet\"], downloaded_files\n        display(f\"{downloaded_files=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n[]\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.45it/s]\n\n\"downloaded_files=['part.0.parquet']\"\n</code></pre> <pre><code># Tests for Prediction.to_local\n# Testing negative scenario\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    d = Path(\"my-fake-path\")\n    with pytest.raises(FileNotFoundError) as e:\n        prediction.to_local(path=d)\n\n    display(f\"{e.value=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n  0%|          | 0/1 [00:00&lt;?, ?it/s]\n\n\"e.value=FileNotFoundError(2, 'No such file or directory')\"\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictionto_mysql","title":"Prediction.to_mysql","text":"<pre><code> Prediction.to_mysql (host:str, database:str, table:str, port:int=3306,\n                      username:Optional[str]=None,\n                      password:Optional[str]=None)\n</code></pre> <p>Push the prediction results to a mysql database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the AIRT_CLIENT_DB_USERNAME and AIRT_CLIENT_DB_PASSWORD environment variables.</p> <p>Args: host: Database host name. database: Database name. table: Table name. port: Host port number. If not passed, then the default value 3306 will be used. username: Database username. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_USERNAME will be used else the default value \u201croot\u201d will be used. password: Database password. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_PASSWORD will be used else the default value \u201c\u201d will be used.</p> <p>Returns: An instance of <code>ProgressStatus</code> class.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for prediction.to_mysql\n# Testing positive scenario\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_mysql(\n        host=os.environ[\"DB_HOST\"],\n        database=os.environ[\"DB_DATABASE\"],\n        table=\"prediction_to_mysql\",\n        username=os.environ[\"DB_USERNAME\"],\n        password=os.environ[\"DB_PASSWORD\"],\n    )\n\n    status.progress_bar()\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n\n  0%|          | 0/1 [00:00&lt;?, ?it/s]\n  0%|          | 0/1 [00:05&lt;?, ?it/s]\n  0%|          | 0/1 [00:10&lt;?, ?it/s]\n  0%|          | 0/1 [00:15&lt;?, ?it/s]\n  0%|          | 0/1 [00:20&lt;?, ?it/s]\n  0%|          | 0/1 [00:25&lt;?, ?it/s]\n  0%|          | 0/1 [00:30&lt;?, ?it/s]\n  0%|          | 0/1 [00:35&lt;?, ?it/s]\n  0%|          | 0/1 [00:40&lt;?, ?it/s]\n  0%|          | 0/1 [00:45&lt;?, ?it/s]\n  0%|          | 0/1 [00:50&lt;?, ?it/s]\n  0%|          | 0/1 [00:55&lt;?, ?it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [01:00&lt;00:00, 60.67s/it]\n</code></pre> <pre><code># Tests for prediction.to_mysql\n# Testing negative scenario\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_mysql(\n        host=\"fake-host-name\", database=\"fake-database-name\", table=\"fake-table-name\"\n    )\n\n    with pytest.raises(ValueError) as e:\n        status.progress_bar()\n\n    display(f\"{str(e.value)=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n  0%|          | 0/1 [01:01&lt;?, ?it/s]\n  0%|          | 0/1 [00:10&lt;?, ?it/s]\n\n'str(e.value)=\\'(MySQLdb.OperationalError) (2005, \"Unknown MySQL server host \\\\\\'fake-host-name\\\\\\' (-3)\")\\\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\''\n</code></pre> <p>source</p>"},{"location":"API_Prediction/#predictionto_clickhouse","title":"Prediction.to_clickhouse","text":"<pre><code> Prediction.to_clickhouse (host:str, database:str, table:str,\n                           protocol:str, port:int=0,\n                           username:Optional[str]=None,\n                           password:Optional[str]=None)\n</code></pre> <p>Push the prediction results to a clickhouse database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Args: host: Remote database host name. database: Database name. table: Table name. protocol: Protocol to use (native/http). port: Host port number. If not passed, then the default value 0 will be used. username: Database username. If not passed, then the value set in the environment variable CLICKHOUSE_USERNAME will be used else the default value \u201croot\u201d will be used. password: Database password. If not passed, then the value set in the environment variable CLICKHOUSE_PASSWORD will be used else the default value \u201c\u201d will be used.</p> <p>Returns: An instance of <code>ProgressStatus</code> class.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable.</p> <pre><code># Tests for prediction.to_clickhouse\n# Testing negative scenario\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_clickhouse(\n        host=\"fake-host-name\",\n        database=\"fake-database-name\",\n        table=\"fake-table-name\",\n        protocol=\"native\",\n    )\n\n    with pytest.raises(ValueError) as e:\n        status.progress_bar()\n\n    display(f\"{str(e.value)=}\")\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n  0%|          | 0/1 [00:05&lt;?, ?it/s]\n\n\"str(e.value)='Orig exception: Code: 210. Temporary failure in name resolution (fake-host-name:9000)'\"\n</code></pre> <pre><code># Tests for prediction.to_clickhouse\n# Testing positive scenario\n\nwith generate_prediction() as prediction:\n    display(f\"{prediction.uuid=}\")\n\n    status = prediction.to_clickhouse(\n        host=os.environ.get(\"CLICKHOUSE_HOST\"),\n        database=os.environ.get(\"CLICKHOUSE_DATABASE\"),\n        table=\"test_clickhouse_push_prediction_airt_client\",\n        protocol=\"native\",\n    )\n\n    status.progress_bar()\n</code></pre> <pre><code>\"prediction.uuid='6ff64784-a5ab-4433-8cee-028905eb2e77'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.08s/it]\n</code></pre>"},{"location":"API_ProgressStatus/","title":"API_ProgressStatus","text":"<pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\n</code></pre> <p>source</p>"},{"location":"API_ProgressStatus/#progressstatus","title":"ProgressStatus","text":"<pre><code> ProgressStatus (relative_url:str, sleep_for:Union[int,float]=5,\n                 timeout:int=0)\n</code></pre> <p>A base class for querying status of a remote operation.</p> <p>Here\u2019s an example of using the ProgressStatus class to checking the upload status of the datablob</p> <p>Example: ```python # Importing necessary libraries from airt.client import Client, DataBlob</p> <pre><code># Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Check the ready status of the datablob\nprint(db.is_ready())\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Check the ready status of the datablob\n# If the upload is successful, True will be returned\nprint(db.is_ready())\n```\n</code></pre> <p>``` python</p>"},{"location":"API_ProgressStatus/#run-example-for-progressstatus","title":"Run example for ProgressStatus","text":"<p>username = os.environ[SERVICE_USERNAME] password = os.environ[SERVICE_PASSWORD]</p> <p>run_examples_from_docstring(     ProgressStatus, username=username, password=password, uri=TEST_S3_URI ) <pre><code>&lt;pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     # If the upload is successful, True will be returned                                                        \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 False                                                                                                       \u2502 \u2502\n\u2502 \u2502 True                                                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&amp;lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&amp;lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&amp;lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&amp;lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&amp;lt;00:00, 15.18s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n&lt;/pre&gt;\n\n``` python\n# Run example for ProgressStatus.is_ready\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    ProgressStatus.is_ready, username=username, password=password, uri=TEST_S3_URI\n)\n</code></pre></p> <pre><code>&lt;module&gt;:3: No type or annotation for returned value 1\n&lt;module&gt;:4: No type or annotation for returned value 2\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     # If the upload is successful, True will be returned                                                        \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 False                                                                                                       \u2502 \u2502\n\u2502 \u2502 True                                                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.16s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for ProgressStatus.progress_bar\n\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    ProgressStatus.progress_bar, username=username, password=password, uri=TEST_S3_URI\n)\n</code></pre> <pre><code>Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n&lt;module&gt;:5: Failed to get 'exception: description' pair from ''\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the status in a progress bar                                                                      \u2502\n\u2502     db.progress_bar()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the ready status of the datablob                                                                    \u2502\n\u2502     # If the upload is successful, True will be returned                                                        \u2502\n\u2502     print(db.is_ready())                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 False                                                                                                       \u2502 \u2502\n\u2502 \u2502 True                                                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:00&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:05&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502   0%|          | 0/1 [00:10&lt;?, ?it/s]                                                                       \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.05s/it]                                                               \u2502 \u2502\n\u2502 \u2502 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Tests for ProgressStatus.progress_bar\n# Testing negative scenario. Passing the wrong data source id and checking for progress\nTEST_UUID_V4 = \"00000000-0000-0000-0000-000000000000\"\nwith pytest.raises(ValueError) as e:\n    status = ProgressStatus(relative_url=f\"/datablob/{TEST_UUID_V4}\")\n    status.progress_bar()\n\ndisplay(f\"{e.value=}\")\n</code></pre> <pre><code>\"e.value=ValueError('The datablob uuid is incorrect. Please try again.')\"\n</code></pre> <p>source</p>"},{"location":"API_ProgressStatus/#progressstatuswait","title":"ProgressStatus.wait","text":"<pre><code> ProgressStatus.wait ()\n</code></pre> <p>Blocks execution while waiting for the remote action to complete.</p> <p>Raises: ConnectionError: If the server address is invalid or not reachable. TimeoutError: in case of timeout.</p> <p>Here\u2019s an example of preventing further calls from being executed until the datablob upload is complete:</p> <p>Example: ```python # Importing necessary libraries from airt.client import Client, DataBlob</p> <pre><code># Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Further calls to the API will be blocked until the datablob upload is complete.\ndb.wait()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n```\n</code></pre> <p>``` python</p>"},{"location":"API_ProgressStatus/#run-example-for-progressstatuswait","title":"Run example for ProgressStatus.wait","text":"<p>username = os.environ[SERVICE_USERNAME] password = os.environ[SERVICE_PASSWORD]</p> <p>run_examples_from_docstring(     ProgressStatus.wait, username=username, password=password, uri=TEST_S3_URI ) ```</p> <pre><code>Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n&lt;module&gt;:5: Failed to get 'exception: description' pair from ''\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, DataBlob                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a datablob                                                                                         \u2502\n\u2502     # In this example, the datablob will be stored in an AWS S3 bucket. The region                              \u2502\n\u2502     # is set to eu-west-3, feel free to change the cloud provider and the region                                \u2502\n\u2502     # to suit your needs.                                                                                       \u2502\n\u2502     db = DataBlob.from_s3(                                                                                      \u2502\n\u2502         uri=\"{fill in uri}\",                                                                                    \u2502\n\u2502         cloud_provider=\"aws\",                                                                                   \u2502\n\u2502         region=\"eu-west-3\"                                                                                      \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Further calls to the API will be blocked until the datablob upload is complete.                           \u2502\n\u2502     db.wait()                                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Print the details of the newly created datablob                                                           \u2502\n\u2502     # If the upload is successful, the ready flag should be set to True                                         \u2502\n\u2502     print(db.details())                                                                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                           datablob_uuid datasource_uuids  ... disabled ready                                \u2502 \u2502\n\u2502 \u2502 0  7b135efb-19b2-4438-a8ac-9f9831a8839d           &lt;none&gt;  ...    False  True                                \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 13 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre>"},{"location":"API_User/","title":"API_User","text":"<p>Note:</p> <p>While writing doc strings, please use the below syntax for linking methods/classes. So that the methods/classes gets highlighted in the browser and clicking on it will take the user to the linked function</p> <pre><code>- To link a method from the class same file please use the `method_name` format.\n- To link a method from a different Class (can in a seperate file also) please use `Classname.method_name` format.\n</code></pre> <pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom random import randrange\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._constant import (\n    SERVICE_PASSWORD,\n    SERVICE_SUPER_USER,\n    SERVICE_TOKEN,\n    SERVICE_USERNAME,\n)\nfrom airt._docstring.helpers import run_examples_from_docstring\n</code></pre> <pre><code>display(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.INFO\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>20\n\n[INFO] __main__: This is an info\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>INVALID_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <p>source</p>"},{"location":"API_User/#user","title":"User","text":"<pre><code> User (uuid:str, username:Optional[str]=None,\n       first_name:Optional[str]=None, last_name:Optional[str]=None,\n       email:Optional[str]=None, subscription_type:Optional[str]=None,\n       super_user:Optional[bool]=None, disabled:Optional[str]=None,\n       created:Optional[str]=None, is_mfa_active:Optional[bool]=None,\n       phone_number:Optional[str]=None,\n       is_phone_number_verified:Optional[bool]=None)\n</code></pre> <p>A class for creating, managing, and updating users on the server.</p> <p>The User class has two types of methods:</p> <ul> <li>Methods for creating and managing users.</li> <li>Method for updating and adding additional security to user accounts.</li> </ul> <p>Methods such as <code>create</code>, <code>enable</code>, <code>disable</code>, and <code>ls</code> can be used to manage user accounts on the server, but access to them requires super user privileges.</p> <p>The remaining methods do not require super user privileges and are used to update/additionally secure user accounts.</p> <p>In addition to the regular authentication with credentials, the users can enable multi-factor authentication (MFA) and single sign-on (SSO) for their accounts.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ul> <li> <p>To begin, you need to enable MFA for your account by calling the   <code>enable_mfa</code> method, which will generate a QR code. You can then scan   the QR code with an authenticator app, such as Google Authenticator   and follow the on-device instructions to finish the setup in your   smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling <code>activate_mfa</code> and   passing the dynamically generated six-digit verification code from   your smartphone\u2019s authenticator app.</p> </li> </ul> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ul> <li> <p>Enable the SSO for a provider by calling the <code>enable_sso</code> method with   the SSO provider name and an email address. At the moment, we only   support \u201cgoogle\u201d and \u201cgithub\u201d as SSO providers. We intend to support   additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first   authenticate with the SSO provider. Call the get_token with the same   SSO provider you have enabled in the step above to generate an SSO   authorization URL. Please copy and paste it into your preferred   browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the   <code>Client.set_sso_token</code>   method to generate a new token and use it automatically in all future   interactions with the airt server.</p> </li> </ul> <p>Here\u2019s an example of using the User class\u2019s methods to display the logged-in user\u2019s uuid</p> <p>Example: ```python # Importing necessary libraries from airt.client import User, Client</p> <pre><code># Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the uuid of logged-in user\nuser_details = User.details()\nprint(user_details[\"uuid\"])\n```\n</code></pre> <p>``` python</p>"},{"location":"API_User/#run-example-for-user","title":"Run example for User","text":"<p>run_examples_from_docstring(     User,     username=os.environ[SERVICE_USERNAME],     password=os.environ[SERVICE_PASSWORD], ) <pre><code>&lt;pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the uuid of logged-in user                                                                        \u2502\n\u2502     user_details = User.details()                                                                               \u2502\n\u2502     print(user_details[\"uuid\"])                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 7363f72b-7ebb-425c-832f-99c42fb7a016                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n&lt;/pre&gt;\n\n``` python\n# Run example for User.create\n\nusername = os.environ[SERVICE_SUPER_USER]\npassword = os.environ[SERVICE_PASSWORD]\nusername_for_new_test_user = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\npassword_for_new_test_user = \"example_password\"\n\nrun_examples_from_docstring(\n    User.create,\n    super_user_username=username,\n    super_user_password=password,\n    username=username_for_new_test_user,\n    first_name=\"example_first_name\",\n    last_name=\"example_last_name\",\n    email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n    password=password_for_new_test_user,\n    super_user=\"False\",\n    subscription_type=\"test\",\n)\n</code></pre></p> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'username'\n&lt;module&gt;:6: No type or annotation for parameter 'first_name'\n&lt;module&gt;:7: No type or annotation for parameter 'last_name'\n&lt;module&gt;:8: No type or annotation for parameter 'email'\n&lt;module&gt;:9: No type or annotation for parameter 'password'\n&lt;module&gt;:10: No type or annotation for parameter 'subscription_type'\n&lt;module&gt;:12: No type or annotation for parameter 'super_user'\n&lt;module&gt;:14: No type or annotation for parameter 'phone_number'\n&lt;module&gt;:17: No type or annotation for parameter 'otp'\n&lt;module&gt;:21: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Details required to create a new user                                                                     \u2502\n\u2502     username = \"{fill in username}\"                                                                             \u2502\n\u2502     first_name = \"{fill in first_name}\"                                                                         \u2502\n\u2502     last_name = \"{fill in last_name}\"                                                                           \u2502\n\u2502     email = \"{fill in email}\"                                                                                   \u2502\n\u2502     password = \"{fill in password}\"                                                                             \u2502\n\u2502     super_user = \"{fill in super_user}\"                                                                         \u2502\n\u2502     subscription_type = \"{fill in subscription_type}\"                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Create a new user. To access this method, you must have super user privileges.                            \u2502\n\u2502     new_user = User.create(                                                                                     \u2502\n\u2502         username=username,                                                                                      \u2502\n\u2502         first_name=first_name,                                                                                  \u2502\n\u2502         last_name=last_name,                                                                                    \u2502\n\u2502         email=email,                                                                                            \u2502\n\u2502         password=password,                                                                                      \u2502\n\u2502         super_user=super_user,                                                                                  \u2502\n\u2502         subscription_type=subscription_type,                                                                    \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the newly created user                                                             \u2502\n\u2502     print(new_user)                                                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # An exception will be raised if you attempt to create a new user                                           \u2502\n\u2502     # with an already-used username or email address.                                                           \u2502\n\u2502     try:                                                                                                        \u2502\n\u2502         User.create(                                                                                            \u2502\n\u2502             username=username,                                                                                  \u2502\n\u2502             first_name=first_name,                                                                              \u2502\n\u2502             last_name=last_name,                                                                                \u2502\n\u2502             email=email,                                                                                        \u2502\n\u2502             password=password,                                                                                  \u2502\n\u2502             super_user=super_user,                                                                              \u2502\n\u2502             subscription_type=subscription_type,                                                                \u2502\n\u2502         )                                                                                                       \u2502\n\u2502         print(\"Should not print this, the above line should raise an exception\")                                \u2502\n\u2502         raise RuntimeException()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     except ValueError as e:                                                                                     \u2502\n\u2502         print(\"Expected to fail, everything is fine\")                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                    uuid  ... is_phone_number_verified                                       \u2502 \u2502\n\u2502 \u2502 0  bf2dc2ee-960f-4fff-bcca-ba4402fd67bf  ...                    False                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [1 rows x 12 columns]                                                                                       \u2502 \u2502\n\u2502 \u2502 Expected to fail, everything is fine                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.reset_password\n# The below example is expected to throw an exception because\n# the phone number is not registered for the test user.\n# This is to avoid sending SMS each time we run the tests\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.reset_password,\n        username=username_for_new_test_user,\n        new_password=password_for_new_test_user,\n        otp=\"123456\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:17: No type or annotation for parameter 'username'\n&lt;module&gt;:18: No type or annotation for parameter 'new_password'\n&lt;module&gt;:19: No type or annotation for parameter 'otp'\n&lt;module&gt;:23: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Details required to reset the password                                                                    \u2502\n\u2502     username = \"{fill in username}\"                                                                             \u2502\n\u2502     new_password = \"{fill in new_password}\"                                                                     \u2502\n\u2502     otp = \"{fill in otp}\" # OTP generated by the authenticator app                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Reset the password                                                                                        \u2502\n\u2502     User.reset_password(username=username, new_password=new_password, otp=otp)                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate using the new credentials                                                                    \u2502\n\u2502     Client.get_token(username=username, password=new_password, otp=otp)                                         \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check if get_token is successful                                                                          \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.send_sms_otp\n\n# The below example is expected to throw an exception because\n# the phone number is not registered for the test user\n# This is to avoid sending SMS each time we run the tests\n\n\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.send_sms_otp,\n        username=username_for_new_test_user,\n        new_password=username_for_new_test_user,\n        password=username_for_new_test_user,\n        otp=\"123456\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:13: No type or annotation for parameter 'username'\n&lt;module&gt;:14: No type or annotation for parameter 'message_template_name'\n&lt;module&gt;:18: No type or annotation for returned value 1\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Request OTP via SMS to the registered phone number                                                        \u2502\n\u2502     # Please do not change the message_template_name                                                            \u2502\n\u2502     username=\"{fill in username}\"                                                                               \u2502\n\u2502     User.send_sms_otp(username=username, message_template_name=\"reset_password\")                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # The above method will send the OTP via SMS to the registered phone number,                                \u2502\n\u2502     # which you must fill below along with your new password                                                    \u2502\n\u2502     new_password = \"{fill in new_password}\"                                                                     \u2502\n\u2502     otp = \"{fill in otp}\" # OTP received via SMS                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Reset the password                                                                                        \u2502\n\u2502     User.reset_password(username=username, new_password=new_password, otp=otp)                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate using the new credentials                                                                    \u2502\n\u2502     # MFA users must pass the otp generated by the authenticator app below                                      \u2502\n\u2502     Client.get_token(username=username, password=new_password)                                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check if get_token is successful                                                                          \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.disable_mfa\n# The below example is expected to throw an exception because\n# the default user is a NON-MFA activated user and when a NON-MFA user passes otp\n# to get the token they will get this error\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.disable_mfa,\n        username=username,\n        password=password,\n        otp=\"123456\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:20: No type or annotation for parameter 'user'\n&lt;module&gt;:22: No type or annotation for parameter 'otp'\n&lt;module&gt;:26: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Optional Step: Skip this step if you've already logged-in                                                 \u2502\n\u2502     # Authenticate. Pass the current OTP from the authenticator app below                                       \u2502\n\u2502     otp=\"{fill in otp}\"                                                                                         \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in username}\",                                                                          \u2502\n\u2502         password=\"{fill in password}\",                                                                          \u2502\n\u2502         otp=otp                                                                                                 \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Disable MFA for the user                                                                                  \u2502\n\u2502     User.disable_mfa(otp=otp)                                                                                   \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     # The is_mfa_active flag should be set to False, if the disable was successful                              \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.ls\n\nusername = os.environ[SERVICE_SUPER_USER]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    User.ls,\n    super_user_username=username,\n    super_user_password=password,\n)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'offset'\n&lt;module&gt;:6: No type or annotation for parameter 'limit'\n&lt;module&gt;:7: No type or annotation for parameter 'disabled'\n&lt;module&gt;:11: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of all active users                                                                   \u2502\n\u2502     # Set the disabled parameter to True to display the details of inactive users                               \u2502\n\u2502     ux = User.ls()                                                                                              \u2502\n\u2502     print(User.as_df(ux))                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                     uuid  ... is_phone_number_verified                                      \u2502 \u2502\n\u2502 \u2502 0   7363f72b-7ebb-425c-832f-99c42fb7a016  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 1   50f41000-10e1-42a4-96ca-8d693d4b9fa1  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 2   d882d2de-0a72-47df-9293-3a9f3563afea  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 3   b418ccca-6e15-494d-bd82-4ba86d4b90f8  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 4   c1c80aa6-d29c-43c1-8cd5-ac122ef20041  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 5   2ec752ef-1cd1-4659-9272-7b6bab5083cb  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 6   82435b53-fe09-4804-8c41-68850ecfb112  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 7   ef0e86a2-2641-4c40-b0f5-2ae1af4634fe  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 8   6a4cd131-9804-4d5a-8477-3a7124f353a6  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 9   f577a97f-1107-43b3-bbd5-0bd4c73cf1c0  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 10  dab20424-304f-4bcc-9e36-45b40364ae48  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 11  449bee19-9078-4414-b0a8-141784aaee72  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 12  e8229346-51b9-4a7b-aaaf-55946b470e0e  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 13  6dc3e46b-d6da-41e0-a239-fbbc2e93fc30  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 14  bf2dc2ee-960f-4fff-bcca-ba4402fd67bf  ...                    False                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [15 rows x 12 columns]                                                                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.as_df\n\nusername = os.environ[SERVICE_SUPER_USER]\npassword = os.environ[SERVICE_PASSWORD]\n\nrun_examples_from_docstring(\n    User.as_df,\n    super_user_username=username,\n    super_user_password=password,\n)\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'ux'\n&lt;module&gt;:6: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     # Only super users can get the list of available users                                                      \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of all active users                                                                   \u2502\n\u2502     # Set the disabled parameter to True to display the details of inactive users                               \u2502\n\u2502     ux = User.ls()                                                                                              \u2502\n\u2502     print(User.as_df(ux))                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                     uuid  ... is_phone_number_verified                                      \u2502 \u2502\n\u2502 \u2502 0   7363f72b-7ebb-425c-832f-99c42fb7a016  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 1   50f41000-10e1-42a4-96ca-8d693d4b9fa1  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 2   d882d2de-0a72-47df-9293-3a9f3563afea  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 3   b418ccca-6e15-494d-bd82-4ba86d4b90f8  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 4   c1c80aa6-d29c-43c1-8cd5-ac122ef20041  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 5   2ec752ef-1cd1-4659-9272-7b6bab5083cb  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 6   82435b53-fe09-4804-8c41-68850ecfb112  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 7   ef0e86a2-2641-4c40-b0f5-2ae1af4634fe  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 8   6a4cd131-9804-4d5a-8477-3a7124f353a6  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 9   f577a97f-1107-43b3-bbd5-0bd4c73cf1c0  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 10  dab20424-304f-4bcc-9e36-45b40364ae48  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 11  449bee19-9078-4414-b0a8-141784aaee72  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 12  e8229346-51b9-4a7b-aaaf-55946b470e0e  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 13  6dc3e46b-d6da-41e0-a239-fbbc2e93fc30  ...                    False                                      \u2502 \u2502\n\u2502 \u2502 14  bf2dc2ee-960f-4fff-bcca-ba4402fd67bf  ...                    False                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2502 [15 rows x 12 columns]                                                                                      \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.enable_mfa\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.enable_mfa,\n        username=username_for_new_test_user,\n        password=password_for_new_test_user,\n        otp=\"000000\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:8: No type or annotation for parameter 'otp'\n&lt;module&gt;:12: No type or annotation for returned value 1\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Enable MFA for the user                                                                                   \u2502\n\u2502     # The line below will generate a QR code. To finish the setup on your smartphone,                           \u2502\n\u2502     # scan the QR code with an authenticator app like Google Authenticator and                                  \u2502\n\u2502     # follow the on-device instructions                                                                         \u2502\n\u2502     User.enable_mfa()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # After you've completed the setup, enter the current OTP from the authenticator                            \u2502\n\u2502     # app to verify and enable MFA for your account                                                             \u2502\n\u2502     User.activate_mfa(otp=\"{fill in otp}\")                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     # The is_mfa_active flag should be set to True, if the setup is successful                                  \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 False                                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.activate_mfa\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.activate_mfa,\n        username=username_for_new_test_user,\n        password=password_for_new_test_user,\n        otp=\"000000\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:7: No type or annotation for parameter 'otp'\n&lt;module&gt;:10: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Enable MFA for the user                                                                                   \u2502\n\u2502     # The line below will generate a QR code. To finish the setup on your smartphone,                           \u2502\n\u2502     # scan the QR code with an authenticator app like Google Authenticator and                                  \u2502\n\u2502     # follow the on-device instructions                                                                         \u2502\n\u2502     User.enable_mfa()                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # After you've completed the setup, enter the current OTP from the authenticator                            \u2502\n\u2502     # app to verify and enable MFA for your account                                                             \u2502\n\u2502     User.activate_mfa(otp=\"{fill in otp}\")                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check the current MFA status                                                                              \u2502\n\u2502     # The is_mfa_active flag should be set to True, if the setup is successful                                  \u2502\n\u2502     print(User.details()[\"is_mfa_active\"])                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 False                                                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.enable_sso\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.enable_sso,\n        username=username_for_new_test_user,\n        password=password_for_new_test_user,\n        sso_email=\"sso_email@mail.com\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:3: No type or annotation for parameter 'sso_provider'\n&lt;module&gt;:5: No type or annotation for parameter 'sso_email'\n&lt;module&gt;:6: No type or annotation for parameter 'otp'\n&lt;module&gt;:10: No type or annotation for returned value 1\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Enable single sign-on (SSO) and use google as the provider                                                \u2502\n\u2502     sso_provider=\"google\"                                                                                       \u2502\n\u2502     sso_email=\"{fill in sso_email}\"                                                                             \u2502\n\u2502     User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate using Single sign-on (SSO)                                                                   \u2502\n\u2502     # To generate a token using SSO, you must first authenticate with the provider.                             \u2502\n\u2502     # The command below will generate an authorization URL for you.                                             \u2502\n\u2502     # Please copy and paste it into your preferred browser and complete the                                     \u2502\n\u2502     # SSO provider authentication within 10 minutes. Otherwise, the SSO login                                   \u2502\n\u2502     # will time out and you will need to call the get_token method again.                                       \u2502\n\u2502     sso_url = Client.get_token(sso_provider=sso_provider)                                                       \u2502\n\u2502     print(sso_url)                                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Once the provider authentication is successful, call the below method to                                  \u2502\n\u2502     # set the generated token                                                                                   \u2502\n\u2502     Client.set_sso_token()                                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If set_sso_token fails, the line below will throw an error.                                               \u2502\n\u2502     print(User.details())                                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.disable_sso\nwith pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(\n        User.disable_sso,\n        username=username_for_new_test_user,\n        password=password_for_new_test_user,\n        sso_provider=\"google\",\n        sso_email=\"sso_email@mail.com\",\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'sso_provider'\n&lt;module&gt;:8: No type or annotation for parameter 'user'\n&lt;module&gt;:10: No type or annotation for parameter 'otp'\n&lt;module&gt;:14: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Optional Step: For demonstration purpose, enable Single sign-on (SSO)                                     \u2502\n\u2502     # for the user                                                                                              \u2502\n\u2502     sso_provider=\"{fill in sso_provider}\"                                                                       \u2502\n\u2502     sso_email=\"{fill in sso_email}\"                                                                             \u2502\n\u2502     User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)                                             \u2502\n\u2502     sso_url = Client.get_token(sso_provider=sso_provider) # Authenticate using SSO                              \u2502\n\u2502     print(sso_url)                                                                                              \u2502\n\u2502     Client.set_sso_token() # Set SSO token                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Disable the Single sign-on (SSO) for the provider                                                         \u2502\n\u2502     print(User.disable_sso(sso_provider=sso_provider))                                                          \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If you try to disable an already disabled SSO provider, an exception                                      \u2502\n\u2502     # will be raised                                                                                            \u2502\n\u2502     try:                                                                                                        \u2502\n\u2502         User.disable_sso(sso_provider=sso_provider)                                                             \u2502\n\u2502         print(\"Should not print this, the above line should raise an exception\")                                \u2502\n\u2502         raise RuntimeException()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     except ValueError as e:                                                                                     \u2502\n\u2502         print(\"Expected to fail, everything is fine\")                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.update\n\nrun_examples_from_docstring(\n    User.update,\n    username=username_for_new_test_user,\n    password=password_for_new_test_user,\n    new_email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n)\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'user'\n&lt;module&gt;:8: No type or annotation for parameter 'username'\n&lt;module&gt;:9: No type or annotation for parameter 'first_name'\n&lt;module&gt;:10: No type or annotation for parameter 'last_name'\n&lt;module&gt;:11: No type or annotation for parameter 'email'\n&lt;module&gt;:12: No type or annotation for parameter 'otp'\n&lt;module&gt;:16: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the registered email address of the logged-in user                                                \u2502\n\u2502     print(User.details()[\"email\"])                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Update the logged-in user's email address                                                                 \u2502\n\u2502     # If you are a super user, you can update the details of other users by                                     \u2502\n\u2502     # passing their uuid/username in the user parameter                                                         \u2502\n\u2502     email = \"{fill in new_email}\"                                                                               \u2502\n\u2502     User.update(email=email)                                                                                    \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check whether the email address has been updated for the logged-in user                                   \u2502\n\u2502     print(User.details()[\"email\"])                                                                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If you try to use an already used email address, an exception will be raised.                             \u2502\n\u2502     try:                                                                                                        \u2502\n\u2502         User.update(email=email)                                                                                \u2502\n\u2502         print(\"Should not print this, the above line should raise an exception\")                                \u2502\n\u2502         raise RuntimeException()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     except ValueError as e:                                                                                     \u2502\n\u2502         print(\"Expected to fail, everything is fine\")                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 random_user_4408_9299@email.com                                                                             \u2502 \u2502\n\u2502 \u2502 random_user_6228_1855@email.com                                                                             \u2502 \u2502\n\u2502 \u2502 Expected to fail, everything is fine                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.details\n\nrun_examples_from_docstring(\n    User.details,\n    username=username_for_new_test_user,\n    password=password_for_new_test_user,\n)\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'user'\n&lt;module&gt;:10: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import User, Client                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the uuid of logged-in user                                                                        \u2502\n\u2502     # If you are a super user, you can view the details of other users by                                       \u2502\n\u2502     # passing their uuid/username in the user parameter.                                                        \u2502\n\u2502     user_details = User.details()                                                                               \u2502\n\u2502     print(user_details[\"uuid\"])                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # If a Non-super user tries to access other user's detail,                                                  \u2502\n\u2502     # an exception will be thrown.                                                                              \u2502\n\u2502     try:                                                                                                        \u2502\n\u2502         User.details(user=\"some_other_username\")                                                                \u2502\n\u2502         print(\"Should not print this, the above line should raise an exception\")                                \u2502\n\u2502         raise RuntimeException()                                                                                \u2502\n\u2502                                                                                                                 \u2502\n\u2502     except ValueError as e:                                                                                     \u2502\n\u2502         print(\"Expected to fail, everything is fine\")                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 bf2dc2ee-960f-4fff-bcca-ba4402fd67bf                                                                        \u2502 \u2502\n\u2502 \u2502 Expected to fail, everything is fine                                                                        \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.register_phone_number\n# The below example will throw Incorrect username or password, thats expected because\n# if we send valid username and password, the sms will be sent to the passed phone number.\n# We don't want to send the SMS each time we run the tests\nwith pytest.raises(RuntimeError) as e:\n    invalid_phone_number = \"910000000000\"\n    invalid_otp = \"000000\"\n    run_examples_from_docstring(\n        User.register_phone_number,\n        username=\"invalid_username\",\n        password=\"invalid_username\",\n        phone_number=invalid_phone_number,\n        otp=invalid_otp,\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:8: No type or annotation for parameter 'phone_number'\n&lt;module&gt;:13: No type or annotation for parameter 'otp'\n&lt;module&gt;:17: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the phone number that is currently registered                                                     \u2502\n\u2502     # If no phone number has been registered, None will be displayed                                            \u2502\n\u2502     print(User.details()[\"phone_number\"])                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Register a new phone number.                                                                              \u2502\n\u2502     # If you only want to validate an existing phone number, call the                                           \u2502\n\u2502     # method below without the phone_number parameter                                                           \u2502\n\u2502     User.register_phone_number(phone_number=\"{fill in phone_number}\")                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # The above method will send the OTP via SMS to the specified phone number,                                 \u2502\n\u2502     # which you must enter below to complete the registration process                                           \u2502\n\u2502     User.validate_phone_number(otp=\"{fill in otp}\")                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check whether the phone number has been updated and verified                                              \u2502\n\u2502     # The is_phone_number_verified flag should be set to True, if the                                           \u2502\n\u2502     # registration is successful                                                                                \u2502\n\u2502     user_details = User.details()                                                                               \u2502\n\u2502     print(user_details[\"phone_number\"])                                                                         \u2502\n\u2502     print(user_details[\"is_phone_number_verified\"])                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.validate_phone_number\n# The below example will throw Incorrect username or password, thats expected because\n# if we send valid username and password, the OTP will be verified with the messaging service\n# We don't want to send an external call each time we run the tests\nwith pytest.raises(RuntimeError) as e:\n    invalid_phone_number = \"910000000000\"\n    invalid_otp = \"000000\"\n    run_examples_from_docstring(\n        User.validate_phone_number,\n        username=\"invalid_username\",\n        password=\"invalid_username\",\n        phone_number=invalid_phone_number,\n        otp=invalid_otp,\n        supress_stderr=True,\n    )\n</code></pre> <pre><code>&lt;module&gt;:6: No type or annotation for parameter 'otp'\n&lt;module&gt;:9: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate                                                                                              \u2502\n\u2502     Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")                              \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the phone number that is currently registered                                                     \u2502\n\u2502     # If no phone number has been registered, None will be displayed                                            \u2502\n\u2502     print(User.details()[\"phone_number\"])                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Register a new phone number.                                                                              \u2502\n\u2502     # If you only want to validate an existing phone number, call the                                           \u2502\n\u2502     # method below without the phone_number parameter                                                           \u2502\n\u2502     User.register_phone_number(phone_number=\"{fill in phone_number}\")                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # The above method will send the OTP via SMS to the specified phone number,                                 \u2502\n\u2502     # which you must enter below to complete the registration process                                           \u2502\n\u2502     User.validate_phone_number(otp=\"{fill in otp}\")                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check whether the phone number has been updated and verified                                              \u2502\n\u2502     # The is_phone_number_verified flag should be set to True, if the                                           \u2502\n\u2502     # registration is successful                                                                                \u2502\n\u2502     user_details = User.details()                                                                               \u2502\n\u2502     print(user_details[\"phone_number\"])                                                                         \u2502\n\u2502     print(user_details[\"is_phone_number_verified\"])                                                             \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.disable\n\nusername = os.environ[SERVICE_SUPER_USER]\npassword = os.environ[SERVICE_PASSWORD]\nusername_for_new_test_user = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\npassword_for_new_test_user = \"example_password\"\n\nrun_examples_from_docstring(\n    User.disable,\n    super_user_username=username,\n    super_user_password=password,\n    username=username_for_new_test_user,\n    first_name=\"example_first_name\",\n    last_name=\"example_last_name\",\n    email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n    password=password_for_new_test_user,\n    subscription_type=\"test\",\n)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'user'\n&lt;module&gt;:6: No type or annotation for parameter 'otp'\n&lt;module&gt;:10: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Optional Step: For demonstration purpose, create a new user                                               \u2502\n\u2502     username = \"{fill in username}\"                                                                             \u2502\n\u2502     User.create(                                                                                                \u2502\n\u2502         username=username,                                                                                      \u2502\n\u2502         first_name=\"{fill in first_name}\",                                                                      \u2502\n\u2502         last_name=\"{fill in last_name}\",                                                                        \u2502\n\u2502         email=\"{fill in email}\",                                                                                \u2502\n\u2502         password=\"{fill in password}\",                                                                          \u2502\n\u2502         subscription_type=\"{fill in subscription_type}\",                                                        \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the user you want to disable using their username/uuid                             \u2502\n\u2502     print(User.details(username))                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Disable the user                                                                                          \u2502\n\u2502     # To disable multiple users, pass a list of username/uuid                                                   \u2502\n\u2502     User.disable(user=username)                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check whether the user has been disabled                                                                  \u2502\n\u2502     # The disabled flag should be set to True, if the disable was sucessful                                     \u2502\n\u2502     print(User.details(username))                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 {'username': 'random_user_2967_8462', 'first_name': 'example_first_name', 'last_name': 'example_last_name', \u2502 \u2502\n\u2502 \u2502 'email': 'random_user_2251_5932@email.com', 'subscription_type': 'test', 'super_user': False,               \u2502 \u2502\n\u2502 \u2502 'phone_number': None, 'uuid': '9b3fa44c-b8e0-40b6-91ad-01b06e35ed6e', 'disabled': False, 'created':         \u2502 \u2502\n\u2502 \u2502 '2022-10-27T08:41:50', 'is_phone_number_verified': False, 'is_mfa_active': False}                           \u2502 \u2502\n\u2502 \u2502 {'username': 'random_user_2967_8462', 'first_name': 'example_first_name', 'last_name': 'example_last_name', \u2502 \u2502\n\u2502 \u2502 'email': 'random_user_2251_5932@email.com', 'subscription_type': 'test', 'super_user': False,               \u2502 \u2502\n\u2502 \u2502 'phone_number': None, 'uuid': '9b3fa44c-b8e0-40b6-91ad-01b06e35ed6e', 'disabled': True, 'created':          \u2502 \u2502\n\u2502 \u2502 '2022-10-27T08:41:50', 'is_phone_number_verified': False, 'is_mfa_active': False}                           \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># Run example for User.enable\n\nusername = os.environ[SERVICE_SUPER_USER]\npassword = os.environ[SERVICE_PASSWORD]\nusername_for_new_test_user = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\npassword_for_new_test_user = \"example_password\"\n\nrun_examples_from_docstring(\n    User.enable,\n    super_user_username=username,\n    super_user_password=password,\n    username=username_for_new_test_user,\n    first_name=\"example_first_name\",\n    last_name=\"example_last_name\",\n    email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n    password=password_for_new_test_user,\n    subscription_type=\"test\",\n)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'user'\n&lt;module&gt;:6: No type or annotation for parameter 'otp'\n&lt;module&gt;:10: No type or annotation for returned value 1\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Importing necessary libraries                                                                             \u2502\n\u2502     from  airt.client import Client, User                                                                       \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Authenticate with super user privileges                                                                   \u2502\n\u2502     Client.get_token(                                                                                           \u2502\n\u2502         username=\"{fill in super_user_username}\",                                                               \u2502\n\u2502         password=\"{fill in super_user_password}\"                                                                \u2502\n\u2502     )                                                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Optional Step: For demonstration purpose, create a new user and disable them                              \u2502\n\u2502     username = \"{fill in username}\"                                                                             \u2502\n\u2502     User.create(                                                                                                \u2502\n\u2502         username=username,                                                                                      \u2502\n\u2502         first_name=\"{fill in first_name}\",                                                                      \u2502\n\u2502         last_name=\"{fill in last_name}\",                                                                        \u2502\n\u2502         email=\"{fill in email}\",                                                                                \u2502\n\u2502         password=\"{fill in password}\",                                                                          \u2502\n\u2502         subscription_type=\"{fill in subscription_type}\",                                                        \u2502\n\u2502     )                                                                                                           \u2502\n\u2502     User.disable(user=username)                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Display the details of the user you want to enable using their username/uuid                              \u2502\n\u2502     print(User.details(username))                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Enable the user                                                                                           \u2502\n\u2502     # To enable multiple users, pass a list of username/uuid                                                    \u2502\n\u2502     User.enable(user=username)                                                                                  \u2502\n\u2502                                                                                                                 \u2502\n\u2502     # Check whether the user has been enabled                                                                   \u2502\n\u2502     # The disabled flag should be set to False, if the enable was sucessful                                     \u2502\n\u2502     print(User.details(username))                                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 {'username': 'random_user_5515_970', 'first_name': 'example_first_name', 'last_name': 'example_last_name',  \u2502 \u2502\n\u2502 \u2502 'email': 'random_user_6419_7162@email.com', 'subscription_type': 'test', 'super_user': False,               \u2502 \u2502\n\u2502 \u2502 'phone_number': None, 'uuid': '781ffa49-c7f8-4ed6-9968-37600660e393', 'disabled': True, 'created':          \u2502 \u2502\n\u2502 \u2502 '2022-10-27T08:41:52', 'is_phone_number_verified': False, 'is_mfa_active': False}                           \u2502 \u2502\n\u2502 \u2502 {'username': 'random_user_5515_970', 'first_name': 'example_first_name', 'last_name': 'example_last_name',  \u2502 \u2502\n\u2502 \u2502 'email': 'random_user_6419_7162@email.com', 'subscription_type': 'test', 'super_user': False,               \u2502 \u2502\n\u2502 \u2502 'phone_number': None, 'uuid': '781ffa49-c7f8-4ed6-9968-37600660e393', 'disabled': False, 'created':         \u2502 \u2502\n\u2502 \u2502 '2022-10-27T08:41:52', 'is_phone_number_verified': False, 'is_mfa_active': False}                           \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code># A helper context manager for logging as super user and accessing user routes.\n\n\n@contextmanager\ndef super_user():\n    # 1. Get token\n    username = os.environ[SERVICE_SUPER_USER]\n    password = os.environ[SERVICE_PASSWORD]\n\n    Client.get_token(username=username, password=password)\n\n    yield\n\n\nwith super_user():\n    server, auth_token = Client._get_server_url_and_token()\n\n    display(f\"{len(server)=}\")\n    display(f\"{len(auth_token)=}\")\n\n    assert len(server) &gt; 0\n    assert len(auth_token) &gt; 0\n</code></pre> <pre><code>'len(server)=24'\n\n'len(auth_token)=127'\n</code></pre> <pre><code># tests for reset_password\nusername = \"invalid_username\"\nnew_password = \"new_password\"\ninvalid_otp = \"123456\"\nwith pytest.raises(ValueError) as e:\n    User.reset_password(username, new_password, invalid_otp)\n\nassert \"Something went wrong\" in str(e.value), str(e.value)\ndisplay(str(e.value))\n</code></pre> <pre><code>'Something went wrong. The username or OTP you entered is incorrect. Please try again or contact your administrator.'\n</code></pre> <pre><code># tests for send_sms_otp\nusername = \"invalid_username\"\nmessage_template_name = \"message_template_name\"\nactual = User.send_sms_otp(username, message_template_name)\ndisplay(actual)\nassert \"If you have already registered and verified your phone number\" in actual\n</code></pre> <pre><code>'If you have already registered and verified your phone number, you will receive the OTP by SMS. If you did not receive the OTP, please contact your administrator.'\n</code></pre> <pre><code># Tests for User.details\n\n# Positive scenarios: Super user trying to access their user details\n\nwith super_user():\n    # Positive scenario: Super user trying to access their user details\n    actual = User.details()\n    assert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\n\n    actual = User.details(user=actual[\"username\"])\n    assert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\n\n    actual = User.details(user=actual[\"uuid\"])\n    assert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\n\n    # Positive scenario: Super user trying to access other user details\n    other_user = User.ls()[0]\n    actual = User.details(user=other_user.uuid)\n    assert actual[\"uuid\"] == other_user.uuid\n\n    # Negative scenario: Super user trying to access invalid user details\n    random_user_name = \"random_user_name\"\n    with pytest.raises(ValueError) as e:\n        User.details(user=random_user_name)\n    display(str(e.value))\n\n    with pytest.raises(ValueError) as e:\n        User.details(user=INVALID_UUID_FOR_TESTING)\n    display(str(e.value))\n</code></pre> <pre><code>'Incorrect username. Please try again.'\n\n'The user uuid is incorrect. Please try again.'\n</code></pre> <pre><code># Tests for User.details\n\n# Authenticating as normal user\nusername = os.environ[SERVICE_USERNAME]\npassword = os.environ[SERVICE_PASSWORD]\nClient.get_token(username=username, password=password)\n\n# Positive scenario: Normal user trying to access their user details\nactual = User.details()\nassert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\n\nactual = User.details(user=actual[\"username\"])\nassert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\n\nactual = User.details(user=actual[\"uuid\"])\nassert len(actual[\"uuid\"].replace(\"-\", \"\")) == 32\nactual[\"uuid\"]\n\n# Negative scenarios: Normal user trying to access other user details\nrandom_user_name = \"random_user_name\"\nwith pytest.raises(ValueError) as e:\n    User.details(user=random_user_name)\nassert str(e.value) == \"Insufficient permission to access other user's data\"\ndisplay(str(e.value))\n\n\nwith pytest.raises(ValueError) as e:\n    User.details(user=INVALID_UUID_FOR_TESTING)\nassert str(e.value) == \"Insufficient permission to access other user's data\"\ndisplay(str(e.value))\n</code></pre> <pre><code>\"Insufficient permission to access other user's data\"\n\n\"Insufficient permission to access other user's data\"\n</code></pre> <pre><code># Testing negative scenario. Non-super user trying to create a new user\nwith pytest.raises(ValueError) as e:\n    User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"example_first_name\",\n        last_name=\"example_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"example_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\ndisplay(str(e.value))\n</code></pre> <pre><code>'You do not have sufficient permission to access this route. Please contact your administrator for help.'\n</code></pre> <pre><code># tests for User.create\n\n# Positive Scenario. Create a new user\n\nwith super_user():\n    for ph in [\"+44123456789\", \"0044123456789\", \"44123456789\"]:\n        _user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n        _email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n        response_df = User.create(\n            username=_user_name,\n            first_name=\"random_first_name\",\n            last_name=\"random_last_name\",\n            email=_email,\n            password=\"random_password\",\n            super_user=False,\n            phone_number=ph,\n            subscription_type=\"test\",\n        )\n\n        display(response_df[[\"uuid\", \"created\", \"phone_number\"]])\n        assert response_df[\"phone_number\"][0] == \"44123456789\"\n\n        assert response_df.shape == (1, len(User.USER_COLS))\n\n        # Trying to create new user with existing email and username\n\n        with pytest.raises(ValueError) as e:\n            User.create(\n                username=_user_name,\n                first_name=\"random_first_name\",\n                last_name=\"random_last_name\",\n                email=_email,\n                password=\"random_password\",\n                super_user=False,\n                subscription_type=\"test\",\n            )\n\n        display(str(e.value))\n</code></pre>   |     | uuid                                 | created             | phone_number | |-----|--------------------------------------|---------------------|--------------| | 0   | 9147b0a7-f8e4-46db-9935-7f90434c99ab | 2022-10-27T08:41:54 | 44123456789  |   <pre><code>'The requested username or email already exists. Try another.'\n</code></pre>   |     | uuid                                 | created             | phone_number | |-----|--------------------------------------|---------------------|--------------| | 0   | 74b06ad9-5eea-4276-8ba1-47d39464d6aa | 2022-10-27T08:41:54 | 44123456789  |   <pre><code>'The requested username or email already exists. Try another.'\n</code></pre>   |     | uuid                                 | created             | phone_number | |-----|--------------------------------------|---------------------|--------------| | 0   | dead5d28-db6f-435c-b2fa-79cc62f19ac9 | 2022-10-27T08:41:55 | 44123456789  |   <pre><code>'The requested username or email already exists. Try another.'\n</code></pre> <pre><code># tests for User.create\n\n# Negative Scenario. Passing wrong subscription_type\n\nwith super_user():\n    with pytest.raises(ValueError) as e:\n        User.create(\n            username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n            first_name=\"random_first_name\",\n            last_name=\"random_last_name\",\n            email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n            password=\"random_password\",\n            super_user=False,\n            subscription_type=\"fake-value\",\n        )\n\n    display(f\"{str(e.value)=}\")\n    assert \"value is not a valid enumeration member\" in str(e.value)\n\n    # Negative Scenario. Non-MFA user passing otp\n\n    random_otp = 123456\n\n    with pytest.raises(ValueError) as e:\n        User.create(\n            username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n            first_name=\"random_first_name\",\n            last_name=\"random_last_name\",\n            email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n            password=\"random_password\",\n            super_user=False,\n            subscription_type=\"small\",\n            otp=random_otp,\n        )\n\n    display(f\"{str(e.value)=}\")\n    assert \"MFA is not activated for the account\" in str(e.value)\n</code></pre> <pre><code>'str(e.value)=\\'[{\\\\\\'loc\\\\\\': [\\\\\\'body\\\\\\', \\\\\\'subscription_type\\\\\\'], \\\\\\'msg\\\\\\': \"value is not a valid enumeration member; permitted: \\\\\\'small\\\\\\', \\\\\\'medium\\\\\\', \\\\\\'large\\\\\\', \\\\\\'infobip\\\\\\', \\\\\\'captn\\\\\\', \\\\\\'test\\\\\\', \\\\\\'superuser\\\\\\'\", \\\\\\'type\\\\\\': \\\\\\'type_error.enum\\\\\\', \\\\\\'ctx\\\\\\': {\\\\\\'enum_values\\\\\\': [\\\\\\'small\\\\\\', \\\\\\'medium\\\\\\', \\\\\\'large\\\\\\', \\\\\\'infobip\\\\\\', \\\\\\'captn\\\\\\', \\\\\\'test\\\\\\', \\\\\\'superuser\\\\\\']}}]\\''\n\n\"str(e.value)='MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\"\n</code></pre> <pre><code># Tests for User ls\n\nwith super_user():\n    ux = User.ls()\n\n    display(f\"{len(ux)=}\")\n    assert len(ux) &gt; 0\n\n    # Testing list with offset and limit\n    offset = 1\n    limit = 3\n\n    ux = User.ls(offset=offset, limit=limit)\n\n    display(f\"{len(ux)=}\")\n    assert 0 &lt; len(ux) &lt;= limit\n\n    # Testing list with invalid offset and limit\n    offset = 1_000_000_000\n    limit = 3\n\n    ux = User.ls(offset=offset, limit=limit)\n\n    display(f\"{len(ux)=}\")\n    assert ux == []\n\n    # Testing with disabled flag\n\n    all_ux = User.ls()\n    disabled_ux = User.ls(disabled=True)\n\n    display(f\"{len(disabled_ux)=}\")\n    assert len(disabled_ux) &gt;= 0\n    assert len(all_ux) &gt; len(disabled_ux)\n</code></pre> <pre><code>'len(ux)=19'\n\n'len(ux)=3'\n\n'len(ux)=0'\n\n'len(disabled_ux)=1'\n</code></pre> <pre><code># Tests for User.as_df:\n\nux = User.ls()\n\ndf = User.as_df(ux)\n\nassert df.shape == (len(ux), len(User.USER_COLS))\n\ndf[[\"uuid\", \"created\"]]\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 7363f72b-7ebb-425c-832f-99c42fb7a016 | 2022-10-27T04:39:16 | | 1   | 50f41000-10e1-42a4-96ca-8d693d4b9fa1 | 2022-10-27T04:39:16 | | 2   | d882d2de-0a72-47df-9293-3a9f3563afea | 2022-10-27T04:39:16 | | 3   | b418ccca-6e15-494d-bd82-4ba86d4b90f8 | 2022-10-27T08:22:26 | | 4   | c1c80aa6-d29c-43c1-8cd5-ac122ef20041 | 2022-10-27T08:22:27 | | 5   | 2ec752ef-1cd1-4659-9272-7b6bab5083cb | 2022-10-27T08:22:28 | | 6   | 82435b53-fe09-4804-8c41-68850ecfb112 | 2022-10-27T08:22:29 | | 7   | ef0e86a2-2641-4c40-b0f5-2ae1af4634fe | 2022-10-27T08:22:30 | | 8   | 6a4cd131-9804-4d5a-8477-3a7124f353a6 | 2022-10-27T08:22:31 | | 9   | f577a97f-1107-43b3-bbd5-0bd4c73cf1c0 | 2022-10-27T08:22:32 | | 10  | dab20424-304f-4bcc-9e36-45b40364ae48 | 2022-10-27T08:28:24 | | 11  | 449bee19-9078-4414-b0a8-141784aaee72 | 2022-10-27T08:30:37 | | 12  | e8229346-51b9-4a7b-aaaf-55946b470e0e | 2022-10-27T08:30:44 | | 13  | 6dc3e46b-d6da-41e0-a239-fbbc2e93fc30 | 2022-10-27T08:40:18 | | 14  | bf2dc2ee-960f-4fff-bcca-ba4402fd67bf | 2022-10-27T08:41:39 | | 15  | 781ffa49-c7f8-4ed6-9968-37600660e393 | 2022-10-27T08:41:52 | | 16  | 9147b0a7-f8e4-46db-9935-7f90434c99ab | 2022-10-27T08:41:54 | | 17  | 74b06ad9-5eea-4276-8ba1-47d39464d6aa | 2022-10-27T08:41:54 | | 18  | dead5d28-db6f-435c-b2fa-79cc62f19ac9 | 2022-10-27T08:41:55 |   <pre><code># Tests for User.as_df:\n# Passing empty ux list\n\nux = []\n\ndf = User.as_df(ux)\n\nassert df.shape == (len(ux), len(User.USER_COLS))\n\ndf[[\"uuid\", \"created\"]]\n</code></pre>   |     | uuid | created | |-----|------|---------|   <pre><code># tests for user.disable\n\nwith super_user():\n    # create a new user\n\n    response_df = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    display(response_df[[\"uuid\", \"created\"]])\n    assert not response_df[\"disabled\"][0]\n\n    # Disable the newly created user\n\n    disable_response = User.disable(response_df[\"username\"][0])\n\n    display(disable_response[[\"uuid\", \"created\"]])\n    assert disable_response[\"disabled\"][0]\n\n    # Disable already disabled user\n\n    with pytest.raises(ValueError) as e:\n        User.disable(response_df[\"uuid\"][0])\n\n    display(str(e.value))\n\n    # Negative Scenario. Non-MFA user passing otp\n\n    with pytest.raises(ValueError) as e:\n        random_otp = 123456\n        User.disable(response_df[\"uuid\"][0], otp=random_otp)\n\n    display(str(e.value))\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | e2e3cf00-2368-406c-9dad-d16159e1c562 | 2022-10-27T08:41:56 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | e2e3cf00-2368-406c-9dad-d16159e1c562 | 2022-10-27T08:41:56 |   <pre><code>'The user has already been disabled.'\n\n'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code>with super_user():\n    # create a new user\n\n    user_1 = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    display(user_1[[\"uuid\", \"created\"]])\n    assert not user_1[\"disabled\"][0]\n\n    # create a new user\n\n    user_2 = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    display(user_2[[\"uuid\", \"created\"]])\n    assert not user_2[\"disabled\"][0]\n\n    # Disable the newly created user\n\n    disable_response = User.disable([user_1[\"username\"][0], user_2[\"uuid\"][0]])\n\n    display(disable_response[[\"uuid\", \"created\"]])\n    assert disable_response[\"disabled\"][0]\n\n    assert disable_response[\"disabled\"].all()\n    assert disable_response.shape[0] == 2\n    disable_response\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9b15b7d2-1737-4c9d-8285-a4477d60d820 | 2022-10-27T08:41:57 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 80cad6e8-d6aa-4753-936f-d04b56d890ab | 2022-10-27T08:41:57 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9b15b7d2-1737-4c9d-8285-a4477d60d820 | 2022-10-27T08:41:57 | | 1   | 80cad6e8-d6aa-4753-936f-d04b56d890ab | 2022-10-27T08:41:57 |   <pre><code># tests for user.enable\n\nwith super_user():\n    # create a new user\n\n    response_df = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    # Disable the newly created user\n    disable_response = User.disable(response_df[\"uuid\"][0])\n\n    display(disable_response[[\"uuid\", \"created\"]])\n    assert disable_response[\"disabled\"][0]\n\n    # Enable the disabled user\n\n    enable_response = User.enable(disable_response[\"username\"][0])\n\n    display(enable_response[[\"uuid\", \"created\"]])\n    assert not enable_response[\"disabled\"][0]\n\n    # Enable already enabled user\n\n    with pytest.raises(ValueError) as e:\n        User.enable(enable_response[\"uuid\"][0])\n\n    display(str(e.value))\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9b6d5893-fd2b-46a0-aca8-c0575d2899a9 | 2022-10-27T08:41:58 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9b6d5893-fd2b-46a0-aca8-c0575d2899a9 | 2022-10-27T08:41:58 |   <pre><code>'The user has already been enabled.'\n</code></pre> <pre><code># tests for user.enable. Enabling multiple users\n\nwith super_user():\n    # create a new user\n\n    response_df_user_1 = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    # Disable the newly created user\n    disable_response_user_1 = User.disable(response_df_user_1[\"uuid\"][0])\n    display(disable_response_user_1[[\"uuid\", \"created\"]])\n    assert disable_response_user_1[\"disabled\"][0]\n\n    # create a new user\n\n    response_df_user_2 = User.create(\n        username=f\"random_user_{randrange(10000)}_{randrange(10000)}\",\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    # Disable the newly created user\n    disable_response_user_2 = User.disable(response_df_user_2[\"uuid\"][0])\n    display(disable_response_user_2[[\"uuid\", \"created\"]])\n    assert disable_response_user_2[\"disabled\"][0]\n\n    # Enable the disabled users\n    enable_response = User.enable(\n        [disable_response_user_1[\"username\"][0], disable_response_user_2[\"uuid\"][0]]\n    )\n\n    display(enable_response[[\"uuid\", \"created\"]])\n    assert not enable_response[\"disabled\"].all()\n    assert enable_response.shape[0] == 2\n    enable_response\n    # Negative Scenario. Non-MFA user passing otp\n    with pytest.raises(ValueError) as e:\n        random_otp = 123456\n        User.enable(\n            [\n                disable_response_user_1[\"username\"][0],\n                disable_response_user_2[\"uuid\"][0],\n            ],\n            otp=random_otp,\n        )\n\n    display(str(e.value))\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | a2746326-0a5d-4aec-ad5b-30aaf3ed264f | 2022-10-27T08:41:58 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 651f8d55-359b-4347-8422-62b7c03f0b0d | 2022-10-27T08:41:59 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | a2746326-0a5d-4aec-ad5b-30aaf3ed264f | 2022-10-27T08:41:58 | | 1   | 651f8d55-359b-4347-8422-62b7c03f0b0d | 2022-10-27T08:41:59 |   <pre><code>'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># tests for User.update\n\n# Testing positive scenario. Calling User.update as a super user\n\nwith super_user():\n    # Creating a new user\n\n    _username = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n\n    response_df = User.create(\n        username=_username,\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=\"random_password\",\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    display(response_df[[\"uuid\", \"created\"]])\n\n    assert response_df.shape == (1, len(User.USER_COLS))\n\n    # updating the user details as super user\n    _new_username = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n    df = User.update(user=response_df[\"uuid\"][0], username=_new_username)\n    assert df[\"username\"][0] == _new_username\n\n    _new_lastname = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n    df = User.update(user=_new_username, last_name=_new_lastname)\n    display(df[[\"uuid\", \"created\"]])\n    assert df[\"last_name\"][0] == _new_lastname\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | e0f7e48d-9a2f-44a1-94db-f22c9fa47932 | 2022-10-27T08:41:59 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | e0f7e48d-9a2f-44a1-94db-f22c9fa47932 | 2022-10-27T08:41:59 |   <pre><code># tests for User.update\n\n# Testing positive scenario. Calling User.update as a normal user\n\nnew_user_details: dict = {}\n\nwith super_user():\n    global new_user_details\n\n    # Creating a new user\n\n    _username = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n    _password = \"password\"\n\n    response_df = User.create(\n        username=_username,\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\",\n        password=_password,\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    display(response_df[[\"uuid\", \"created\"]])\n\n    new_user_details.update(\n        user=response_df[\"username\"][0], username=_username, password=_password\n    )\n\n    assert response_df.shape == (1, len(User.USER_COLS))\n\n\n# Authenticating with newely created user credentials\nClient.get_token(\n    username=new_user_details[\"username\"], password=new_user_details[\"password\"]\n)\n\n# updating the user details\n_new_username = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_new_first_name = \"random_new_first_name\"\n_new_last_name = \"random_last_first_name\"\n_new_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\nresponse_df = User.update(\n    username=_new_username,\n    first_name=_new_first_name,\n    last_name=_new_last_name,\n    email=_new_email,\n)\n\ndisplay(response_df[[\"uuid\", \"created\"]])\nassert response_df.shape == (1, len(User.USER_COLS))\nassert response_df[\"username\"][0] == _new_username\nassert response_df[\"first_name\"][0] == _new_first_name\nassert response_df[\"last_name\"][0] == _new_last_name\nassert response_df[\"email\"][0] == _new_email\n\n\n# Authenticating with newly created password\nClient.get_token(username=_new_username, password=_password)\n\ndisplay(f\"Masked token = { '*' * (len(Client.auth_token))}\")\nassert len(Client.auth_token) &gt;= 127\n\n# Negative scenario: Non-super user trying to update other user details\nwith pytest.raises(ValueError) as e:\n    User.update(\n        user=INVALID_UUID_FOR_TESTING,\n        username=_new_username,\n        first_name=_new_first_name,\n        last_name=_new_last_name,\n        email=_new_email,\n    )\ndisplay(str(e.value))\n\n# Negative Scenario. Non-MFA user passing otp\nwith pytest.raises(ValueError) as e:\n    random_otp = 123456\n    User.update(\n        username=_new_username,\n        first_name=_new_first_name,\n        last_name=_new_last_name,\n        email=_new_email,\n        otp=random_otp,\n    )\ndisplay(str(e.value))\nassert \"MFA is not activated for the account.\" in str(e.value)\n</code></pre>   |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9118e747-8948-405e-990c-37a7aaf92525 | 2022-10-27T08:42:00 |     |     | uuid                                 | created             | |-----|--------------------------------------|---------------------| | 0   | 9118e747-8948-405e-990c-37a7aaf92525 | 2022-10-27T08:42:00 |   <pre><code>'Masked token = *************************************************************************************************************************************************'\n\n\"Insufficient permission to access other user's data\"\n\n'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># Tests for _get_mfa_provision_url\n\nmfa_url = User._get_mfa_provision_url()\ndisplay(f\"mfa_url: {'*'*len(mfa_url)}\")\nassert len(mfa_url) &gt; 0\n</code></pre> <pre><code>'mfa_url: ***************************************************************************************************************'\n</code></pre> <pre><code># Tests for enable_mfa\n\nqr_code = User.enable_mfa()\n\nassert type(qr_code) == PilImage\ntype(qr_code)\n\n# Negative Scenario. Non-MFA user passing otp\nwith pytest.raises(ValueError) as e:\n    random_otp = 123456\n    User.enable_mfa(otp=random_otp)\ndisplay(str(e.value))\nassert \"MFA is not activated for the account.\" in str(e.value)\n</code></pre> <pre><code>'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># Tests for activate_mfa. Negative case\n\nrandom_otp = 123123\nwith pytest.raises(ValueError) as e:\n    User.activate_mfa(otp=random_otp)\nstr(e.value)\n</code></pre> <pre><code>'Invalid OTP. Please try again.'\n</code></pre> <pre><code># Tests for disable_mfa. Negative case: Non-MFA enabled user trying to disable MFA for self\nwith pytest.raises(ValueError) as e:\n    User.disable_mfa()\n\nassert str(e.value) == \"MFA is already disabled for the user\", str(e.value)\n\n# Tests for disable_mfa. Negative case: Normal user trying to disable MFA for other users\nwith pytest.raises(ValueError) as e:\n    User.disable_mfa(user=INVALID_UUID_FOR_TESTING)\n\nassert str(e.value) == \"Insufficient permission to access other user's data\", str(\n    e.value\n)\ndisplay(\"OK\")\n\n# Negative Scenario. Non-MFA user passing otp\nwith pytest.raises(ValueError) as e:\n    random_otp = 123456\n    User.disable_mfa(otp=random_otp)\ndisplay(str(e.value))\nassert \"MFA is not activated for the account.\" in str(e.value)\n</code></pre> <pre><code>'OK'\n\n'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># A helper context manager to create new users for testing\n@contextmanager\ndef create_normal_user_for_testing():\n    # 1. Get Super user token\n    username = os.environ[SERVICE_SUPER_USER]\n    password = os.environ[SERVICE_PASSWORD]\n\n    Client.get_token(username=username, password=password)\n\n    _user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n    _email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n    _password = \"random_password\"\n\n    response_df = User.create(\n        username=_user_name,\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=_email,\n        password=_password,\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    #     display(response_df[[\"id\", \"created\"]])\n\n    assert response_df.shape == (1, len(User.USER_COLS))\n\n    Client.get_token(username=_user_name, password=_password)\n\n    yield\n</code></pre> <pre><code># Tests for disable_sso. Negative case: Non-SSO user trying to disable SSO for self\nwith create_normal_user_for_testing():\n    sso_provider = \"google\"\n\n    with pytest.raises(ValueError) as e:\n        User.disable_sso(sso_provider=sso_provider)\n\n    assert \"SSO is not enabled\" in str(e.value)\n\n    # Negative case: Normal user trying to disable SSO for other users\n    with pytest.raises(ValueError) as e:\n        User.disable_sso(sso_provider=sso_provider, user=INVALID_UUID_FOR_TESTING)\n\n    assert \"Insufficient permission\" in str(e.value), str(e.value)\n    display(\"OK\")\n</code></pre> <pre><code>'OK'\n</code></pre> <pre><code># Tests for enable_sso\nwith create_normal_user_for_testing():\n    # Positive case: Non-MFA user enabling SSO\n    sso_email = \"sso_email@mail.com\"\n    sso_provider = \"google\"\n    actual = User.enable_sso(sso_provider, sso_email)\n    display(actual)\n    assert sso_email in actual\n    assert sso_provider in actual\n    # Non-MFA user disabling SSO\n    actual = User.disable_sso(sso_provider=sso_provider)\n    display(actual)\n    assert sso_provider in actual\n\n    # Positive case: Non-MFA user enabling SSO with new email address\n    new_sso_email = \"new_sso_email@mail.com\"\n    sso_provider = \"google\"\n    actual = User.enable_sso(sso_provider, new_sso_email)\n    display(actual)\n    assert new_sso_email in actual\n    assert sso_provider in actual\n\n    # Negative case: Non-MFA user enabling SSO by passing OTP\n    with pytest.raises(ValueError) as e:\n        random_otp = 123456\n        User.enable_sso(sso_provider, sso_email, otp=random_otp)\n    display(str(e.value))\n    assert \"MFA is not activated for the account.\" in str(e.value)\n</code></pre> <pre><code>'Single sign-on (SSO) is successfully enabled for google. Please use sso_email@mail.com as the email address while authenticating with google.'\n\n'Single sign-on (SSO) is successfully disabled for google.'\n\n'Single sign-on (SSO) is successfully enabled for google. Please use new_sso_email@mail.com as the email address while authenticating with google.'\n\n'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># Tests for register_phone_number\nwith create_normal_user_for_testing():\n    # Negative Scenario. Non-MFA user passing otp\n    with pytest.raises(ValueError) as e:\n        random_otp = 123456\n        User.disable_mfa(otp=random_otp)\n    display(str(e.value))\n    assert \"MFA is not activated for the account.\" in str(e.value)\n</code></pre> <pre><code>'MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.'\n</code></pre> <pre><code># Tests for validate_phone_number\nwith create_normal_user_for_testing():\n    # Negative Scenario. Calling validate_phone_number without registering a phone number\n    with pytest.raises(ValueError) as e:\n        random_otp = 123456\n        User.validate_phone_number(otp=random_otp)\n    display(str(e.value))\n    assert \"The phone number is not yet registered\" in str(e.value)\n</code></pre> <pre><code>'The phone number is not yet registered. Please register your phone number before calling this method.'\n</code></pre>"},{"location":"ActivateTestingEnvironment/","title":"Activate Testing Environment","text":"<p>source</p>"},{"location":"ActivateTestingEnvironment/#activated","title":"activated","text":"<pre><code> activated ()\n</code></pre>"},{"location":"CHANGELOG/","title":"Release notes","text":""},{"location":"CHANGELOG/#202330","title":"2023.3.0","text":""},{"location":"CHANGELOG/#bugs-squashed","title":"Bugs Squashed","text":"<ul> <li> <p>hide all submodules except for airt.client(rename to start with _) (#12)</p> </li> <li> <p>fix tables in the airt client docs (Tutorial) (#10)</p> </li> </ul>"},{"location":"CHANGELOG/#202320","title":"2023.2.0","text":""},{"location":"CHANGELOG/#202310","title":"2023.1.0","text":""},{"location":"CHANGELOG/#2022120","title":"2022.12.0","text":""},{"location":"CLI/","title":"CLI","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>from typer.testing import CliRunner\n\nimport airt._sanitizer\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>result = runner.invoke(app, [] + [\"user\", \"--help\"])\n\ndisplay(str(result.stdout))\n</code></pre> <pre><code>'Usage: root user [OPTIONS] COMMAND [ARGS]...\\n\\n  A set of commands for managing users and their authentication in the server.\\n\\nOptions:\\n  --help  Show this message and exit.\\n\\nCommands:\\n  create                 Create a new user in the server.\\n  details                Get user details\\n  disable                Disable a user in the server.\\n  enable                 Enable a disabled user in the server.\\n  ls                     Return the list of users available in the server.\\n  mfa                    Commands for enabling and disabling Multi-Factor...\\n  register-phone-number  Register and validate a phone number\\n  reset-password         Reset the account password\\n  sso                    Commands for enabling and disabling Single sign-on...\\n  update                 Update existing user details in the server.\\n'\n</code></pre>"},{"location":"CLI_DataBlob/","title":"CLI_DataBlob","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt._testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport shutil\nimport tempfile\nfrom contextlib import contextmanager\nfrom pathlib import Path\nfrom urllib.parse import quote_plus as urlquote\n\nimport pytest\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\nfrom sqlmodel import create_engine\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._constant import (\n    CLIENT_DB_PASSWORD,\n    CLIENT_DB_USERNAME,\n    CLIENT_NAME,\n    SERVER_URL,\n    SERVICE_PASSWORD,\n    SERVICE_TOKEN,\n    SERVICE_USERNAME,\n)\nfrom airt.client import DataBlob\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_token = None\n\n\n@contextmanager\ndef set_airt_service_token_envvar():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with set_airt_service_token_envvar():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code>def assert_has_help(xs: List[str]):\n    result = runner.invoke(app, xs + [\"--help\"])\n\n    display(result.stdout)\n    assert \" \".join(xs) in result.stdout\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nTEST_S3_CSV_URI = \"s3://test-airt-service/ecommerce_behavior_csv\"\nTEST_AZURE_URI = \"https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>def remove_hypens_from_id(id: str) -&gt; str:\n    return \"\".join((id).split(\"-\"))\n</code></pre> <pre><code>actual = remove_hypens_from_id(RANDOM_UUID_FOR_TESTING)\nassert len(actual) == 32\nactual\n</code></pre> <pre><code>'00000000000000000000000000000000'\n</code></pre> <pre><code># helper function to create a datablob\n\n\n_db = None\n\n\n@contextmanager\ndef generate_db(force_create: bool = False):\n    global _db\n\n    if _db is None or force_create:\n        _db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n        )\n\n        display(f\"{_db.uuid=}\")\n        assert len(remove_hypens_from_id(_db.uuid)) == 32\n\n        _db.progress_bar()\n\n    yield _db\n</code></pre> <pre><code># Tests for details\n# Testing positive scenario\n\n# Helper function to extract ID\n\n\ndef extract_id(res) -&gt; str:\n    r = (res.split(\"\\n\")[1]).strip()\n    return r.split(\" \")[0]\n\n\nwith set_airt_service_token_envvar():\n    with generate_db() as db:\n        db_uuid = db.uuid\n\n        # Getting Details of the data source\n        format_str = \"{'datablob_uuid': '{}'}\"\n        result = runner.invoke(app, [db_uuid, \"--format\", format_str])\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert result.stdout == f\"{db_uuid}\\n\", f\"{result.stdout=} {db_uuid=}\"\n</code></pre> <pre><code>\"_db.uuid='823c12cd-1c46-4136-96f3-d22841a447c9'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.24s/it]\n\n'823c12cd-1c46-4136-96f3-d22841a447c9\\n'\n</code></pre> <pre><code># Helper function to test multiple scenarios.\n\n\ndef assert_datablob(xs: List[str]):\n    # Testing Negative scenario\n    # Creating datablob without token\n\n    # Clearing previously set env variables\n    _token_flag = False\n\n    if os.environ.get(SERVICE_TOKEN):\n        _token_flag = True\n        airt_service_token = os.environ[SERVICE_TOKEN]\n        del os.environ[SERVICE_TOKEN]\n\n    result = runner.invoke(app, xs)\n    display(result.stdout)\n    assert result.exit_code == 1\n    assert (\n        f\"KeyError: The environment variable '{SERVICE_TOKEN}' is not set.\\n\\nPlease run the command '{CLIENT_NAME} token'\"\n        in result.stdout\n    )\n\n    if _token_flag:\n        os.environ[SERVICE_TOKEN] = airt_service_token\n\n    # Testing Positive scenario\n    # With and without quite\n\n    with set_airt_service_token_envvar():\n        # Without quiet (verbose)\n        result = runner.invoke(app, xs)\n        display(result.stdout)\n        assert \"Pulling datablob uuid:\" in result.stdout, result.stdout\n\n        # With quiet\n        display(\"*\" * 120)\n        result = runner.invoke(app, xs + [\"-q\"])\n        display(result.stdout)\n        assert len(remove_hypens_from_id(result.stdout[:-1])) == 32, len(\n            result.stdout[:-1]\n        )\n</code></pre> <pre><code># Tests for Datablob s3\n\ncmd = [\"from-s3\", f\"{TEST_S3_CSV_URI}\"]\n\nassert_datablob(cmd)\n</code></pre> <pre><code>\"KeyError: The environment variable 'AIRT_SERVICE_TOKEN' is not set.\\n\\nPlease run the command 'airt token' to get the application token and set it in the environment variable `AIRT_SERVICE_TOKEN`.\\n\\nTry 'airt token --help' for help.\\n\"\n\n'Pulling datablob uuid: f48bdad3-cbdf-4afc-9d35-38c626a58a2e\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\r  0%|          | 0/1 [00:15&lt;?, ?it/s]\\r  0%|          | 0/1 [00:20&lt;?, ?it/s]\\r  0%|          | 0/1 [00:25&lt;?, ?it/s]\\r  0%|          | 0/1 [00:30&lt;?, ?it/s]\\r  0%|          | 0/1 [00:35&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00,  5.06s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:40&lt;00:00, 40.54s/it]\\n'\n\n'************************************************************************************************************************'\n\n'6969f7a0-8a18-49a2-af7f-8d7b9f639c08\\n'\n</code></pre> <pre><code>assert_has_help([\"from-azure-blob-storage\"])\n</code></pre> <pre><code>\"Usage: root from-azure-blob-storage [OPTIONS] URI\\n\\n  Create and return a datablob that encapsulates the data from an Azure Blob\\n  Storage.\\n\\nArguments:\\n  URI  Azure Blob Storage URI of the source file.  [required]\\n\\nOptions:\\n  -c, --credential TEXT       Credential to access the Azure Blob Storage.\\n                              [required]\\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\\n                              store the datablob. Currently, the API only\\n                              supports **aws** and **azure** as cloud storage\\n                              providers. If **None** (default value), then\\n                              **azure**  will be used as the cloud storage\\n                              provider.\\n  -r, --region TEXT           The destination cloud provider's region to save\\n                              your datablob. If **None** (default value) then\\n                              the default region will be assigned based on the\\n                              cloud provider. In the case of **aws**, **eu-\\n                              west-1** will be used and in the case of\\n                              **azure**, **westeurope** will be used. The\\n                              supported AWS regions are: ap-northeast-1, ap-\\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\\n                              southeast-2, ca-central-1, eu-central-1, eu-\\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\\n                              east-1, us-east-1, us-east-2, us-west-1, us-\\n                              west-2. The supported Azure Blob Storage regions\\n                              are: australiacentral, australiacentral2,\\n                              australiaeast, australiasoutheast, brazilsouth,\\n                              canadacentral, canadaeast, centralindia,\\n                              centralus, eastasia, eastus, eastus2,\\n                              francecentral, francesouth, germanynorth,\\n                              germanywestcentral, japaneast, japanwest,\\n                              koreacentral, koreasouth, northcentralus,\\n                              northeurope, norwayeast, norwaywest,\\n                              southafricanorth, southafricawest, southcentralus,\\n                              southeastasia, southindia, switzerlandnorth,\\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\\n                              ukwest, westcentralus, westeurope, westindia,\\n                              westus, westus2.\\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\\n                              the tag **latest** will be assigned to the\\n                              datablob.\\n  -q, --quiet                 Output datablob uuid only.\\n  -d, --debug                 Set logger level to DEBUG and output everything.\\n  --help                      Show this message and exit.\\n\"\n</code></pre> <pre><code># Tests for from-azure-blob-storage\n# Positive Scenario: Passing credential in arguments\n\nstorage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nkeys = storage_client.storage_accounts.list_keys(\"test-airt-service\", \"testairtservice\")\ncredential = keys.keys[0].value\n\ncmd = [\n    \"from-azure-blob-storage\",\n    f\"{TEST_AZURE_URI}\",\n    \"--credential\",\n    f\"{credential}\",\n]\n\nassert_datablob(cmd)\n</code></pre> <pre><code>\"KeyError: The environment variable 'AIRT_SERVICE_TOKEN' is not set.\\n\\nPlease run the command 'airt token' to get the application token and set it in the environment variable `AIRT_SERVICE_TOKEN`.\\n\\nTry 'airt token --help' for help.\\n\"\n\n'Pulling datablob uuid: 82e15303-adcd-4f56-9347-0fb3dbf8b9d2\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\r  0%|          | 0/1 [00:15&lt;?, ?it/s]\\r  0%|          | 0/1 [00:20&lt;?, ?it/s]\\r  0%|          | 0/1 [00:25&lt;?, ?it/s]\\r  0%|          | 0/1 [00:30&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00,  5.06s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.50s/it]\\n'\n\n'************************************************************************************************************************'\n\n'eb7d485d-6a9b-499a-9157-262077c1cbef\\n'\n</code></pre> <pre><code># Tests for from-azure-blob-storage\n# Positive Scenario: Validating the default region\nwith set_airt_service_token_envvar():\n    for region in [\"westeurope\", \"northeurope\"]:\n        cmd = [\n            \"from-azure-blob-storage\",\n            f\"{TEST_AZURE_URI}\",\n            \"--credential\",\n            f\"{credential}\",\n            \"--cloud-provider\",\n            \"azure\",\n            \"--region\",\n            f\"{region}\",\n            \"-q\",\n        ]\n\n        result = runner.invoke(app, cmd)\n        display(result.stdout)\n\n        db_uuid = result.stdout[:-1]\n        display(db_uuid)\n        assert len(remove_hypens_from_id(db_uuid)) == 32\n\n        result = runner.invoke(app, [\"details\", db_uuid])\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert region in result.stdout\n</code></pre> <pre><code>'7acc7398-1d8e-4454-8ded-e355f8414c7a\\n'\n\n'7acc7398-1d8e-4454-8ded-e355f8414c7a'\n\n'datablob_uuid                         datasource_uuids    type                source                                                                                     region      cloud_provider    tags    pulled_on      folder_size    user_uuid                             error    disabled    ready\\n7acc7398-1d8e-4454-8ded-e355f8414c7a  &lt;none&gt;              azure_blob_storage  https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks  westeurope  azure             latest  7 seconds ago  10.2 MB        4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n\n'7c376650-5d91-4124-9057-9dfdd6984fbb\\n'\n\n'7c376650-5d91-4124-9057-9dfdd6984fbb'\n\n'datablob_uuid                         datasource_uuids    type                source                                                                                     region       cloud_provider    tags    pulled_on       folder_size    user_uuid                             error    disabled    ready\\n7c376650-5d91-4124-9057-9dfdd6984fbb  &lt;none&gt;              azure_blob_storage  https://testairtservice.blob.core.windows.net/test-container/ecommerce_behavior_notebooks  northeurope  azure             latest  11 seconds ago  10.2 MB        4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n</code></pre> <pre><code>assert_has_help([\"from-mysql\"])\n</code></pre> <pre><code>'Usage: root from-mysql [OPTIONS]\\n\\n  Create and return a datablob that encapsulates the data from a mysql database.\\n\\n  If the database requires authentication, pass the username/password as\\n  commandline arguments or store it in the **AIRT_CLIENT_DB_USERNAME** and\\n  **AIRT_CLIENT_DB_PASSWORD** environment variables.\\n\\nOptions:\\n  --host TEXT                 Remote database host name.  [required]\\n  --database TEXT             Database name.  [required]\\n  --table TEXT                Table name.  [required]\\n  --port INTEGER              Host port number. If not passed, then the default\\n                              value **3306** will be used.  [default: 3306]\\n  -cp, --cloud-provider TEXT  The destination cloud storage provider\\'s name to\\n                              store the datablob. Currently, the API only\\n                              supports **aws** and **azure** as cloud storage\\n                              providers. If **None** (default value), then\\n                              **aws**  will be used as the cloud storage\\n                              provider.\\n  -r, --region TEXT           The destination cloud provider\\'s region to save\\n                              your datablob. If **None** (default value) then\\n                              the default region will be assigned based on the\\n                              cloud provider. In the case of **aws**, **eu-\\n                              west-1** will be used and in the case of\\n                              **azure**, **westeurope** will be used. The\\n                              supported AWS regions are: ap-northeast-1, ap-\\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\\n                              southeast-2, ca-central-1, eu-central-1, eu-\\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\\n                              east-1, us-east-1, us-east-2, us-west-1, us-\\n                              west-2. The supported Azure Blob Storage regions\\n                              are: australiacentral, australiacentral2,\\n                              australiaeast, australiasoutheast, brazilsouth,\\n                              canadacentral, canadaeast, centralindia,\\n                              centralus, eastasia, eastus, eastus2,\\n                              francecentral, francesouth, germanynorth,\\n                              germanywestcentral, japaneast, japanwest,\\n                              koreacentral, koreasouth, northcentralus,\\n                              northeurope, norwayeast, norwaywest,\\n                              southafricanorth, southafricawest, southcentralus,\\n                              southeastasia, southindia, switzerlandnorth,\\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\\n                              ukwest, westcentralus, westeurope, westindia,\\n                              westus, westus2.\\n  -u, --username TEXT         Database username. If not passed, the default\\n                              value \"root\" will be used unless the value is\\n                              explicitly set in the environment variable\\n                              **AIRT_CLIENT_DB_USERNAME**.\\n  -p, --password TEXT         Database password. If not passed, the default\\n                              value \"\" will be used unless the value is\\n                              explicitly set in the environment variable\\n                              **AIRT_CLIENT_DB_PASSWORD**.\\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\\n                              the tag **latest** will be assigned to the\\n                              datablob.\\n  -q, --quiet                 Output datablob uuid only.\\n  -d, --debug                 Set logger level to DEBUG and output everything.\\n  --help                      Show this message and exit.\\n'\n</code></pre> <pre><code># tests for db. Testing negative scenario.\n# Passing invalid host address\n\ncmd = [\n    \"from-mysql\",\n    \"--host\",\n    \"db.staging.airt.ai\",\n    \"--database\",\n    \"test\",\n    \"--table\",\n    \"test\",\n]\n\n\nwith set_airt_service_token_envvar():\n    # Without quiet (verbose)\n    result = runner.invoke(app, cmd)\n    display(result.stdout)\n    assert \"Unknown MySQL server host 'db.staging.airt.ai'\" in result.stdout\n</code></pre> <pre><code>'Pulling datablob uuid: 1a76ae7a-7668-4def-b172-0d50484f2530\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\nError: (MySQLdb.OperationalError) (2005, \"Unknown MySQL server host \\'db.staging.airt.ai\\' (-2)\")\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\n'\n</code></pre> <pre><code># tests for db. Testing positive scenario.\n\n# Helper function to create new table in the mysql db\n\n\ndef get_db_engine():\n    username = os.environ[\"DB_USERNAME\"]\n    password = os.environ[\"DB_PASSWORD\"]\n    host = os.environ[\"DB_HOST\"]\n    port = int(os.environ[\"DB_PORT\"])\n    database = os.environ[\"DB_DATABASE\"]\n    database_server = os.environ[\"DB_DATABASE_SERVER\"]\n\n    quoted_password = urlquote(password)\n    conn_str = (\n        f\"{database_server}://{username}:{quoted_password}@{host}:{port}/{database}\"\n    )\n    engine = create_engine(conn_str)\n\n    return engine\n\n\nwith tempfile.TemporaryDirectory(prefix=\"test_s3_download_\") as d:\n    !aws s3 sync {TEST_S3_URI} {d}\n    !ls {d}\n\n    engine = get_db_engine()\n\n    df = pd.read_parquet(d)\n    try:\n        df.to_sql(\"test_db_pull\", con=engine, if_exists=\"fail\")\n    except ValueError as e:\n        display(e)\n\n\nwith set_airt_service_token_envvar():\n    for region in [\"eu-west-1\", \"eu-west-3\"]:\n        # Creating a new datasource\n        cmd = [\n            \"from-mysql\",\n            \"--host\",\n            os.environ[\"DB_HOST\"],\n            \"--database\",\n            os.environ[\"DB_DATABASE\"],\n            \"--table\",\n            \"test_db_pull\",\n            \"--username\",\n            os.environ[\"DB_USERNAME\"],\n            \"--password\",\n            os.environ[\"DB_PASSWORD\"],\n            \"--tag\",\n            \"v1.1.0\",\n        ]\n\n        cmd_q = [\n            \"from-mysql\",\n            \"--host\",\n            os.environ[\"DB_HOST\"],\n            \"--database\",\n            os.environ[\"DB_DATABASE\"],\n            \"--table\",\n            \"test_db_pull\",\n            \"--username\",\n            os.environ[\"DB_USERNAME\"],\n            \"--password\",\n            os.environ[\"DB_PASSWORD\"],\n            \"-cp\",\n            \"aws\",\n            \"--region\",\n            region,\n            \"-q\",\n        ]\n\n        # Without quiet\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert \"Pulling datablob uuid:\" in str(result.stdout)\n\n        # With quiet\n        result = runner.invoke(app, cmd_q)\n        db_uuid = result.stdout[:-1]\n        display(db_uuid)\n        assert len(remove_hypens_from_id(db_uuid)) == 32\n\n        result = runner.invoke(app, [\"details\", db_uuid])\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert region in result.stdout\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_s_7mrvfp/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_s_7mrvfp/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.9.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.12.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.8.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_s_7mrvfp/part.6.parquet\n_common_metadata  part.12.parquet  part.18.parquet  part.6.parquet\n_metadata     part.13.parquet  part.19.parquet  part.7.parquet\npart.0.parquet    part.14.parquet  part.2.parquet   part.8.parquet\npart.1.parquet    part.15.parquet  part.3.parquet   part.9.parquet\npart.10.parquet   part.16.parquet  part.4.parquet\npart.11.parquet   part.17.parquet  part.5.parquet\n\n'Pulling datablob uuid: d4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00,  5.05s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.15s/it]\\n'\n\n'79652c84-fdaf-445f-a9cd-95e4901e0eb4'\n\n'datablob_uuid                         datasource_uuids    type    source                                               region     cloud_provider    tags    pulled_on      folder_size    user_uuid                             error    disabled    ready\\n79652c84-fdaf-445f-a9cd-95e4901e0eb4  &lt;none&gt;              db      mysql://harish-mysql:3306/airt_service/test_db_pull  eu-west-1  aws               latest  3 seconds ago  8.0 MB         4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n\n'Pulling datablob uuid: 155a1e9c-2e52-4639-ad26-b462dc0315c4\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00,  5.06s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.50s/it]\\n'\n\n'868229e8-0f95-4eb5-8db6-30e329654a0d'\n\n'datablob_uuid                         datasource_uuids    type    source                                               region     cloud_provider    tags    pulled_on      folder_size    user_uuid                             error    disabled    ready\\n868229e8-0f95-4eb5-8db6-30e329654a0d  &lt;none&gt;              db      mysql://harish-mysql:3306/airt_service/test_db_pull  eu-west-3  aws               latest  3 seconds ago  8.0 MB         4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n</code></pre> <pre><code>assert_has_help([\"to-datasource\"])\n</code></pre> <pre><code>'Usage: root to-datasource [OPTIONS]\\n\\n  Process the datablob and return a datasource object.\\n\\nOptions:\\n  --uuid TEXT                     Datablob uuid.  [required]\\n  --file-type TEXT                The file type of the datablob. Currently, the\\n                                  API only supports \"csv\" and \"parquet\" as file\\n                                  types.  [required]\\n  --index-column TEXT             The column to use as index (row labels).\\n                                  [required]\\n  --sort-by TEXT                  The column(s) to sort the data. Can either be\\n                                  a string or a JSON encoded list of strings.\\n                                  [required]\\n  --deduplicate-data / --no-deduplicate-data\\n                                  If set to **True** (default value **False**),\\n                                  the datasource will be created with duplicate\\n                                  rows removed.  [default: no-deduplicate-data]\\n  --blocksize TEXT                The number of bytes used to split larger\\n                                  files. If None, then the default value\\n                                  **256MB** will be used.  [default: 256MB]\\n  --kwargs-json TEXT              Additional JSON encoded dict arguments to use\\n                                  while processing the data.e.g: To skip 100\\n                                  lines from the bottom of file, pass\\n                                  \\'{\"skipfooter\": 100}\\'\\n  -q, --quiet                     Output datasource uuid only.\\n  -d, --debug                     Set logger level to DEBUG and output\\n                                  everything.\\n  --help                          Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for to-datasource\n\nwith set_airt_service_token_envvar():\n    with generate_db() as db:\n        cmd = [\n            \"to-datasource\",\n            \"--uuid\",\n            f\"{db.uuid}\",\n            \"--file-type\",\n            \"parquet\",\n            \"--index-column\",\n            \"user_id\",\n            \"--sort-by\",\n            \"event_time\",\n            \"--kwargs-json\",\n            '{\"parse_dates\": [\"event_time\"], \"skipfooter\": 100}',\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0, f\"{result.stdout=}, {result.exit_code=}\"\n        assert (\n            \"Processing and pulling the datasource uuid:\" in result.stdout\n        ), result.stdout\n\n        cmd = [\n            \"to-datasource\",\n            \"--uuid\",\n            f\"{db.uuid}\",\n            \"--file-type\",\n            \"parquet\",\n            \"--index-column\",\n            \"user_id\",\n            \"--sort-by\",\n            '[\"event_time\", \"category_id\"]',\n            \"--kwargs-json\",\n            '{\"parse_dates\": [\"event_time\"], \"skipfooter\": 100}',\n            \"-q\",\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0, f\"{result.stdout=}, {result.exit_code=}\"\n        assert len(result.stdout[:-1].replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n</code></pre> <pre><code>'Processing and pulling the datasource uuid: 53bf8fc2-31c2-4b35-b355-5dcec1d79b4d\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\r  0%|          | 0/1 [00:15&lt;?, ?it/s]\\r  0%|          | 0/1 [00:20&lt;?, ?it/s]\\r  0%|          | 0/1 [00:25&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00,  5.06s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.43s/it]\\n'\n\n'eb23a3bf-bf18-452e-a8db-1df7c52798b5\\n'\n</code></pre> <pre><code># Tests for to-datasource. Passing wrong index and sort column names\n\nwith set_airt_service_token_envvar():\n    with generate_db() as db:\n        cmd = [\n            \"to-datasource\",\n            \"--uuid\",\n            f\"{db.uuid}\",\n            \"--file-type\",\n            \"parquet\",\n            \"--index-column\",\n            \"random-col\",\n            \"--sort-by\",\n            \"random-col\",\n            \"-q\",\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert \"'random-col'\" in result.stdout, result.stdout\n</code></pre> <pre><code>'Error: \"Data has no column \\'random-col\\': use any column of [\\'event_time\\', \\'event_type\\', \\'product_id\\', \\'category_id\\', \\'category_code\\', \\'brand\\', \\'price\\', \\'user_id\\', \\'user_session\\']\"\\n'\n</code></pre> <pre><code>assert_has_help([\"ls\"])\n</code></pre> <pre><code>'Usage: root ls [OPTIONS]\\n\\n  Return the list of datablobs.\\n\\nOptions:\\n  -o, --offset INTEGER  The number of datablobs to offset at the beginning. If\\n                        **None**, then the default value **0** will be used.\\n                        [default: 0]\\n  -l, --limit INTEGER   The maximum number of datablobs to return from the\\n                        server. If **None**, then the default value **100** will\\n                        be used.  [default: 100]\\n  --disabled            If set to **True**, then only the deleted datablobs will\\n                        be returned.Else, the default value **False** will be\\n                        used to return only the listof active datablobs.\\n  --completed           If set to **True**, then only the datablobs that are\\n                        successfully downloadedto the server will be returned.\\n                        Else, the default value **False** will be used toreturn\\n                        all the datablobs.\\n  -f, --format TEXT     Format output and show only the given column(s) values.\\n  -q, --quiet           Output only datablob uuids separated by space\\n  -d, --debug           Set logger level to DEBUG and output everything.\\n  --help                Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for datasource_ls\n# Testing positive scenario. Saving the token in env variable\n\n\ndef get_uuids_from_result(result) -&gt; List[int]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    # Without quiet\n    format_str = \"{'datablob_uuid': '{}', 'type': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n    display(result.stdout)\n\n    assert \"type\" in result.stdout\n    assert result.exit_code == 0\n\n    # With quiet\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n    uuids = get_uuids_from_result(result)\n    display(f\"{uuids=}\")\n</code></pre> <pre><code>'datablob_uuid                         type\\n8ef21b49-8e4d-402b-a64c-f70e6487eb49  s3\\nb7c1fe3f-8187-4874-bd5b-f5d8363fc2fe  s3\\n823c12cd-1c46-4136-96f3-d22841a447c9  s3\\nf48bdad3-cbdf-4afc-9d35-38c626a58a2e  s3\\n6969f7a0-8a18-49a2-af7f-8d7b9f639c08  s3\\n82e15303-adcd-4f56-9347-0fb3dbf8b9d2  azure_blob_storage\\neb7d485d-6a9b-499a-9157-262077c1cbef  azure_blob_storage\\n7acc7398-1d8e-4454-8ded-e355f8414c7a  azure_blob_storage\\n7c376650-5d91-4124-9057-9dfdd6984fbb  azure_blob_storage\\n1a76ae7a-7668-4def-b172-0d50484f2530  db\\nd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02  db\\n79652c84-fdaf-445f-a9cd-95e4901e0eb4  db\\n155a1e9c-2e52-4639-ad26-b462dc0315c4  db\\n868229e8-0f95-4eb5-8db6-30e329654a0d  db\\n'\n\n'8ef21b49-8e4d-402b-a64c-f70e6487eb49\\nb7c1fe3f-8187-4874-bd5b-f5d8363fc2fe\\n823c12cd-1c46-4136-96f3-d22841a447c9\\nf48bdad3-cbdf-4afc-9d35-38c626a58a2e\\n6969f7a0-8a18-49a2-af7f-8d7b9f639c08\\n82e15303-adcd-4f56-9347-0fb3dbf8b9d2\\neb7d485d-6a9b-499a-9157-262077c1cbef\\n7acc7398-1d8e-4454-8ded-e355f8414c7a\\n7c376650-5d91-4124-9057-9dfdd6984fbb\\n1a76ae7a-7668-4def-b172-0d50484f2530\\nd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02\\n79652c84-fdaf-445f-a9cd-95e4901e0eb4\\n155a1e9c-2e52-4639-ad26-b462dc0315c4\\n868229e8-0f95-4eb5-8db6-30e329654a0d\\n'\n\n\"uuids=['8ef21b49-8e4d-402b-a64c-f70e6487eb49', 'b7c1fe3f-8187-4874-bd5b-f5d8363fc2fe', '823c12cd-1c46-4136-96f3-d22841a447c9', 'f48bdad3-cbdf-4afc-9d35-38c626a58a2e', '6969f7a0-8a18-49a2-af7f-8d7b9f639c08', '82e15303-adcd-4f56-9347-0fb3dbf8b9d2', 'eb7d485d-6a9b-499a-9157-262077c1cbef', '7acc7398-1d8e-4454-8ded-e355f8414c7a', '7c376650-5d91-4124-9057-9dfdd6984fbb', '1a76ae7a-7668-4def-b172-0d50484f2530', 'd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02', '79652c84-fdaf-445f-a9cd-95e4901e0eb4', '155a1e9c-2e52-4639-ad26-b462dc0315c4', '868229e8-0f95-4eb5-8db6-30e329654a0d']\"\n</code></pre> <pre><code># Tests for datasource_ls\n# Testing positive scenario.\n# Testing by passing different values for  limit\n\n\nwith set_airt_service_token_envvar():\n    for limit in [1, 10, 1000]:\n        offset = 1\n        result = runner.invoke(app, [\"ls\", \"--offset\", offset, \"--limit\", limit, \"-q\"])\n\n        assert result.exit_code == 0\n\n        uuids = get_uuids_from_result(result)\n        display(f\"{uuids=}\")\n        assert limit &gt;= len(uuids) &gt;= 0\n</code></pre> <pre><code>\"uuids=['b7c1fe3f-8187-4874-bd5b-f5d8363fc2fe']\"\n\n\"uuids=['b7c1fe3f-8187-4874-bd5b-f5d8363fc2fe', '823c12cd-1c46-4136-96f3-d22841a447c9', 'f48bdad3-cbdf-4afc-9d35-38c626a58a2e', '6969f7a0-8a18-49a2-af7f-8d7b9f639c08', '82e15303-adcd-4f56-9347-0fb3dbf8b9d2', 'eb7d485d-6a9b-499a-9157-262077c1cbef', '7acc7398-1d8e-4454-8ded-e355f8414c7a', '7c376650-5d91-4124-9057-9dfdd6984fbb', '1a76ae7a-7668-4def-b172-0d50484f2530', 'd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02']\"\n\n\"uuids=['b7c1fe3f-8187-4874-bd5b-f5d8363fc2fe', '823c12cd-1c46-4136-96f3-d22841a447c9', 'f48bdad3-cbdf-4afc-9d35-38c626a58a2e', '6969f7a0-8a18-49a2-af7f-8d7b9f639c08', '82e15303-adcd-4f56-9347-0fb3dbf8b9d2', 'eb7d485d-6a9b-499a-9157-262077c1cbef', '7acc7398-1d8e-4454-8ded-e355f8414c7a', '7c376650-5d91-4124-9057-9dfdd6984fbb', '1a76ae7a-7668-4def-b172-0d50484f2530', 'd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02', '79652c84-fdaf-445f-a9cd-95e4901e0eb4', '155a1e9c-2e52-4639-ad26-b462dc0315c4', '868229e8-0f95-4eb5-8db6-30e329654a0d']\"\n</code></pre> <pre><code># Tests for datasource_ls\n# Testing positive scenario.\n# Testing by passing large value for offset.\n\nwith set_airt_service_token_envvar():\n    limit = 10\n    offset = 1_000_000\n    result = runner.invoke(app, [\"ls\", \"--offset\", offset, \"--limit\", limit])\n\n    assert result.exit_code == 0\n\n    display(result.stdout)\n</code></pre> <pre><code>'datablob_uuid    datasource_uuids    type    source    region    cloud_provider    tags    pulled_on    folder_size    ready\\n'\n</code></pre> <pre><code>assert_has_help([\"rm\"])\n</code></pre> <pre><code>'Usage: root rm [OPTIONS] UUID\\n\\n  Delete a datablob from the server.\\n\\nArguments:\\n  UUID  Datablob uuid.  [required]\\n\\nOptions:\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -q, --quiet        Output the deleted datablob uuid only.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for datasource rm\n# Testing positive scenario with quite\n\nwith set_airt_service_token_envvar():\n    with generate_db() as db:\n        db_uuid = db.uuid\n\n        # Deleting the created data source from the server\n        result = runner.invoke(app, [\"rm\", db_uuid, \"-q\"])\n        deleted_uuid = result.stdout[:-1]\n\n        display(deleted_uuid)\n\n        assert result.exit_code == 0\n        assert deleted_uuid == db_uuid\n\n        # List the existing data source ids in server and make sure the deleted id is not present in the server\n        format_str = \"{'datablob_uuid': '{}'}\"\n        ls_result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n        ls_uuids = get_uuids_from_result(ls_result)\n\n        display(ls_uuids)\n        assert deleted_uuid not in ls_uuids\n\n        # ls with quiet and disabled = True\n        result = runner.invoke(app, [\"ls\", \"--disabled\", \"-q\"])\n\n        display(result.stdout)\n        assert result.exit_code == 0\n\n        disabled_db_uuids = get_uuids_from_result(result)\n\n        display(f\"{disabled_db_uuids=}\")\n        assert deleted_uuid in disabled_db_uuids\n\n        # Testing negative scenario. Deleting already deleted data source\n        result = runner.invoke(app, [\"rm\", deleted_uuid, \"-q\"])\n        display(result.stdout)\n        assert result.exit_code == 1\n\n        # Testing negative scenario. Getting the details of the deleted data source\n        result = runner.invoke(app, [\"details\", deleted_uuid])\n        display(result.stdout)\n        assert result.exit_code == 1\n</code></pre> <pre><code>'823c12cd-1c46-4136-96f3-d22841a447c9'\n\n['8ef21b49-8e4d-402b-a64c-f70e6487eb49',\n 'b7c1fe3f-8187-4874-bd5b-f5d8363fc2fe',\n 'f48bdad3-cbdf-4afc-9d35-38c626a58a2e',\n '6969f7a0-8a18-49a2-af7f-8d7b9f639c08',\n '82e15303-adcd-4f56-9347-0fb3dbf8b9d2',\n 'eb7d485d-6a9b-499a-9157-262077c1cbef',\n '7acc7398-1d8e-4454-8ded-e355f8414c7a',\n '7c376650-5d91-4124-9057-9dfdd6984fbb',\n '1a76ae7a-7668-4def-b172-0d50484f2530',\n 'd4b4b132-d5ef-4c41-ad31-0f2cc5fb5b02',\n '79652c84-fdaf-445f-a9cd-95e4901e0eb4',\n '155a1e9c-2e52-4639-ad26-b462dc0315c4',\n '868229e8-0f95-4eb5-8db6-30e329654a0d']\n\n'823c12cd-1c46-4136-96f3-d22841a447c9\\n'\n\n\"disabled_db_uuids=['823c12cd-1c46-4136-96f3-d22841a447c9']\"\n\n'Error: The datablob has already been deleted.\\n'\n\n'Error: The datablob has already been deleted.\\n'\n</code></pre> <pre><code># Tests for datasource rm\n# Testing negative scenario. Deleting invalid data source\nwith set_airt_service_token_envvar():\n    # Testing negative scenario. Deleting already deleted data source\n    result = runner.invoke(app, [\"rm\", RANDOM_UUID_FOR_TESTING, \"-q\"])\n\n    display(result.stdout)\n</code></pre> <pre><code>'Error: The datablob uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"tag\"])\n</code></pre> <pre><code>'Usage: root tag [OPTIONS]\\n\\n  Tag an existing datablob in the server.\\n\\nOptions:\\n  -uuid, --datablob_uuid TEXT  Datablob uuid in the server.  [required]\\n  -n, --name TEXT              A string to tag the datablob.  [required]\\n  -f, --format TEXT            Format output and show only the given column(s)\\n                               values.\\n  -d, --debug                  Set logger level to DEBUG and output everything.\\n  --help                       Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for tag\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_db(force_create=True) as db:\n        db_uuid = db.uuid\n\n        # Tag the data source\n        format_str = \"{'datablob_uuid': '{}', 'tags': '{}'}\"\n        result = runner.invoke(\n            app, [\"tag\", \"-uuid\", db_uuid, \"-n\", \"v1.1.0\", \"--format\", format_str]\n        )\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert \"v1.1.0\" in str(result.stdout)\n</code></pre> <pre><code>\"_db.uuid='f2e00205-6568-4249-8f0e-176142cc5ac2'\"\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.16s/it]\n\n'datablob_uuid                         tags\\nf2e00205-6568-4249-8f0e-176142cc5ac2  latest, v1.1.0\\n'\n</code></pre> <pre><code>assert_has_help([\"from-local\"])\n</code></pre> <pre><code>\"Usage: root from-local [OPTIONS]\\n\\n  Create and return a datablob from local csv file.\\n\\n  The API currently allows users to create datablobs from CSV or Parquet files.\\n  We intend to support additional file formats in future releases.\\n\\nOptions:\\n  -p, --path TEXT             The relative or absolute path to a local\\n                              CSV/parquet file or to a directory containing the\\n                              CSV/parquet files.  [required]\\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\\n                              store the datablob. Currently, the API only\\n                              supports **aws** and **azure** as cloud storage\\n                              providers. If **None** (default value), then\\n                              **aws**  will be used as the cloud storage\\n                              provider.\\n  -r, --region TEXT           The destination cloud provider's region to save\\n                              your datablob. If **None** (default value) then\\n                              the default region will be assigned based on the\\n                              cloud provider. In the case of **aws**, **eu-\\n                              west-1** will be used and in the case of\\n                              **azure**, **westeurope** will be used. The\\n                              supported AWS regions are: ap-northeast-1, ap-\\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\\n                              southeast-2, ca-central-1, eu-central-1, eu-\\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\\n                              east-1, us-east-1, us-east-2, us-west-1, us-\\n                              west-2. The supported Azure Blob Storage regions\\n                              are: australiacentral, australiacentral2,\\n                              australiaeast, australiasoutheast, brazilsouth,\\n                              canadacentral, canadaeast, centralindia,\\n                              centralus, eastasia, eastus, eastus2,\\n                              francecentral, francesouth, germanynorth,\\n                              germanywestcentral, japaneast, japanwest,\\n                              koreacentral, koreasouth, northcentralus,\\n                              northeurope, norwayeast, norwaywest,\\n                              southafricanorth, southafricawest, southcentralus,\\n                              southeastasia, southindia, switzerlandnorth,\\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\\n                              ukwest, westcentralus, westeurope, westindia,\\n                              westus, westus2.\\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\\n                              the tag **latest** will be assigned to the\\n                              datablob.\\n  -q, --quiet                 Output data id only.\\n  -d, --debug                 Set logger level to DEBUG and output everything.\\n  --help                      Show this message and exit.\\n\"\n</code></pre> <pre><code># Testing single files upload.\n\n# Create temp directory\ntemp_dir, csv_dirpath = get_test_csv_path()\n\n# Creating a new datasource\ncmd = [\"from-local\", \"--path\", str(csv_dirpath / \"file-1.csv\")]\n\ncmd_q = [\"from-local\", \"--path\", str(csv_dirpath / \"file-1.csv\"), \"-q\"]\n\n\nwith set_airt_service_token_envvar():\n    # Without quiet\n    result = runner.invoke(app, cmd)\n\n    display(result.stdout)\n    assert \"Successfully pulled the datablob uuid:\" in str(result.stdout)\n\n    # With quiet\n    result = runner.invoke(app, cmd_q)\n\n    display(result.stdout)\n    assert len(remove_hypens_from_id(result.stdout[:-1])) == 32\n\n\n# Deleting the temp directory\nshutil.rmtree(temp_dir)\ndisplay(f\"{temp_dir.exists()=}\")\nassert not temp_dir.exists()\n</code></pre> <pre><code>download: s3://test-airt-service/ecommerce_behavior_notebooks/_metadata to ../../../tmp/test_s3_download_58lkcuny/parquet/_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/_common_metadata to ../../../tmp/test_s3_download_58lkcuny/parquet/_common_metadata\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.16.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.16.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.12.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.12.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.1.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.1.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.11.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.11.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.18.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.18.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.14.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.14.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.13.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.13.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.15.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.15.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.0.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.0.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.19.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.19.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.17.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.17.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.10.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.10.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.4.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.4.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.5.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.5.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.2.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.2.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.7.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.7.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.6.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.6.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.3.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.3.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.8.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.8.parquet\ndownload: s3://test-airt-service/ecommerce_behavior_notebooks/part.9.parquet to ../../../tmp/test_s3_download_58lkcuny/parquet/part.9.parquet\n\n[Path('/tmp/test_s3_download_58lkcuny/csv/file-1.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-15.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-6.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-8.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-17.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-19.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-18.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-5.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-14.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-0.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-10.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-7.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-12.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-4.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-2.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-3.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-16.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-13.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-9.csv'),\n Path('/tmp/test_s3_download_58lkcuny/csv/file-11.csv')]\n\n'\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.68it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.68it/s]\\nSuccessfully pulled the datablob uuid: 8feeb4d7-3343-4f1e-a25e-8f39822ee440.\\n'\n\n'bdfe2e41-a9da-4d68-9459-a03418eb7e0f\\n'\n\n'temp_dir.exists()=False'\n</code></pre> <pre><code>assert_has_help([\"from-clickhouse\"])\n</code></pre> <pre><code>'Usage: root from-clickhouse [OPTIONS]\\n\\n  Create and return a datablob that encapsulates the data from a ClickHouse\\n  database.\\n\\n  If the database requires authentication, pass the username/password as\\n  commandline arguments or store it in the **CLICKHOUSE_USERNAME** and\\n  **CLICKHOUSE_PASSWORD** environment variables.\\n\\nOptions:\\n  --host TEXT                 Remote database host name.  [required]\\n  --database TEXT             Database name.  [required]\\n  --table TEXT                Table name.  [required]\\n  --protocol TEXT             Protocol to use. The valid values are \"native\" and\\n                              \"http\".  [required]\\n  --index-column TEXT         The column to use as index (row labels).\\n                              [required]\\n  --timestamp-column TEXT     Timestamp column name in the tabel.  [required]\\n  --port INTEGER              Host port number. If not passed, then the default\\n                              value **0** will be used.  [default: 0]\\n  -cp, --cloud-provider TEXT  The destination cloud storage provider\\'s name to\\n                              store the datablob. Currently, the API only\\n                              supports **aws** and **azure** as cloud storage\\n                              providers. If **None** (default value), then\\n                              **aws**  will be used as the cloud storage\\n                              provider.\\n  -r, --region TEXT           The destination cloud provider\\'s region to save\\n                              your datablob. If **None** (default value) then\\n                              the default region will be assigned based on the\\n                              cloud provider. In the case of **aws**, **eu-\\n                              west-1** will be used and in the case of\\n                              **azure**, **westeurope** will be used. The\\n                              supported AWS regions are: ap-northeast-1, ap-\\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\\n                              southeast-2, ca-central-1, eu-central-1, eu-\\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\\n                              east-1, us-east-1, us-east-2, us-west-1, us-\\n                              west-2. The supported Azure Blob Storage regions\\n                              are: australiacentral, australiacentral2,\\n                              australiaeast, australiasoutheast, brazilsouth,\\n                              canadacentral, canadaeast, centralindia,\\n                              centralus, eastasia, eastus, eastus2,\\n                              francecentral, francesouth, germanynorth,\\n                              germanywestcentral, japaneast, japanwest,\\n                              koreacentral, koreasouth, northcentralus,\\n                              northeurope, norwayeast, norwaywest,\\n                              southafricanorth, southafricawest, southcentralus,\\n                              southeastasia, southindia, switzerlandnorth,\\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\\n                              ukwest, westcentralus, westeurope, westindia,\\n                              westus, westus2.\\n  -u, --username TEXT         Database username. If not passed, the default\\n                              value \\'root\\' will be used unless the value is\\n                              explicitly set in the environment variable\\n                              **CLICKHOUSE_USERNAME**.\\n  -p, --password TEXT         Database password. If not passed, the default\\n                              value \\'\\' will be used unless the value is\\n                              explicitly set in the environment variable\\n                              **CLICKHOUSE_PASSWORD**.\\n  -f, --filters-json TEXT     Additional parameters to be used when importing\\n                              data. For example, if you want to filter and\\n                              extract data only for a specific user_id, pass\\n                              \\'{\"user_id\": 1}\\'.\\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\\n                              the tag **latest** will be assigned to the\\n                              datablob.\\n  -q, --quiet                 Output datablob uuid only.\\n  -d, --debug                 Set logger level to DEBUG and output everything.\\n  --help                      Show this message and exit.\\n'\n</code></pre> <pre><code># tests for from-clickhouse. Testing positive scenario.\n\ncmd = [\n    \"from-clickhouse\",\n    \"--host\",\n    os.environ.get(\"CLICKHOUSE_HOST\"),\n    \"--database\",\n    os.environ.get(\"CLICKHOUSE_DATABASE\"),\n    \"--table\",\n    os.environ.get(\"CLICKHOUSE_EVENTS_TABLE\"),\n    \"--protocol\",\n    \"native\",\n    \"--index-column\",\n    \"PersonId\",\n    \"--timestamp-column\",\n    \"OccurredTimeTicks\",\n    \"--filters-json\",\n    '{\"AccountId\": 312571}',\n]\n\n\nwith set_airt_service_token_envvar():\n    # Without quiet (verbose)\n    result = runner.invoke(app, cmd)\n    display(result.stdout)\n    assert \"Pulling datablob uuid: \" in result.stdout\n\n    result = runner.invoke(app, cmd + [\"-q\"])\n    db_uuid = result.stdout[:-1]\n    display(db_uuid)\n    assert len(remove_hypens_from_id(db_uuid)) == 32\n\n    result = runner.invoke(app, [\"details\", db_uuid])\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert \"eu-west-1\" in result.stdout\n\n    result = runner.invoke(app, cmd + [\"-cp\", \"aws\", \"--region\", \"eu-west-3\", \"-q\"])\n    db_uuid = result.stdout[:-1]\n    display(db_uuid)\n    assert len(remove_hypens_from_id(db_uuid)) == 32\n\n    result = runner.invoke(app, [\"details\", db_uuid])\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert \"eu-west-3\" in result.stdout\n</code></pre> <pre><code>'Pulling datablob uuid: a17b8b8f-74a7-4d8e-9f53-803c14ad726f\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\r  0%|          | 0/1 [00:15&lt;?, ?it/s]\\r  0%|          | 0/1 [00:20&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:25&lt;00:00,  5.06s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:25&lt;00:00, 25.40s/it]\\n'\n\n'b3826d4f-852b-4676-af05-933316c4a56a'\n\n'datablob_uuid                         datasource_uuids    type    source                                                       region     cloud_provider    tags    pulled_on      folder_size    user_uuid                             error    disabled    ready\\nb3826d4f-852b-4676-af05-933316c4a56a  &lt;none&gt;              db      clickhouse+native://20.73.247.24:0/infobip/airt_training_3m  eu-west-1  aws               latest  3 seconds ago  8.9 MB         4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n\n'247e6345-8940-4d75-8845-576d2b652955'\n\n'datablob_uuid                         datasource_uuids    type    source                                                       region     cloud_provider    tags    pulled_on      folder_size    user_uuid                             error    disabled    ready\\n247e6345-8940-4d75-8845-576d2b652955  &lt;none&gt;              db      clickhouse+native://20.73.247.24:0/infobip/airt_training_3m  eu-west-3  aws               latest  4 seconds ago  8.9 MB         4b5131a3-6562-413d-abf2-1103275bf945  &lt;none&gt;   False       True\\n'\n</code></pre> <pre><code># tests for from-clickhouse. Testing negative scenario.\n\ncmd = [\n    \"from-clickhouse\",\n    \"--host\",\n    os.environ.get(\"CLICKHOUSE_HOST\"),\n    \"--database\",\n    \"fake-database\",\n    \"--table\",\n    \"fake-table\",\n    \"--protocol\",\n    \"native\",\n    \"--index-column\",\n    \"PersonId\",\n    \"--timestamp-column\",\n    \"OccurredTimeTicks\",\n    \"-f\",\n    '{\"AccountId\": 312571}',\n]\n\n\nwith set_airt_service_token_envvar():\n    # Without quiet (verbose)\n    result = runner.invoke(app, cmd)\n    display(result.stdout)\n    assert result.exit_code == 1\n</code></pre> <pre><code>\"Pulling datablob uuid: b957e2c5-4527-41d8-90b2-46e0c1bada8f\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\nError: Orig exception: Code: 81.\\nDB::Exception: Database `fake-database` doesn't exist. Stack trace:\\n\\n0. DB::Exception::Exception(DB::Exception::MessageMasked&amp;&amp;, int, bool) @ 0xddb0df5 in /usr/bin/clickhouse\\n1. ? @ 0x883ade4 in /usr/bin/clickhouse\\n2. DB::Databas\\n\"\n</code></pre>"},{"location":"CLI_DataSource/","title":"CLI_DataSource","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport shutil\nimport tempfile\nfrom contextlib import contextmanager\nfrom pathlib import Path\nfrom urllib.parse import quote_plus as urlquote\n\nimport pytest\nfrom sqlmodel import create_engine\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._components.datablob import DataBlob\nfrom airt._components.progress_status import ProgressStatus\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_TOKEN, SERVICE_USERNAME\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_token = None\n\n\n@contextmanager\ndef set_airt_service_token_envvar():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with set_airt_service_token_envvar():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>def assert_has_help(xs: List[str]):\n    result = runner.invoke(app, xs + [\"--help\"])\n\n    display(result.stdout)\n    assert \" \".join(xs) in result.stdout\n</code></pre> <pre><code>assert_has_help([\"dtypes\"])\n</code></pre> <pre><code>'Usage: dtypes [OPTIONS] UUID\\n\\n  Return the dtypes of the datasource.\\n\\nArguments:\\n  UUID  Datasource uuid.  [required]\\n\\nOptions:\\n  -d, --debug                     Set logger level to DEBUG and output\\n                                  everything.\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n'\n</code></pre> <pre><code># helper function to create a s3 datasource\n\n_ds = None\n\n\n@contextmanager\ndef generate_ds(force_create: bool = False):\n    global _ds\n\n    if _ds is None or force_create:\n        # Create a s3 datasource\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n            cloud_provider=\"aws\",\n            region=\"eu-west-1\",\n        )\n\n        db.progress_bar()\n        display(f\"{db.uuid=}\")\n        assert len(db.uuid.replace(\"-\", \"\")) == 32\n\n        _ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{_ds.uuid=}\")\n        assert len(_ds.uuid.replace(\"-\", \"\")) == 32\n\n        _ds.progress_bar()\n\n    yield _ds\n</code></pre> <pre><code># tests for head\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_ds() as ds:\n        ds_uuid = ds.uuid\n\n        format_str = \"{'product_id': '{:,d}', 'event_time': '{}'}\"\n        result = runner.invoke(app, [\"head\", ds_uuid, \"--format\", format_str])\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert len(result.stdout[:-1].split(\"\\n\")) == 11\n</code></pre> <pre><code>'product_id    event_time\\n1,304,297     2019-11-03 14:26:26+00:00\\n1,306,310     2019-11-03 14:26:38+00:00\\n1,306,310     2019-11-04 05:56:10+00:00\\n1,306,265     2019-11-01 02:23:03+00:00\\n1,306,952     2019-11-06 15:23:02+00:00\\n1,306,952     2019-11-06 15:23:43+00:00\\n1,307,053     2019-11-06 15:23:55+00:00\\n1,307,345     2019-11-02 08:09:20+00:00\\n1,306,609     2019-11-02 08:10:59+00:00\\n1,307,354     2019-11-02 08:14:46+00:00\\n'\n</code></pre> <pre><code>assert_has_help([\"ls\"])\n</code></pre> <pre><code>'Usage: root ls [OPTIONS]\\n\\n  Return the list of datasources.\\n\\nOptions:\\n  -o, --offset INTEGER  The number of datasources to offset at the beginning. If\\n                        **None**, then the default value **0** will be used.\\n                        [default: 0]\\n  -l, --limit INTEGER   The maximum number of datasources to return from the\\n                        server. If **None**, then the default value **100** will\\n                        be used.  [default: 100]\\n  --disabled            If set to **True**, then only the deleted datasources\\n                        will be returned.Else, the default value **False** will\\n                        be used to return only the listof active datasources.\\n  --completed           If set to **True**, then only the datasources that are\\n                        successfully downloadedto the server will be returned.\\n                        Else, the default value **False** will be used toreturn\\n                        all the datasources.\\n  -f, --format TEXT     Format output and show only the given column(s) values.\\n  -q, --quiet           Output only datasource uuids separated by space\\n  -d, --debug           Set logger level to DEBUG and output everything.\\n  --help                Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for datasource_ls\n# Testing positive scenario. Saving the token in env variable\n\n\ndef get_ids_from_result(result) -&gt; List[int]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    with generate_ds() as ds:\n        # Without quiet\n        result = runner.invoke(app, [\"ls\"])\n        display(result.stdout)\n\n        assert \"ready\" in result.stdout, result.stdout\n        assert result.exit_code == 0\n\n        # Without quiet\n        format_str = \"{'datasource_uuid': '{}', 'ready': '{}'}\"\n        result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n        display(result.stdout)\n\n        assert result.exit_code == 0\n\n        # With quiet\n        result = runner.invoke(app, [\"ls\", \"-q\"])\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        uuids = get_ids_from_result(result)\n        display(f\"{uuids=}\")\n</code></pre> <pre><code>'datasource_uuid                       datablob_uuid                         region     cloud_provider    tags    pulled_on       no_of_rows    folder_size    ready\\n672146ec-103a-4b4c-8038-139597771127  ceab7670-02b2-4654-9946-26c86ea50d4e  eu-west-1  aws               latest  6 minutes ago   294,599       unknown        False\\n85e61f59-ebb2-4f97-b7b5-64dfb7461c8d  28db0282-5972-4f71-8fc8-e704e745817d  eu-west-1  aws               latest  25 seconds ago  294,599       6.2 MB         True\\n'\n\n'datasource_uuid                       ready\\n672146ec-103a-4b4c-8038-139597771127  False\\n85e61f59-ebb2-4f97-b7b5-64dfb7461c8d  True\\n'\n\n'672146ec-103a-4b4c-8038-139597771127\\n85e61f59-ebb2-4f97-b7b5-64dfb7461c8d\\n'\n\n\"uuids=['672146ec-103a-4b4c-8038-139597771127', '85e61f59-ebb2-4f97-b7b5-64dfb7461c8d']\"\n</code></pre> <pre><code># tests for train\n# Testing positive scenario with quite\n\nwith set_airt_service_token_envvar():\n    with generate_ds() as ds:\n        ds_uuid = ds.uuid\n\n        result = runner.invoke(\n            app,\n            [\n                \"train\",\n                \"--datasource_uuid\",\n                ds_uuid,\n                \"--client_column\",\n                \"user_id\",\n                \"--target_column\",\n                \"category_code\",\n                \"--target\",\n                \"*checkout\",\n                \"--predict_after\",\n                \"3\",\n                \"-q\",\n            ],\n        )\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert len(result.stdout.replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n</code></pre> <pre><code>'5315e186-b9b5-4746-8208-1c3359165e55\\n'\n</code></pre> <pre><code># tests for train\n# Testing positive scenario without quite\n\nwith set_airt_service_token_envvar():\n    with generate_ds() as ds:\n        ds_uuid = ds.uuid\n\n        result = runner.invoke(\n            app,\n            [\n                \"train\",\n                \"-uuid\",\n                ds_uuid,\n                \"--client_column\",\n                \"user_id\",\n                \"--target_column\",\n                \"category_code\",\n                \"--target\",\n                \"*checkout\",\n                \"--predict_after\",\n                \"3\",\n            ],\n        )\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert \"Training started for model uuid\" in result.stdout\n</code></pre> <pre><code>'Training started for model uuid: ed5ec4b6-5729-471d-bef7-76c7cf147653\\n\\r  0%|          | 0/5 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 123.81it/s]\\n'\n</code></pre> <pre><code># tests for train\n# Testing negative scenario with quite. Passing invalid value for data_id\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(\n        app,\n        [\n            \"train\",\n            \"--datasource_uuid\",\n            RANDOM_UUID_FOR_TESTING,\n            \"--client_column\",\n            \"PersonId\",\n            \"--target_column\",\n            \"DefinitionId\",\n            \"--target\",\n            \"*checkout\",\n            \"--predict_after\",\n            \"3\",\n            \"-q\",\n        ],\n    )\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Error: The datasource uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code># Tests for datasource rm\n# Testing negative scenario. Deleting invalid data source\n\nwith set_airt_service_token_envvar():\n    # Testing negative scenario. Deleting already deleted data source\n    result = runner.invoke(app, [\"rm\", RANDOM_UUID_FOR_TESTING, \"-q\"])\n\n    display(result.stdout)\n</code></pre> <pre><code>'Error: The datasource uuid is incorrect. Please try again.\\n'\n</code></pre>"},{"location":"CLI_Helper/","title":"CLI_Helper","text":"<pre><code>import sys\nfrom io import StringIO\n\nimport pytest\n\nimport airt._sanitizer\nfrom airt._constant import SERVICE_PASSWORD\n</code></pre> <p>Context Managers and custom decorator</p> <p>source</p>"},{"location":"CLI_Helper/#requires_auth_token","title":"requires_auth_token","text":"<pre><code> requires_auth_token (func)\n</code></pre> <p>Helper Functions</p> <p>source</p>"},{"location":"CLI_Helper/#humanize_date","title":"humanize_date","text":"<pre><code> humanize_date (s:pandas.core.series.Series)\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#humanize_number","title":"humanize_number","text":"<pre><code> humanize_number (s:pandas.core.series.Series)\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#humanize_size","title":"humanize_size","text":"<pre><code> humanize_size (s:pandas.core.series.Series)\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#get_example_for_type","title":"get_example_for_type","text":"<pre><code> get_example_for_type (xs:pandas.core.series.Series)\n</code></pre> <p>Get example output for the given series</p> <p>Args: xs: Input series</p> <p>Returns: The valid formatting example for the series</p> <pre><code>df = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5, 10],\n    }\n)\n\nexpected = \"\u20ac{:,.2f}\"\nactual = get_example_for_type(df[\"float_column\"])\nassert actual == expected\ndisplay(actual)\n\nexpected = \"{:,d}\"\nactual = get_example_for_type(df[\"int_column\"])\nassert actual == expected\ndisplay(actual)\n\nexpected = \"{}\"\nactual = get_example_for_type(df[\"string_column\"])\nassert actual == expected\ndisplay(actual)\n</code></pre> <pre><code>'\u20ac{:,.2f}'\n\n'{:,d}'\n\n'{}'\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#get_example_output_format","title":"get_example_output_format","text":"<pre><code> get_example_output_format (df:pandas.core.frame.DataFrame)\n</code></pre> <p>Get example output format for the dataframe</p> <p>Args: df: Input dataframe</p> <p>Returns: The example output format for the dataframe</p> <pre><code>df = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5, 10],\n    }\n)\n\nactual = get_example_output_format(df)\ndisplay(actual)\n\nexpected = {\"float_column\": \"\u20ac{:,.2f}\", \"string_column\": \"{}\", \"int_column\": \"{:,d}\"}\nassert actual == expected\n</code></pre> <pre><code>{'float_column': '\u20ac{:,.2f}', 'string_column': '{}', 'int_column': '{:,d}'}\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#customize_output_format","title":"customize_output_format","text":"<pre><code> customize_output_format (format_str:str, df:pandas.core.frame.DataFrame)\n</code></pre> <p>Customize output format</p> <p>Args: format_str: A dict mapping of column names into their python format df: Input dataframe</p> <p>Returns: The formatted pandas DataFrame</p> <p>Raises: Error: If the formatting string is not a valid python expression Error: If invalid column name is passed Error: If invalid formatting string is passed Error: If wrong formatting is passed for a column</p> <pre><code>format_str = \"asd\"\ndf = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5020304, 1305060],\n    }\n)\n\nwith pytest.raises(typer.Exit) as e:\n    customize_output_format(format_str, df)\n</code></pre> <pre><code>Not a valid python expression: asd\nAn example of a valid formatting string: {'float_column': '\u20ac{:,.2f}', 'string_column': '{}', 'int_column': '{:,d}'}\n</code></pre> <pre><code>format_str = \"{'wrong_column': '{:,.2f}'}\"\nwith pytest.raises(typer.Exit) as e:\n    customize_output_format(format_str, df)\n</code></pre> <pre><code>The following columns are not valid: {'wrong_column'}. Only the following columns are valid: {'int_column', 'string_column', 'float_column'}\nAn example of a valid formatting string: {'float_column': '\u20ac{:,.2f}', 'string_column': '{}', 'int_column': '{:,d}'}\n</code></pre> <pre><code>df = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5020304, 1305060],\n    }\n)\nformat_str = \"{'float_column': '{:,d}'}\"\nwith pytest.raises(typer.Exit) as e:\n    customize_output_format(format_str, df)\n</code></pre> <pre><code>Formatting is wrong for float_column: {:,d}\nAn example of a valid formatting string: {'float_column': '\u20ac{:,.2f}', 'string_column': '{}', 'int_column': '{:,d}'}\n</code></pre> <pre><code>df = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5020304, 1305060],\n    }\n)\nformat_str = (\n    \"{'float_column': '\u20ac{:,.2f}', 'string_column': '{}', 'int_column': '{:,d}'}\"\n)\ndf = customize_output_format(format_str, df)\nassert df.shape[1] == 3\n</code></pre> <pre><code>df = pd.DataFrame(\n    {\n        \"float_column\": [123.4567, 234.5678],\n        \"string_column\": [\"bar\", \"baz\"],\n        \"int_column\": [5020304, 1305060],\n    }\n)\n\nformat_str = \"{'float_column': '\u20ac{:,.2f}'}\"\ndf = customize_output_format(format_str, df)\nassert len(df.columns) == 1\ndf\n</code></pre>   |     | float_column | |-----|--------------| | 0   | \u20ac123.46      | | 1   | \u20ac234.57      |   <p>source</p>"},{"location":"CLI_Helper/#separate_integers_and_strings","title":"separate_integers_and_strings","text":"<pre><code> separate_integers_and_strings (xs:List[str])\n</code></pre> <p>Seperate integers and strings from the list of strings</p> <p>Args: xs: List containing string inputs</p> <p>Returns: A list containing the integers and strings</p> <pre><code>_str = [\"0\", \"10\", \"20\", \"abc\"]\nexpected = [0, 10, 20, \"abc\"]\n\nactual = separate_integers_and_strings(_str)\nassert actual == expected\nactual\n</code></pre> <pre><code>[0, 10, 20, 'abc']\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#echo_formatted_output","title":"echo_formatted_output","text":"<pre><code> echo_formatted_output (df:pandas.core.frame.DataFrame)\n</code></pre> <p>Echo the formatted output to the terminal</p> <p>Args: df: Input DataFrame</p> <pre><code># test context manager for capturing the output printed to stdout\n# This function to test typer outputs\nclass Capturing(list):\n    def __enter__(self):\n        self._stdout = sys.stdout\n        sys.stdout = self._stringio = StringIO()\n        return self\n\n    def __exit__(self, *args):\n        self.extend(self._stringio.getvalue().splitlines())\n        del self._stringio  # free up some memory\n        sys.stdout = self._stdout\n</code></pre> <pre><code>df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n\nwith Capturing() as output:\n    echo_formatted_output(df)\n\ndisplay(str(output))\nassert \"a    b\" in str(output)\n</code></pre> <pre><code>\"['  a    b', '  1    4', '  2    5', '  3    6']\"\n</code></pre> <pre><code>df = pd.DataFrame({\"a\": [1, 2, 3]})\n\nwith Capturing() as output:\n    echo_formatted_output(df)\n\ndisplay(str(output))\nassert \"['1', '2', '3']\" in str(output)\n</code></pre> <pre><code>\"['1', '2', '3']\"\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#display_formated_table","title":"display_formated_table","text":"<pre><code> display_formated_table (func)\n</code></pre> <p>A decorator function to format the CLI table output</p> <pre><code>@display_formated_table\ndef test_display_formated_table(format, quiet):\n    df = pd.DataFrame({\"uuid\": [1, 2, 3], \"name\": [\"a\", \"b\", None]})\n    return {\"df\": df}\n\n\n# Negative scenario: Testing with invalid format\nwith Capturing() as output:\n    format = \"{'uuid': asd}\"\n    quiet = False\n    with pytest.raises(typer.Exit) as e:\n        test_display_formated_table(format=format, quiet=quiet)\n\n# Positive scenario: Setting format to valid format to only one column and quiet = False\nwith Capturing() as output:\n    format = \"{'uuid': '{}'}\"\n    quiet = False\n    test_display_formated_table(format=format, quiet=quiet)\n\ndisplay(str(output))\nassert str(output) == \"['1', '2', '3']\"\n\n# Positive scenario: Setting format to valid format and quiet=False\nwith Capturing() as output:\n    format = \"{'name': '{}', 'uuid': '{}'}\"\n    quiet = False\n    test_display_formated_table(format=format, quiet=quiet)\n\ndisplay(str(output))\nassert \"'name      uuid'\" in str(output)\n\n# Positive scenario: Setting format=None and quiet=False\nwith Capturing() as output:\n    format = None\n    quiet = False\n    test_display_formated_table(format=format, quiet=quiet)\n\ndisplay(str(output))\nassert \"'  uuid  name'\" in str(output)\n\n# Positive scenario: Setting format=None and quiet=True\nwith Capturing() as output:\n    format = None\n    quiet = True\n    test_display_formated_table(format=format, quiet=quiet)\n\ndisplay(str(output))\nassert \"'1'\" in str(output)\n</code></pre> <pre><code>Not a valid python expression: {'uuid': asd}\nAn example of a valid formatting string: {'uuid': '{:,d}', 'name': '{}'}\n\n\"['1', '2', '3']\"\n\n\"['name      uuid', 'a            1', 'b            2', 'None         3']\"\n\n\"['  uuid  name', '     1  a', '     2  b', '     3  &lt;none&gt;']\"\n\n\"['1', '2', '3']\"\n</code></pre> <pre><code>with set_airt_service_token_envvar():\n\n    @requires_totp_or_otp(message_template_name=\"test_message_template_name\")\n    def foo(otp):\n        return 1 / otp\n\n    with pytest.raises(Exception) as e:\n        foo(otp=0)\n    display(e)\n\n    foo(otp=1)\n</code></pre> <pre><code>&lt;ExceptionInfo Exit() tblen=2&gt;\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#requires_totp","title":"requires_totp","text":"<pre><code> requires_totp (no_retries:int=3)\n</code></pre> <p>A decorator function to prompt users to enter a valid totp</p> <pre><code>@requires_totp(3)\ndef foo(otp):\n    return 1 / otp\n\n\nwith pytest.raises(Exception) as e:\n    foo(otp=0)\ndisplay(e)\n\nfoo(otp=1)\n</code></pre> <pre><code>&lt;ExceptionInfo Exit() tblen=2&gt;\n\n1.0\n</code></pre> <p>source</p>"},{"location":"CLI_Helper/#get_phone_registration_status","title":"get_phone_registration_status","text":"<pre><code> get_phone_registration_status (xs:Dict[str,Union[str,bool]])\n</code></pre> <p>Get the phone number registration status</p> <p>Args: xs: A dict containing the user details</p> <p>Returns: None, if the user phone number is registred and validated. Else, a message containing the current state of the phone number registration process.</p> <pre><code>xs = {\n    \"username\": \"random_username\",\n    \"first_name\": \"random-username\",\n    \"last_name\": \"random-\",\n    \"email\": \"random_user@mail.com\",\n    \"subscription_type\": \"small\",\n    \"super_user\": False,\n    \"is_mfa_active\": False,\n    \"phone_number\": \"441111111111\",\n    \"is_phone_number_verified\": True,\n    \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n    \"disabled\": False,\n    \"created\": \"2022-09-14T08:54:54\",\n}\n\nactual = get_phone_registration_status(xs)\nexpected = None\n\ndisplay(actual)\nassert actual == expected\n</code></pre> <pre><code>None\n</code></pre> <pre><code>xs = {\n    \"username\": \"random_username\",\n    \"first_name\": \"random-username\",\n    \"last_name\": \"random-\",\n    \"email\": \"random_user@mail.com\",\n    \"subscription_type\": \"small\",\n    \"super_user\": False,\n    \"is_mfa_active\": False,\n    \"phone_number\": None,\n    \"is_phone_number_verified\": False,\n    \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n    \"disabled\": False,\n    \"created\": \"2022-09-14T08:54:54\",\n}\n\nactual = get_phone_registration_status(xs)\nexpected = PHONE_REGISTRATION_STATUS[\"not_registered\"]\n\ndisplay(actual)\nassert actual == expected\n</code></pre> <pre><code>'\\n\\nPlease take a moment to register and verify your phone number. If you forget your password or cannot access your account, you can request the OTP to your registered phone number to regain access. \\nTo register a new phone number, please set the token in the AIRT_SERVICE_TOKEN environment variable and execute the below command with your phone number and follow the on-screen instructions:\\n\\nairt user register-phone-number --phone-number'\n</code></pre> <pre><code>xs = {\n    \"username\": \"random_username\",\n    \"first_name\": \"random-username\",\n    \"last_name\": \"random-\",\n    \"email\": \"random_user@mail.com\",\n    \"subscription_type\": \"small\",\n    \"super_user\": False,\n    \"is_mfa_active\": False,\n    \"phone_number\": 441111111111,\n    \"is_phone_number_verified\": False,\n    \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n    \"disabled\": False,\n    \"created\": \"2022-09-14T08:54:54\",\n}\n\nactual = get_phone_registration_status(xs)\nexpected = PHONE_REGISTRATION_STATUS[\"not_validated\"]\n\ndisplay(actual)\nassert actual == expected\n</code></pre> <pre><code>'\\n\\nYour phone number is added to your account but not yet verified. Please take a moment to register and verify your phone number. If you forget your password or cannot access your account, you can request the OTP to your registered phone number to regain access. \\nTo register a new phone number, please set the token in the AIRT_SERVICE_TOKEN environment variable and execute the below command with your phone number and follow the on-screen instructions:\\n\\nairt user register-phone-number\\n\\nIn case you want to register a new number, please execute the below command with your new phone number:\\n\\nairt user register-phone-number --phone-number'\n</code></pre>"},{"location":"CLI_Key/","title":"CLI_Key","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport random\nimport string\nfrom contextlib import contextmanager\n\nimport pytest\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._cli.user import app as user_cli_app\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_TOKEN, SERVICE_USERNAME\n</code></pre> <pre><code>RANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>assert \"**AIRT_SERVICE_TOKEN**\" in app.info.help\nassert \"airt services with it\" in app.info.help\nassert \"**airt api-key**\" in app.info.help\n\napp.info.help\n</code></pre> <pre><code>'A set of commands for managing the ApiKeys in the server.\\n        \\n        Both the ApiKey and the token can be used for accessing the airt services. However, there is a \\n        slight difference in generating and managing the two.\\n        \\n        For generating the ApiKey, you first need to get the developer token. Please refer to **airt token** command documentation to generate one.\\n        \\n        After logging in with your developer token, you can create any number of new ApiKeys and can set an \\n        expiration date individually. You can also access other commands available as part of **airt api-key** sub-command to \\n        list, revoke the ApiKeys at any time.\\n\\n        Once the new API key is generated, please set it in the **AIRT_SERVICE_TOKEN** environment variable to start accessing the airt services with it.'\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_token = None\n\n\n@contextmanager\ndef set_airt_service_token_envvar():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with set_airt_service_token_envvar():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code># Tests for APIKey create\n\n# Testing negative scenario\n\nresult = runner.invoke(\n    app,\n    [\"test\", \"-e\", 365],\n)\n\ndisplay(result.stdout)\nassert f\"KeyError: The environment variable '{SERVICE_TOKEN}' is not set.\" in str(\n    result.stdout\n)\n</code></pre> <pre><code>\"KeyError: The environment variable 'AIRT_SERVICE_TOKEN' is not set.\\n\\nPlease run the command 'airt token' to get the application token and set it in the environment variable `AIRT_SERVICE_TOKEN`.\\n\\nTry 'airt token --help' for help.\\n\"\n</code></pre> <pre><code>def generate_random_name(size=15, chars=string.ascii_uppercase + string.digits):\n    return \"\".join(random.choice(chars) for _ in range(size))\n\n\nassert len(generate_random_name()) == 15\nassert type(generate_random_name()) == str\n</code></pre> <pre><code># Tests for APIKey create\n\n# Testing positive scenario and negative scenario\n\n\ndef mask(s: str) -&gt; str:\n    return \"*\" * len(s)\n\n\nkey_name = generate_random_name()\nwith set_airt_service_token_envvar():\n    # Testing without quite flag\n    result = runner.invoke(\n        app,\n        [key_name, \"-e\", 365],\n    )\n\n    access_token = result.stdout[:-1]\n    masked_token = mask(access_token.split(\": \")[1])\n\n    display(f\"{masked_token=}\")\n\n    assert result.exit_code == 0\n    assert len(access_token) &gt;= 127  # maybe\n    assert \"Access Token\" in str(result.stdout)\n\n    # Testing with quite flag\n    result = runner.invoke(\n        app,\n        [generate_random_name(), \"-e\", 365, \"-q\"],\n    )\n\n    access_token = result.stdout[:-1]\n    masked_token = mask(access_token)\n\n    display(f\"{masked_token=}\")\n\n    assert result.exit_code == 0\n    assert len(access_token) &gt;= 127  # maybe\n    assert \"Access Token\" not in str(result.stdout)\n\n    # Negative scenario: Creating key without setting expiration date\n    result = runner.invoke(\n        app,\n        [generate_random_name(), \"-q\"],\n    )\n\n    access_token = result.stdout[:-1]\n    masked_token = mask(access_token)\n    display(f\"{masked_token=}\")\n\n    assert result.exit_code == 0\n    assert len(access_token) &gt;= 110, len(access_token)  # maybe\n    assert \"Access Token\" not in str(result.stdout)\n\n    # Negative scenario: Passing existing key name\n    result = runner.invoke(\n        app,\n        [key_name, \"-e\", 365, \"-q\"],\n    )\n\n    assert result.exit_code == 1\n    assert \"An Api-key with the same name already exists\" in str(result.stdout)\n    display(result.stdout)\n\n    # Negative scenario: Passing OTP for non-mfa user existing key name\n    random_otp = \"123456\"\n    result = runner.invoke(\n        app,\n        [generate_random_name(), \"-e\", 365, \"-q\", \"--otp\", random_otp],\n    )\n\n    assert result.exit_code == 1\n    assert \"MFA is not activated for the account\" in str(result.stdout)\n    display(result.stdout)\n</code></pre> <pre><code>\"masked_token='*************************************************************************************************************************************************************************************************'\"\n\n\"masked_token='*************************************************************************************************************************************************************************************************'\"\n\n\"masked_token='***************************************************************************************************************************************************************************'\"\n\n'Error: An Api-key with the same name already exists\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># Tests for APIKey ls\n\n\n# Testing positive scenario\ndef get_values_from_result(result) -&gt; List[Union[int, str]]:\n    return [val for val in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    # Testing without quite flag\n    result = runner.invoke(app, [\"ls\"])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n\n    # With quiet\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n    ids = get_values_from_result(result)\n    assert len(ids) &gt; 0\n</code></pre> <pre><code>'uuid                                  name             created         expiry              disabled\\n76a90be6-4535-4c70-ac2a-16df432913ca  RKO4OSLE9DITOFO  24 minutes ago  None                False\\n35a317ad-0fa1-4e76-ab36-d60a9a31c235  7XIE331PO1OWE71  24 minutes ago  5 months ago        False\\n6146ab3a-a49b-4ae3-a628-b6a31583b2d2  DNAK3ICMGDAFQ1K  24 minutes ago  None                False\\n3cc3ff1c-374a-4090-bb78-742e5b3aef0a  8TMEGHX4WXTDGJZ  24 minutes ago  None                False\\n510edef2-244c-49c8-b8f5-b2c3b500c51b  YT9B6CT1797HNYP  24 minutes ago  None                False\\ne4946c54-756e-4e74-9db5-22270bd1c025  SFFJK74O7N32MOR  24 minutes ago  None                False\\n4313caa8-8faa-42ab-8f46-bd6669d96aad  IBK7RGHPPG05S4X  24 minutes ago  None                False\\n6ad2a881-bfad-4acb-9d0b-13650e161051  R9JBTBYQF74FSVT  24 minutes ago  None                False\\na7bfc801-649e-4574-997f-0dc57bd4e8b5  2BO0JKANPJ46HID  24 minutes ago  None                False\\n00d6b61a-62f9-425a-a514-6383b9ffb392  28YDMEXXMUSANLT  24 minutes ago  None                False\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32  I9EMJL0SJ919UEX  24 minutes ago  None                False\\n78837644-436a-4e4f-82d0-c875d8a72437  JBCQS7CWVT4GM30  24 minutes ago  None                False\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e  A1N6OAMDI597IYE  24 minutes ago  None                False\\n92b2f7d5-810c-4cb0-b793-2d8932ded032  89HJKCDZUSVQQLS  now             11 months from now  False\\na2eaa375-a21e-47cb-8e84-eb430da6c280  MF9MJAGCT1SEBKO  now             11 months from now  False\\n10af3501-3cbb-4735-83e7-db058746efbd  5STC1FGTHT0BB8K  now             None                False\\n'\n\n'76a90be6-4535-4c70-ac2a-16df432913ca\\n35a317ad-0fa1-4e76-ab36-d60a9a31c235\\n6146ab3a-a49b-4ae3-a628-b6a31583b2d2\\n3cc3ff1c-374a-4090-bb78-742e5b3aef0a\\n510edef2-244c-49c8-b8f5-b2c3b500c51b\\ne4946c54-756e-4e74-9db5-22270bd1c025\\n4313caa8-8faa-42ab-8f46-bd6669d96aad\\n6ad2a881-bfad-4acb-9d0b-13650e161051\\na7bfc801-649e-4574-997f-0dc57bd4e8b5\\n00d6b61a-62f9-425a-a514-6383b9ffb392\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32\\n78837644-436a-4e4f-82d0-c875d8a72437\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e\\n92b2f7d5-810c-4cb0-b793-2d8932ded032\\na2eaa375-a21e-47cb-8e84-eb430da6c280\\n10af3501-3cbb-4735-83e7-db058746efbd\\n'\n</code></pre> <pre><code># Tests for APIKey ls\n# Tests using --format flag\n\nwith set_airt_service_token_envvar():\n    # Testing format flag\n    format_str = \"{'name': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n    display(result.stdout)\n    key_names = get_values_from_result(result)\n\n    assert result.exit_code == 0\n    assert len(key_names) &gt; 0\n\n    # Testing format flag\n    format_str = \"{'name': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n\n    # Testing format flag\n    format_str = \"{'names': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n    display(result.stdout)\n\n    assert result.exit_code == 1\n    assert \"The following columns are not valid\" in str(result.stdout)\n</code></pre> <pre><code>'RKO4OSLE9DITOFO\\n7XIE331PO1OWE71\\nDNAK3ICMGDAFQ1K\\n8TMEGHX4WXTDGJZ\\nYT9B6CT1797HNYP\\nSFFJK74O7N32MOR\\nIBK7RGHPPG05S4X\\nR9JBTBYQF74FSVT\\n2BO0JKANPJ46HID\\n28YDMEXXMUSANLT\\nI9EMJL0SJ919UEX\\nJBCQS7CWVT4GM30\\nA1N6OAMDI597IYE\\n89HJKCDZUSVQQLS\\nMF9MJAGCT1SEBKO\\n5STC1FGTHT0BB8K\\n'\n\n'name             uuid\\nRKO4OSLE9DITOFO  76a90be6-4535-4c70-ac2a-16df432913ca\\n7XIE331PO1OWE71  35a317ad-0fa1-4e76-ab36-d60a9a31c235\\nDNAK3ICMGDAFQ1K  6146ab3a-a49b-4ae3-a628-b6a31583b2d2\\n8TMEGHX4WXTDGJZ  3cc3ff1c-374a-4090-bb78-742e5b3aef0a\\nYT9B6CT1797HNYP  510edef2-244c-49c8-b8f5-b2c3b500c51b\\nSFFJK74O7N32MOR  e4946c54-756e-4e74-9db5-22270bd1c025\\nIBK7RGHPPG05S4X  4313caa8-8faa-42ab-8f46-bd6669d96aad\\nR9JBTBYQF74FSVT  6ad2a881-bfad-4acb-9d0b-13650e161051\\n2BO0JKANPJ46HID  a7bfc801-649e-4574-997f-0dc57bd4e8b5\\n28YDMEXXMUSANLT  00d6b61a-62f9-425a-a514-6383b9ffb392\\nI9EMJL0SJ919UEX  6e68750d-7c2b-49f4-b2fb-0c3795ec4a32\\nJBCQS7CWVT4GM30  78837644-436a-4e4f-82d0-c875d8a72437\\nA1N6OAMDI597IYE  835281e3-c2e1-48aa-b9d6-1e39a5f4935e\\n89HJKCDZUSVQQLS  92b2f7d5-810c-4cb0-b793-2d8932ded032\\nMF9MJAGCT1SEBKO  a2eaa375-a21e-47cb-8e84-eb430da6c280\\n5STC1FGTHT0BB8K  10af3501-3cbb-4735-83e7-db058746efbd\\n'\n\n\"The following columns are not valid: {'names'}. Only the following columns are valid: {'disabled', 'uuid', 'created', 'name', 'expiry'}\\nAn example of a valid formatting string: {'uuid': '{}', 'name': '{}', 'created': '{}', 'expiry': '{}', 'disabled': '{}'}\\n\"\n</code></pre> <pre><code># Tests for APIKeys ls\n# Testing positive scenario.\n# Testing by passing different values for  limit\n\n\nwith set_airt_service_token_envvar():\n    for limit in [1, 10, 1000]:\n        offset = 1\n        result = runner.invoke(app, [\"ls\", \"--offset\", offset, \"--limit\", limit, \"-q\"])\n\n        assert result.exit_code == 0\n\n        ids = get_values_from_result(result)\n        display(f\"{ids=}\")\n        assert limit &gt;= len(ids) &gt; 0\n</code></pre> <pre><code>\"ids=['35a317ad-0fa1-4e76-ab36-d60a9a31c235']\"\n\n\"ids=['35a317ad-0fa1-4e76-ab36-d60a9a31c235', '6146ab3a-a49b-4ae3-a628-b6a31583b2d2', '3cc3ff1c-374a-4090-bb78-742e5b3aef0a', '510edef2-244c-49c8-b8f5-b2c3b500c51b', 'e4946c54-756e-4e74-9db5-22270bd1c025', '4313caa8-8faa-42ab-8f46-bd6669d96aad', '6ad2a881-bfad-4acb-9d0b-13650e161051', 'a7bfc801-649e-4574-997f-0dc57bd4e8b5', '00d6b61a-62f9-425a-a514-6383b9ffb392', '6e68750d-7c2b-49f4-b2fb-0c3795ec4a32']\"\n\n\"ids=['35a317ad-0fa1-4e76-ab36-d60a9a31c235', '6146ab3a-a49b-4ae3-a628-b6a31583b2d2', '3cc3ff1c-374a-4090-bb78-742e5b3aef0a', '510edef2-244c-49c8-b8f5-b2c3b500c51b', 'e4946c54-756e-4e74-9db5-22270bd1c025', '4313caa8-8faa-42ab-8f46-bd6669d96aad', '6ad2a881-bfad-4acb-9d0b-13650e161051', 'a7bfc801-649e-4574-997f-0dc57bd4e8b5', '00d6b61a-62f9-425a-a514-6383b9ffb392', '6e68750d-7c2b-49f4-b2fb-0c3795ec4a32', '78837644-436a-4e4f-82d0-c875d8a72437', '835281e3-c2e1-48aa-b9d6-1e39a5f4935e', '92b2f7d5-810c-4cb0-b793-2d8932ded032', 'a2eaa375-a21e-47cb-8e84-eb430da6c280', '10af3501-3cbb-4735-83e7-db058746efbd']\"\n</code></pre> <pre><code># Tests for APIKeys ls\n# Testing positive scenario.\n# Testing by passing large value for offset.\n\nwith set_airt_service_token_envvar():\n    limit = 10\n    offset = 1_000_000\n    result = runner.invoke(app, [\"ls\", \"--offset\", offset, \"--limit\", limit])\n\n    assert result.exit_code == 0\n\n    display(result.stdout)\n</code></pre> <pre><code>'uuid    name    created    expiry    disabled\\n'\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_super_service_token = None\n\n\n@contextmanager\ndef set_airt_super_service_token_envvar():\n    global _airt_super_service_token\n    if _airt_super_service_token is None:\n        display(\"_airt_super_service_token is None, getting a token...\")\n\n        username = os.environ[\"AIRT_SERVICE_SUPER_USER\"]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_super_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_super_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n\n\nwith set_airt_super_service_token_envvar():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_super_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code># Tests for APIKey ls\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(user_cli_app, [\"details\", \"-q\"])\n    other_user_uuid = result.stdout.replace(\"\\n\", \"\")\n    display(other_user_uuid)\n\n    result = runner.invoke(\n        user_cli_app,\n        [\"details\", \"--user\", other_user_uuid, \"--format\", \"{'username': '{}'}\"],\n    )\n    other_user_name = result.stdout[:-1]\n\n# Testing Super user scenarios\nwith set_airt_super_service_token_envvar():\n    # Testing without quite flag\n    result = runner.invoke(app, [\"ls\", \"--user\", other_user_uuid])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n\n    # With quiet\n    result = runner.invoke(app, [\"ls\", \"-q\", \"--user\", other_user_name])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n    ids = get_values_from_result(result)\n    display(f\"{ids=}\")\n    assert len(ids) &gt; 0\n</code></pre> <pre><code>'d12065d3-48cb-4632-a4cc-db11b843399a'\n\n'uuid                                  name             created         expiry              disabled\\n76a90be6-4535-4c70-ac2a-16df432913ca  RKO4OSLE9DITOFO  24 minutes ago  None                False\\n35a317ad-0fa1-4e76-ab36-d60a9a31c235  7XIE331PO1OWE71  24 minutes ago  5 months ago        False\\n6146ab3a-a49b-4ae3-a628-b6a31583b2d2  DNAK3ICMGDAFQ1K  24 minutes ago  None                False\\n3cc3ff1c-374a-4090-bb78-742e5b3aef0a  8TMEGHX4WXTDGJZ  24 minutes ago  None                False\\n510edef2-244c-49c8-b8f5-b2c3b500c51b  YT9B6CT1797HNYP  24 minutes ago  None                False\\ne4946c54-756e-4e74-9db5-22270bd1c025  SFFJK74O7N32MOR  24 minutes ago  None                False\\n4313caa8-8faa-42ab-8f46-bd6669d96aad  IBK7RGHPPG05S4X  24 minutes ago  None                False\\n6ad2a881-bfad-4acb-9d0b-13650e161051  R9JBTBYQF74FSVT  24 minutes ago  None                False\\na7bfc801-649e-4574-997f-0dc57bd4e8b5  2BO0JKANPJ46HID  24 minutes ago  None                False\\n00d6b61a-62f9-425a-a514-6383b9ffb392  28YDMEXXMUSANLT  24 minutes ago  None                False\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32  I9EMJL0SJ919UEX  24 minutes ago  None                False\\n78837644-436a-4e4f-82d0-c875d8a72437  JBCQS7CWVT4GM30  24 minutes ago  None                False\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e  A1N6OAMDI597IYE  24 minutes ago  None                False\\n92b2f7d5-810c-4cb0-b793-2d8932ded032  89HJKCDZUSVQQLS  a second ago    11 months from now  False\\na2eaa375-a21e-47cb-8e84-eb430da6c280  MF9MJAGCT1SEBKO  a second ago    11 months from now  False\\n10af3501-3cbb-4735-83e7-db058746efbd  5STC1FGTHT0BB8K  a second ago    None                False\\n'\n\n'76a90be6-4535-4c70-ac2a-16df432913ca\\n35a317ad-0fa1-4e76-ab36-d60a9a31c235\\n6146ab3a-a49b-4ae3-a628-b6a31583b2d2\\n3cc3ff1c-374a-4090-bb78-742e5b3aef0a\\n510edef2-244c-49c8-b8f5-b2c3b500c51b\\ne4946c54-756e-4e74-9db5-22270bd1c025\\n4313caa8-8faa-42ab-8f46-bd6669d96aad\\n6ad2a881-bfad-4acb-9d0b-13650e161051\\na7bfc801-649e-4574-997f-0dc57bd4e8b5\\n00d6b61a-62f9-425a-a514-6383b9ffb392\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32\\n78837644-436a-4e4f-82d0-c875d8a72437\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e\\n92b2f7d5-810c-4cb0-b793-2d8932ded032\\na2eaa375-a21e-47cb-8e84-eb430da6c280\\n10af3501-3cbb-4735-83e7-db058746efbd\\n'\n\n\"ids=['76a90be6-4535-4c70-ac2a-16df432913ca', '35a317ad-0fa1-4e76-ab36-d60a9a31c235', '6146ab3a-a49b-4ae3-a628-b6a31583b2d2', '3cc3ff1c-374a-4090-bb78-742e5b3aef0a', '510edef2-244c-49c8-b8f5-b2c3b500c51b', 'e4946c54-756e-4e74-9db5-22270bd1c025', '4313caa8-8faa-42ab-8f46-bd6669d96aad', '6ad2a881-bfad-4acb-9d0b-13650e161051', 'a7bfc801-649e-4574-997f-0dc57bd4e8b5', '00d6b61a-62f9-425a-a514-6383b9ffb392', '6e68750d-7c2b-49f4-b2fb-0c3795ec4a32', '78837644-436a-4e4f-82d0-c875d8a72437', '835281e3-c2e1-48aa-b9d6-1e39a5f4935e', '92b2f7d5-810c-4cb0-b793-2d8932ded032', 'a2eaa375-a21e-47cb-8e84-eb430da6c280', '10af3501-3cbb-4735-83e7-db058746efbd']\"\n</code></pre> <pre><code># tests for APIKey details\nwith set_airt_service_token_envvar():\n    # List the existing API Keys\n    format_str = \"{'name': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n\n    assert result.exit_code == 0\n    key_names = get_values_from_result(result)\n\n    # Get details for the first API Key\n    first_key = key_names[0]\n    result = runner.invoke(app, [\"details\", first_key])\n\n    display(result.stdout)\n    assert result.exit_code == 0\n\n    # Get details for the first API Key\n    first_key = key_names[0]\n    format_str = \"{'name': '{}'}\"\n    result = runner.invoke(app, [\"details\", first_key, \"--format\", format_str])\n\n    display(result.stdout)\n    assert result.exit_code == 0\n\n    # Get details for the first API Key\n    first_key = key_names[0]\n    format_str = \"{'name': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"details\", first_key, \"--format\", format_str])\n\n    display(result.stdout)\n    assert result.exit_code == 0\n</code></pre> <pre><code>'uuid                                  name             created         expiry    disabled\\n76a90be6-4535-4c70-ac2a-16df432913ca  RKO4OSLE9DITOFO  24 minutes ago  None      False\\n'\n\n'RKO4OSLE9DITOFO\\n'\n\n'name             uuid\\nRKO4OSLE9DITOFO  76a90be6-4535-4c70-ac2a-16df432913ca\\n'\n</code></pre> <pre><code># Tests for details\n# Testing negative scenario. Passing invalie API key id\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(app, [\"details\", RANDOM_UUID_FOR_TESTING])\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n    assert \"No such apikey\" in result.stdout\n</code></pre> <pre><code>'Error: No such apikey or not enough authorization to access the apikey.\\n'\n</code></pre> <pre><code># tests for APIKey revoke\n# revoking key by name and id\n\nwith set_airt_service_token_envvar():\n    # List the existing API Keys\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n    assert result.exit_code == 0\n    key_ids = get_values_from_result(result)\n\n    # List the existing API Keys\n    format_str = \"{'name': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n\n    assert result.exit_code == 0\n    key_names = get_values_from_result(result)\n\n    # Revoking the first API Key\n    format_str = \"{'name': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(\n        app, [\"revoke\", key_ids[0], key_names[1], key_names[2], \"--format\", format_str]\n    )\n\n    display(result.stdout)\n    assert result.exit_code == 0\n</code></pre> <pre><code>'name             uuid\\nRKO4OSLE9DITOFO  76a90be6-4535-4c70-ac2a-16df432913ca\\n7XIE331PO1OWE71  35a317ad-0fa1-4e76-ab36-d60a9a31c235\\nDNAK3ICMGDAFQ1K  6146ab3a-a49b-4ae3-a628-b6a31583b2d2\\n'\n</code></pre> <pre><code># tests for APIKey revoke\nwith set_airt_service_token_envvar():\n    # Create sample keys\n    for i in range(10):\n        result = runner.invoke(\n            app,\n            [\"create\", generate_random_name(), \"-e\", 365],\n        )\n\n    # List the existing API Keys\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n\n    assert result.exit_code == 0\n    ids = get_values_from_result(result)\n\n    # Revoking the first API Key\n    first_key = ids[0]\n    format_str = \"{'name': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"revoke\", str(first_key), \"--format\", format_str])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n\n    # Running ls command with default settings. The deleted kwy should not be present in the result\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n    ids = get_values_from_result(result)\n\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert first_key not in ids\n\n    # Running ls command with include_disabled. The deleted kwy should be present in the result\n    result = runner.invoke(app, [\"ls\", \"-l\", \"1000\", \"-q\", \"--disabled\"])\n    ids = get_values_from_result(result)\n\n    display(f\"{ids=}\")\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert first_key in ids, first_key\n</code></pre> <pre><code>'name             uuid\\n8TMEGHX4WXTDGJZ  3cc3ff1c-374a-4090-bb78-742e5b3aef0a\\n'\n\n'510edef2-244c-49c8-b8f5-b2c3b500c51b\\ne4946c54-756e-4e74-9db5-22270bd1c025\\n4313caa8-8faa-42ab-8f46-bd6669d96aad\\n6ad2a881-bfad-4acb-9d0b-13650e161051\\na7bfc801-649e-4574-997f-0dc57bd4e8b5\\n00d6b61a-62f9-425a-a514-6383b9ffb392\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32\\n78837644-436a-4e4f-82d0-c875d8a72437\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e\\n92b2f7d5-810c-4cb0-b793-2d8932ded032\\na2eaa375-a21e-47cb-8e84-eb430da6c280\\n10af3501-3cbb-4735-83e7-db058746efbd\\n12760028-3a05-47d3-acdc-fb650c6555c9\\n804deb8b-8612-41db-a452-cbbfd87ad77d\\n435f4338-5584-4ff4-b1ed-c8913b4d12d0\\n1ac1b8d5-60f9-4c8f-a90f-050577e52792\\n3927ceee-a4cb-43e4-9bdd-c6d607ee5060\\nddeb9cb8-de35-4109-ac8e-6f863e3720ec\\n06c4a094-5ee3-4c2b-adf4-c5634edf488f\\nf1f62f0e-e8ce-4504-ae7d-4e9a8aa4d691\\na3555e15-8d40-4b24-8858-622ca60b1e30\\n216c8d62-9a3c-495e-b0ab-7edea1d1aff6\\n'\n\n\"ids=['3d10e7f1-e2cf-4386-9fc5-a32f6af9514f', 'fa6aefe0-e347-40fe-9a40-c3ff203ce3c2', 'db1aad28-f95d-457d-82cb-24aaddc96d56', '7810f834-733f-4189-8c14-bf034eef750b', '8dad6cee-d5de-4409-836a-fc3f0f06cd2a', 'd2eda1ba-5463-49e3-a815-4bc033f02703', '6e4f8e5e-5a43-40e8-baa5-4af7ebfd2333', '9b0cab3d-e932-475b-bb93-74dfec41be87', 'd3c5e334-ce68-4444-ad3c-ed4f2c738a88', '76a90be6-4535-4c70-ac2a-16df432913ca', '35a317ad-0fa1-4e76-ab36-d60a9a31c235', '6146ab3a-a49b-4ae3-a628-b6a31583b2d2', '3cc3ff1c-374a-4090-bb78-742e5b3aef0a', '510edef2-244c-49c8-b8f5-b2c3b500c51b', 'e4946c54-756e-4e74-9db5-22270bd1c025', '4313caa8-8faa-42ab-8f46-bd6669d96aad', '6ad2a881-bfad-4acb-9d0b-13650e161051', 'a7bfc801-649e-4574-997f-0dc57bd4e8b5', '00d6b61a-62f9-425a-a514-6383b9ffb392', '6e68750d-7c2b-49f4-b2fb-0c3795ec4a32', '78837644-436a-4e4f-82d0-c875d8a72437', '835281e3-c2e1-48aa-b9d6-1e39a5f4935e', '92b2f7d5-810c-4cb0-b793-2d8932ded032', 'a2eaa375-a21e-47cb-8e84-eb430da6c280', '10af3501-3cbb-4735-83e7-db058746efbd', '12760028-3a05-47d3-acdc-fb650c6555c9', '804deb8b-8612-41db-a452-cbbfd87ad77d', '435f4338-5584-4ff4-b1ed-c8913b4d12d0', '1ac1b8d5-60f9-4c8f-a90f-050577e52792', '3927ceee-a4cb-43e4-9bdd-c6d607ee5060', 'ddeb9cb8-de35-4109-ac8e-6f863e3720ec', '06c4a094-5ee3-4c2b-adf4-c5634edf488f', 'f1f62f0e-e8ce-4504-ae7d-4e9a8aa4d691', 'a3555e15-8d40-4b24-8858-622ca60b1e30', '216c8d62-9a3c-495e-b0ab-7edea1d1aff6']\"\n\n'3d10e7f1-e2cf-4386-9fc5-a32f6af9514f\\nfa6aefe0-e347-40fe-9a40-c3ff203ce3c2\\ndb1aad28-f95d-457d-82cb-24aaddc96d56\\n7810f834-733f-4189-8c14-bf034eef750b\\n8dad6cee-d5de-4409-836a-fc3f0f06cd2a\\nd2eda1ba-5463-49e3-a815-4bc033f02703\\n6e4f8e5e-5a43-40e8-baa5-4af7ebfd2333\\n9b0cab3d-e932-475b-bb93-74dfec41be87\\nd3c5e334-ce68-4444-ad3c-ed4f2c738a88\\n76a90be6-4535-4c70-ac2a-16df432913ca\\n35a317ad-0fa1-4e76-ab36-d60a9a31c235\\n6146ab3a-a49b-4ae3-a628-b6a31583b2d2\\n3cc3ff1c-374a-4090-bb78-742e5b3aef0a\\n510edef2-244c-49c8-b8f5-b2c3b500c51b\\ne4946c54-756e-4e74-9db5-22270bd1c025\\n4313caa8-8faa-42ab-8f46-bd6669d96aad\\n6ad2a881-bfad-4acb-9d0b-13650e161051\\na7bfc801-649e-4574-997f-0dc57bd4e8b5\\n00d6b61a-62f9-425a-a514-6383b9ffb392\\n6e68750d-7c2b-49f4-b2fb-0c3795ec4a32\\n78837644-436a-4e4f-82d0-c875d8a72437\\n835281e3-c2e1-48aa-b9d6-1e39a5f4935e\\n92b2f7d5-810c-4cb0-b793-2d8932ded032\\na2eaa375-a21e-47cb-8e84-eb430da6c280\\n10af3501-3cbb-4735-83e7-db058746efbd\\n12760028-3a05-47d3-acdc-fb650c6555c9\\n804deb8b-8612-41db-a452-cbbfd87ad77d\\n435f4338-5584-4ff4-b1ed-c8913b4d12d0\\n1ac1b8d5-60f9-4c8f-a90f-050577e52792\\n3927ceee-a4cb-43e4-9bdd-c6d607ee5060\\nddeb9cb8-de35-4109-ac8e-6f863e3720ec\\n06c4a094-5ee3-4c2b-adf4-c5634edf488f\\nf1f62f0e-e8ce-4504-ae7d-4e9a8aa4d691\\na3555e15-8d40-4b24-8858-622ca60b1e30\\n216c8d62-9a3c-495e-b0ab-7edea1d1aff6\\n'\n</code></pre> <pre><code># Tests for revoke\n# Testing negative scenario. Passing invalie API key id\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(app, [\"revoke\", RANDOM_UUID_FOR_TESTING])\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n    assert \"No such apikey\" in result.stdout\n\n    # Testing negative scenario. Passing otp for non-mfa user\n    random_otp = 123456\n    result = runner.invoke(\n        app, [\"revoke\", RANDOM_UUID_FOR_TESTING, \"--otp\", random_otp]\n    )\n\n    display(result.stdout)\n    assert \"MFA is not activated for the account\" in str(result.stdout)\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Error: No such apikey or not enough authorization to access the apikey.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># Super user revoking other user's api_key\nwith set_airt_service_token_envvar():\n    # List the existing API Keys\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n\n    assert result.exit_code == 0\n    ids = get_values_from_result(result)\n\n    # Get details for the first API Key\n    expected_key_id = ids[0]\n\n    # get user id\n    result = runner.invoke(user_cli_app, [\"details\", \"-q\"])\n    other_user_uuid = result.stdout.replace(\"\\n\", \"\")\n\n\nwith set_airt_super_service_token_envvar():\n    result = runner.invoke(\n        app, [\"revoke\", str(expected_key_id), \"--user\", other_user_uuid, \"-q\"]\n    )\n    display(result.stdout)\n    actual_key_id = result.stdout\n    assert result.exit_code == 0\n    assert actual_key_id == f\"{expected_key_id}\\n\"\n</code></pre> <pre><code>'510edef2-244c-49c8-b8f5-b2c3b500c51b\\n'\n</code></pre> <pre><code># revoke multiple keys\n\nwith set_airt_service_token_envvar():\n    # Creating sample keys\n    result = runner.invoke(\n        app,\n        [\"create\", generate_random_name(), \"-e\", 365],\n    )\n    result = runner.invoke(\n        app,\n        [\"create\", generate_random_name(), \"-e\", 365],\n    )\n    # List the existing API Keys\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n\n    assert result.exit_code == 0\n    ids = get_values_from_result(result)\n\n    # Get details for the first API Key\n    first_key = ids[0]\n    second_key = ids[1]\n    result = runner.invoke(app, [\"revoke\", first_key, second_key])\n    display(result.output)\n\n    assert result.exit_code == 0\n    assert str(first_key) in result.stdout\n    assert str(second_key) in result.stdout\n</code></pre> <pre><code>'uuid                                  name             created         expiry    disabled\\ne4946c54-756e-4e74-9db5-22270bd1c025  SFFJK74O7N32MOR  24 minutes ago  None      True\\n4313caa8-8faa-42ab-8f46-bd6669d96aad  IBK7RGHPPG05S4X  24 minutes ago  None      True\\n'\n</code></pre>"},{"location":"CLI_Model/","title":"CLI_Model","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom datetime import timedelta\n\nimport pytest\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_TOKEN, SERVICE_USERNAME\nfrom airt.client import Client, DataBlob\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>_airt_service_token = None\n\n\n@contextmanager\ndef set_airt_service_token_envvar():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with set_airt_service_token_envvar():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>_model = None\n\n\n@contextmanager\ndef generate_model(force_create: bool = False):\n    global _model\n\n    if _model is None or force_create:\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n        )\n\n        db.progress_bar()\n\n        ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{ds.uuid=}\")\n\n        ds.progress_bar()\n\n        _model = ds.train(\n            client_column=\"user_id\",\n            target_column=\"category_code\",\n            target=\"*purchase\",\n            predict_after=timedelta(hours=3),\n        )\n\n        _model.wait()\n\n    yield _model\n</code></pre> <pre><code>def assert_has_help(xs: List[str]):\n    result = runner.invoke(app, xs + [\"--help\"])\n\n    display(result.stdout)\n    assert \" \".join(xs) in result.stdout\n</code></pre> <pre><code>assert_has_help([\"ls\"])\n</code></pre> <pre><code>'Usage: ls [OPTIONS]\\n\\n  Return the list of models.\\n\\nOptions:\\n  -o, --offset INTEGER            The number of models to offset at the\\n                                  beginning. If None, then the default value\\n                                  **0** will be used.  [default: 0]\\n  -l, --limit INTEGER             The maximum number of models to return from\\n                                  the server. If None, then the default value\\n                                  **100** will be used.  [default: 100]\\n  --disabled                      If set to **True**, then only the deleted\\n                                  models will be returned. Else, the default\\n                                  value **False** will be used to return only\\n                                  the list of active models.\\n  --completed                     If set to **True**, then only the models that\\n                                  are successfully downloaded to the server will\\n                                  be returned. Else, the default value **False**\\n                                  will be used to return all the models.\\n  -f, --format TEXT               Format output and show only the given\\n                                  column(s) values.\\n  -q, --quiet                     Output only uuids of model separated by space\\n  -d, --debug                     Set logger level to DEBUG and output\\n                                  everything.\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for model_ls\n# Testing positive scenario. Saving the token in env variable\n\n\ndef get_ids_from_result(result) -&gt; List[int]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        # Without quiet\n        result = runner.invoke(app)\n        display(result.stdout)\n\n        assert \"ready\" in result.stdout\n        assert result.exit_code == 0\n\n        # With format\n        format_str = \"{'model_uuid': '{}', 'created': '{}'}\"\n        result = runner.invoke(app, [\"--format\", format_str])\n        display(result.stdout)\n\n        assert result.exit_code == 0\n\n        # With quiet\n        result = runner.invoke(app, [\"-q\"])\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        ids = get_ids_from_result(result)\n        display(f\"{ids=}\")\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.19s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.37s/it]\n\n\"ds.uuid='a2a63f8a-06f1-49e4-bb22-15979ecaf59a'\"\n\n'model_uuid                            created         ready\\nb3b17f4c-2f00-4f51-9841-5dac52bfea61  2 hours ago     True\\n4b4b3909-671f-43f9-b868-d7d70a790e39  2 hours ago     True\\n5e80898d-a2a0-4341-8412-157086638d43  50 minutes ago  True\\n5c9b02a4-23a0-4743-b163-ad74f217d685  28 minutes ago  True\\n33dfede5-9913-4cf0-8029-e3ed1972a7da  23 minutes ago  True\\n38b96e82-43a4-4d6c-9275-efde8f820815  23 minutes ago  True\\ndc193688-c4a1-4f2c-9a2b-5016859f66a8  21 minutes ago  True\\ndab7942a-f564-4668-bb95-12058fdd35cd  19 minutes ago  True\\naa2955d2-e785-4e2b-a302-2ca185ce2ece  19 minutes ago  True\\n7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7  18 minutes ago  True\\n4b781be8-068b-4eb2-bf35-abaf5920d9b4  17 minutes ago  True\\n9d6514fd-b190-44cb-b134-5e2ef0117898  16 minutes ago  True\\n1760dfd2-a718-4323-8498-defe1125c93d  7 minutes ago   True\\nb77ba7d2-f0a1-4ccf-aa31-2fa1d124adba  2 minutes ago   True\\n2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4  now             True\\n'\n\n'model_uuid                            created\\nb3b17f4c-2f00-4f51-9841-5dac52bfea61  2 hours ago\\n4b4b3909-671f-43f9-b868-d7d70a790e39  2 hours ago\\n5e80898d-a2a0-4341-8412-157086638d43  50 minutes ago\\n5c9b02a4-23a0-4743-b163-ad74f217d685  28 minutes ago\\n33dfede5-9913-4cf0-8029-e3ed1972a7da  23 minutes ago\\n38b96e82-43a4-4d6c-9275-efde8f820815  23 minutes ago\\ndc193688-c4a1-4f2c-9a2b-5016859f66a8  21 minutes ago\\ndab7942a-f564-4668-bb95-12058fdd35cd  19 minutes ago\\naa2955d2-e785-4e2b-a302-2ca185ce2ece  19 minutes ago\\n7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7  18 minutes ago\\n4b781be8-068b-4eb2-bf35-abaf5920d9b4  17 minutes ago\\n9d6514fd-b190-44cb-b134-5e2ef0117898  16 minutes ago\\n1760dfd2-a718-4323-8498-defe1125c93d  7 minutes ago\\nb77ba7d2-f0a1-4ccf-aa31-2fa1d124adba  2 minutes ago\\n2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4  now\\n'\n\n'b3b17f4c-2f00-4f51-9841-5dac52bfea61\\n4b4b3909-671f-43f9-b868-d7d70a790e39\\n5e80898d-a2a0-4341-8412-157086638d43\\n5c9b02a4-23a0-4743-b163-ad74f217d685\\n33dfede5-9913-4cf0-8029-e3ed1972a7da\\n38b96e82-43a4-4d6c-9275-efde8f820815\\ndc193688-c4a1-4f2c-9a2b-5016859f66a8\\ndab7942a-f564-4668-bb95-12058fdd35cd\\naa2955d2-e785-4e2b-a302-2ca185ce2ece\\n7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7\\n4b781be8-068b-4eb2-bf35-abaf5920d9b4\\n9d6514fd-b190-44cb-b134-5e2ef0117898\\n1760dfd2-a718-4323-8498-defe1125c93d\\nb77ba7d2-f0a1-4ccf-aa31-2fa1d124adba\\n2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4\\n'\n\n\"ids=['b3b17f4c-2f00-4f51-9841-5dac52bfea61', '4b4b3909-671f-43f9-b868-d7d70a790e39', '5e80898d-a2a0-4341-8412-157086638d43', '5c9b02a4-23a0-4743-b163-ad74f217d685', '33dfede5-9913-4cf0-8029-e3ed1972a7da', '38b96e82-43a4-4d6c-9275-efde8f820815', 'dc193688-c4a1-4f2c-9a2b-5016859f66a8', 'dab7942a-f564-4668-bb95-12058fdd35cd', 'aa2955d2-e785-4e2b-a302-2ca185ce2ece', '7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7', '4b781be8-068b-4eb2-bf35-abaf5920d9b4', '9d6514fd-b190-44cb-b134-5e2ef0117898', '1760dfd2-a718-4323-8498-defe1125c93d', 'b77ba7d2-f0a1-4ccf-aa31-2fa1d124adba', '2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4']\"\n</code></pre> <pre><code># Tests for model_ls\n# Testing positive scenario.\n# Testing by passing different values for  limit\n\n\ndef get_ids_from_result(result) -&gt; List[int]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        for limit in [1, 10, 1000]:\n            offset = 1\n            result = runner.invoke(app, [\"--offset\", offset, \"--limit\", limit, \"-q\"])\n\n            assert result.exit_code == 0\n\n            ids = get_ids_from_result(result)\n            display(f\"{ids=}\")\n            assert limit &gt;= len(ids) &gt;= 0\n</code></pre> <pre><code>\"ids=['4b4b3909-671f-43f9-b868-d7d70a790e39']\"\n\n\"ids=['4b4b3909-671f-43f9-b868-d7d70a790e39', '5e80898d-a2a0-4341-8412-157086638d43', '5c9b02a4-23a0-4743-b163-ad74f217d685', '33dfede5-9913-4cf0-8029-e3ed1972a7da', '38b96e82-43a4-4d6c-9275-efde8f820815', 'dc193688-c4a1-4f2c-9a2b-5016859f66a8', 'dab7942a-f564-4668-bb95-12058fdd35cd', 'aa2955d2-e785-4e2b-a302-2ca185ce2ece', '7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7', '4b781be8-068b-4eb2-bf35-abaf5920d9b4']\"\n\n\"ids=['4b4b3909-671f-43f9-b868-d7d70a790e39', '5e80898d-a2a0-4341-8412-157086638d43', '5c9b02a4-23a0-4743-b163-ad74f217d685', '33dfede5-9913-4cf0-8029-e3ed1972a7da', '38b96e82-43a4-4d6c-9275-efde8f820815', 'dc193688-c4a1-4f2c-9a2b-5016859f66a8', 'dab7942a-f564-4668-bb95-12058fdd35cd', 'aa2955d2-e785-4e2b-a302-2ca185ce2ece', '7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7', '4b781be8-068b-4eb2-bf35-abaf5920d9b4', '9d6514fd-b190-44cb-b134-5e2ef0117898', '1760dfd2-a718-4323-8498-defe1125c93d', 'b77ba7d2-f0a1-4ccf-aa31-2fa1d124adba', '2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4']\"\n</code></pre> <pre><code># Tests for model_ls\n# Testing positive scenario.\n# Testing by passing large value for offset.\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        limit = 10\n        offset = 1_000_000\n        result = runner.invoke(app, [\"--offset\", offset, \"--limit\", limit])\n\n        assert result.exit_code == 0\n\n        display(result.stdout)\n</code></pre> <pre><code>'model_uuid    created    ready\\n'\n</code></pre> <pre><code>assert_has_help([\"details\"])\n</code></pre> <pre><code>'Usage: root details [OPTIONS] UUID\\n\\n  Return the details of a model.\\n\\nArguments:\\n  UUID  Model uuid  [required]\\n\\nOptions:\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for details\n# Testing positive scenario\n\n# Helper function to extract ID\n\n\ndef extract_id(res) -&gt; str:\n    r = (res.split(\"\\n\")[1]).strip()\n    return r.split(\" \")[0]\n\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        # Getting Details of the model\n        format_str = \"{'model_uuid': '{}', 'created': '{}'}\"\n        result = runner.invoke(app, [\"details\", model.uuid, \"--format\", format_str])\n\n        result_id = extract_id(result.stdout)\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert result_id == model.uuid\n</code></pre> <pre><code>'model_uuid                            created\\n2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4  now\\n'\n</code></pre> <pre><code># Tests for details\n# Testing negative scenario. Passing invalie id\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(app, [\"details\", RANDOM_UUID_FOR_TESTING])\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Error: The model uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"rm\"])\n</code></pre> <pre><code>'Usage: root rm [OPTIONS] UUID\\n\\n  Delete a model from the server.\\n\\nArguments:\\n  UUID  Model uuid  [required]\\n\\nOptions:\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -q, --quiet        Output the deleted Model uuid only.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for model rm\n# Testing positive scenario with quite\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        # Deleting the created model from the server\n        result = runner.invoke(app, [\"rm\", model.uuid, \"-q\"])\n        deleted_uuid = result.stdout[:-1]\n\n        display(deleted_uuid)\n\n        assert result.exit_code == 0\n        assert deleted_uuid == model.uuid\n\n        # List the existing model ids in server and make sure the deleted id is not present in the server\n        ls_result = runner.invoke(app, [\"ls\", \"-q\"])\n        ls_ids = get_ids_from_result(ls_result)\n\n        display(ls_ids)\n        assert deleted_uuid not in ls_ids\n\n        # Testing negative scenario. Deleting already deleted model\n        format_str = \"{'model_uuid': '{}'}\"\n        result = runner.invoke(app, [\"rm\", deleted_uuid, \"-f\", format_str])\n        display(result.stdout)\n        assert result.exit_code == 1\n\n        # Testing negative scenario. Getting the details of the deleted model\n        result = runner.invoke(app, [\"details\", deleted_uuid])\n        display(result.stdout)\n        assert result.exit_code == 1\n</code></pre> <pre><code>'2c8757da-0a75-4dfe-b1e9-952dbcfbb6b4'\n\n['b3b17f4c-2f00-4f51-9841-5dac52bfea61',\n '4b4b3909-671f-43f9-b868-d7d70a790e39',\n '5e80898d-a2a0-4341-8412-157086638d43',\n '5c9b02a4-23a0-4743-b163-ad74f217d685',\n '33dfede5-9913-4cf0-8029-e3ed1972a7da',\n '38b96e82-43a4-4d6c-9275-efde8f820815',\n 'dc193688-c4a1-4f2c-9a2b-5016859f66a8',\n 'dab7942a-f564-4668-bb95-12058fdd35cd',\n 'aa2955d2-e785-4e2b-a302-2ca185ce2ece',\n '7f6b2c6b-b4c9-4f33-b781-d4bba9d67db7',\n '4b781be8-068b-4eb2-bf35-abaf5920d9b4',\n '9d6514fd-b190-44cb-b134-5e2ef0117898',\n '1760dfd2-a718-4323-8498-defe1125c93d',\n 'b77ba7d2-f0a1-4ccf-aa31-2fa1d124adba']\n\n'Error: The model has already been deleted.\\n'\n\n'Error: The model has already been deleted.\\n'\n</code></pre> <pre><code># Tests for model rm\n# Testing negative scenario. Deleting invalid data source\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        result = runner.invoke(app, [\"rm\", RANDOM_UUID_FOR_TESTING, \"-q\"])\n\n        display(result.stdout)\n</code></pre> <pre><code>'Error: The model uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"predict\"])\n</code></pre> <pre><code>'Usage: root predict [OPTIONS]\\n\\n  Run predictions against the trained model.\\n\\nOptions:\\n  --data_uuid TEXT  DataSource uuid.  [required]\\n  --uuid TEXT       Model uuid.  [required]\\n  -q, --quiet       Output the prediction id only.\\n  -d, --debug       Set logger level to DEBUG and output everything.\\n  --help            Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for model predict\n# Testing positive scenario without quite\n\nwith set_airt_service_token_envvar():\n    with generate_model(force_create=True) as model:\n        # Running prediction\n        data_uuid = model.details()[\"datasource_uuid\"][0]\n        result = runner.invoke(\n            app, [\"predict\", \"--uuid\", model.uuid, \"--data_uuid\", data_uuid]\n        )\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert \"Running predictions for prediction uuid\" in result.stdout\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:15&lt;00:00, 15.15s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.31s/it]\n\n\"ds.uuid='e9103626-e10d-4e54-9965-ed04400b21c7'\"\n\n'Running predictions for prediction uuid: 9dbb3261-bba7-47df-bd57-21358c10ff79\\n\\r  0%|          | 0/3 [00:00&lt;?, ?it/s]\\r  0%|          | 0/3 [00:05&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  1.68s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.38s/it]\\n'\n</code></pre> <pre><code># Tests for model predict\n# Testing positive scenario without quite\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        data_uuid = model.details()[\"datasource_uuid\"][0]\n        result = runner.invoke(\n            app, [\"predict\", \"--uuid\", model.uuid, \"--data_uuid\", data_uuid, \"-q\"]\n        )\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert len(result.stdout.replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n</code></pre> <pre><code>'b213e99d-6215-44a9-a658-0ce6fdab045c\\n'\n</code></pre> <pre><code>assert_has_help([\"evaluate\"])\n</code></pre> <pre><code>\"Usage: root evaluate [OPTIONS] UUID\\n\\n  Return the evaluation metrics of the trained model.\\n\\n  Currently, this command returns the model's accuracy, precision, and recall.\\n  In the future, more performance metrics will be added.\\n\\nArguments:\\n  UUID  Model uuid.  [required]\\n\\nOptions:\\n  -d, --debug  Set logger level to DEBUG and output everything.\\n  --help       Show this message and exit.\\n\"\n</code></pre> <pre><code># Tests for evaluate\n# Testing positive scenario\n\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        # Getting Details of the model\n        result = runner.invoke(app, [\"evaluate\", model.uuid])\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert \"eval\" in result.stdout\n        assert \"accuracy\" in result.stdout\n</code></pre> <pre><code>'             eval\\naccuracy    0.985\\nrecall      0.962\\nprecision   0.934\\n'\n</code></pre> <pre><code># Tests for evaluate\n# Testing negative scenario, passing wrong id\n\n\nwith set_airt_service_token_envvar():\n    with generate_model() as model:\n        result = runner.invoke(app, [\"evaluate\", RANDOM_UUID_FOR_TESTING])\n\n        display(result.stdout)\n\n        assert result.exit_code == 1\n</code></pre> <pre><code>'Error: The model uuid is incorrect. Please try again.\\n'\n</code></pre>"},{"location":"CLI_Pred/","title":"CLI_Pred","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nimport tempfile\nimport time\nfrom contextlib import contextmanager\nfrom datetime import timedelta\nfrom pathlib import Path\n\nimport boto3\nimport pytest\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._constant import SERVICE_PASSWORD, SERVICE_TOKEN, SERVICE_USERNAME\nfrom airt.client import Client, DataBlob, User\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>TEST_S3_URI = \"s3://test-airt-service/ecommerce_behavior_notebooks\"\nTEST_AZURE_PUSH_URI = (\n    \"https://testairtservice.blob.core.windows.net/test-client-push-container\"\n)\nRANDOM_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code>def assert_has_help(xs: List[str]):\n    result = runner.invoke(app, xs + [\"--help\"])\n\n    display(result.stdout)\n    assert \" \".join(xs) in result.stdout\n</code></pre> <pre><code>assert_has_help([\"ls\"])\n</code></pre> <pre><code>'Usage: ls [OPTIONS]\\n\\n  Return the list of predictions.\\n\\nOptions:\\n  -o, --offset INTEGER            The number of predictions to offset at the\\n                                  beginning. If None, then the default value\\n                                  **0** will be used.  [default: 0]\\n  -l, --limit INTEGER             The maximum number of predictions to return\\n                                  from the server. If None, then the default\\n                                  value **100** will be used.  [default: 100]\\n  --disabled                      If set to **True**, then only the deleted\\n                                  predictions will be returned. Else, the\\n                                  default value **False** will be used to return\\n                                  only the list of active predictions.\\n  --completed                     If set to **True**, then only the predictions\\n                                  that are successfully downloaded to the server\\n                                  will be returned. Else, the default value\\n                                  **False** will be used to return all the\\n                                  predictions.\\n  -f, --format TEXT               Format output and show only the given\\n                                  column(s) values.\\n  -q, --quiet                     Output only prediction uuids separated by\\n                                  space.\\n  -d, --debug                     Set logger level to DEBUG and output\\n                                  everything.\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n'\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_token = None\n\n\n@contextmanager\ndef set_airt_service_token_envvar():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>_prediction = None\n\n\n@contextmanager\ndef generate_prediction(force_create: bool = False):\n    global _prediction\n    if _prediction is None or force_create:\n        db = DataBlob.from_s3(\n            uri=TEST_S3_URI,\n            access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n            secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n            cloud_provider=\"aws\",\n            region=\"eu-west-1\",\n        )\n\n        db.progress_bar()\n\n        ds = db.to_datasource(\n            file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\"\n        )\n\n        display(f\"{ds.uuid=}\")\n\n        ds.progress_bar()\n\n        model = ds.train(\n            client_column=\"user_id\",\n            target_column=\"category_code\",\n            target=\"*checkout\",\n            predict_after=timedelta(hours=3),\n        )\n\n        model.wait()\n\n        _prediction = model.predict()\n        _prediction.progress_bar()\n\n    yield _prediction\n</code></pre> <pre><code># Tests for prediction ls\n# Testing positive scenario. Saving the token in env variable\n\n\ndef get_uuids_from_result(result) -&gt; List[int]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith set_airt_service_token_envvar():\n    with generate_prediction(force_create=True) as pred:\n        # Without quiet\n        format_str = \"{'ready': '{}', 'prediction_uuid': '{}'}\"\n        result = runner.invoke(app, [\"--format\", format_str])\n        display(result.stdout)\n\n        assert \"ready\" in result.stdout\n        assert result.exit_code == 0\n\n        # With quiet\n        result = runner.invoke(app, [\"-q\"])\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        uuids = get_uuids_from_result(result)\n        display(f\"{uuids=}\")\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.12s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:30&lt;00:00, 30.32s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.70s/it]\n\n\"ds.uuid='fe0cd7a8-e1c6-4166-bbb9-4a7c0fd3d6e5'\"\n\n'ready    prediction_uuid\\nTrue     6b859549-dad2-449f-ae41-0eda1dae0d9a\\nTrue     8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1\\n'\n\n'6b859549-dad2-449f-ae41-0eda1dae0d9a\\n8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1\\n'\n\n\"uuids=['6b859549-dad2-449f-ae41-0eda1dae0d9a', '8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1']\"\n</code></pre> <pre><code># Tests for prediction ls\n# Testing positive scenario.\n# Testing by passing different values for  limit\n\n\nwith set_airt_service_token_envvar():\n    for limit in [1, 10, 1000]:\n        offset = 1\n        result = runner.invoke(app, [\"--offset\", offset, \"--limit\", limit, \"-q\"])\n\n        assert result.exit_code == 0\n\n        ids = get_uuids_from_result(result)\n        display(f\"{ids=}\")\n        assert limit &gt;= len(ids) &gt;= 0\n</code></pre> <pre><code>\"ids=['8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1']\"\n\n\"ids=['8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1']\"\n\n\"ids=['8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1']\"\n</code></pre> <pre><code># Tests for prediction ls\n# Testing positive scenario.\n# Testing by passing large value for offset.\n\nwith set_airt_service_token_envvar():\n    limit = 10\n    offset = 1_000_000\n    result = runner.invoke(app, [\"--offset\", offset, \"--limit\", limit])\n\n    assert result.exit_code == 0\n\n    display(result.stdout)\n</code></pre> <pre><code>'prediction_uuid    created    ready\\n'\n</code></pre> <pre><code>assert_has_help([\"details\"])\n</code></pre> <pre><code>'Usage: root details [OPTIONS] UUID\\n\\n  Return the details of a prediction.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for details\n# Testing positive scenario\n\n# Helper function to extract ID\n\n\ndef extract_id(res) -&gt; str:\n    r = (res.split(\"\\n\")[1]).strip()\n    return r.split(\" \")[0]\n\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        # Getting Details of the prediction\n        pred_uuid = pred.uuid\n        format_str = \"{'prediction_uuid': '{}'}\"\n        result = runner.invoke(app, [\"details\", pred_uuid, \"--format\", format_str])\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert result.stdout == f\"{pred_uuid}\\n\", f\"{result_id=} {pred_uuid=}\"\n</code></pre> <pre><code>'8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1\\n'\n</code></pre> <pre><code># Tests for details\n# Testing negative scenario. Passing invalie pred_uuid\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        result = runner.invoke(app, [\"details\", RANDOM_UUID_FOR_TESTING])\n\n        display(result.stdout)\n\n        assert result.exit_code == 1\n</code></pre> <pre><code>'Error: The prediction uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"rm\"])\n</code></pre> <pre><code>'Usage: root rm [OPTIONS] UUID\\n\\n  Delete a prediction from the server.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  -q, --quiet        Output the deleted Prediction uuid only.\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction rm\n# Testing positive scenario with quite\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        format_str = \"{'prediction_uuid': '{}'}\"\n        pred_uuid = pred.uuid\n        result = runner.invoke(app, [\"rm\", pred_uuid, \"-f\", format_str])\n        deleted_id = result.stdout[:-1]\n\n        display(deleted_id)\n\n        assert result.exit_code == 0\n        assert deleted_id == pred_uuid\n\n        # List the existing Prediction uuids in server and make sure the deleted id is not present\n        ls_result = runner.invoke(app, [\"ls\", \"-q\"])\n        ls_ids = get_uuids_from_result(ls_result)\n\n        display(ls_ids)\n        assert deleted_id not in ls_ids\n\n        # Testing negative scenario. Deleting already deleted prediction\n        result = runner.invoke(app, [\"rm\", deleted_id, \"-q\"])\n\n        # Testing negative scenario. Getting the details of the deleted prediction\n        result = runner.invoke(app, [\"details\", deleted_id])\n</code></pre> <pre><code>'8dac1fee-dbe6-42e4-aab3-bf921a9bb6c1'\n\n['6b859549-dad2-449f-ae41-0eda1dae0d9a']\n</code></pre> <pre><code># Tests for prediction rm\n# Testing negative scenario. Deleting invalid prediction\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(app, [\"rm\", RANDOM_UUID_FOR_TESTING])\n\n    display(result.stdout)\n</code></pre> <pre><code>'Error: The prediction uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"to-pandas\"])\n</code></pre> <pre><code>'Usage: root to-pandas [OPTIONS] UUID\\n\\n  Return the prediction results as a pandas DataFrame.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  -d, --debug  Set logger level to DEBUG and output everything.\\n  --help       Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction to-pandas\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction(force_create=True) as pred:\n        result = runner.invoke(app, [\"to-pandas\", pred.uuid])\n\n        display(result.stdout)\n\n        assert result.exit_code == 0\n        assert \"Score\" in result.stdout\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.11s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.39s/it]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:05&lt;00:00,  1.69s/it]\n\n\"ds.uuid='a81aeac7-7984-493a-acc3-9d6949afa40a'\"\n\n'   Score\\n0.979853\\n0.979157\\n0.979055\\n0.978915\\n0.97796\\n0.004043\\n0.00389\\n0.001346\\n0.001341\\n0.001139\\n'\n</code></pre> <pre><code># Tests for prediction to-pandas\n# Testing negative scenario\n\nwith set_airt_service_token_envvar():\n    result = runner.invoke(app, [\"to-pandas\", RANDOM_UUID_FOR_TESTING])\n\n    display(result.stdout)\n</code></pre> <pre><code>'Error: The prediction uuid is incorrect. Please try again.\\n'\n</code></pre> <pre><code>assert_has_help([\"to-s3\"])\n</code></pre> <pre><code>'Usage: root to-s3 [OPTIONS] UUID\\n\\n  Push the prediction results to the target AWS S3 bucket.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  --uri TEXT         The target S3 bucket uri.  [required]\\n  --access-key TEXT  Access key for the target S3 bucket. If **None** (default\\n                     value), then the value from **AWS_ACCESS_KEY_ID**\\n                     environment variable is used.\\n  --secret-key TEXT  Secret key for the target S3 bucket. If **None** (default\\n                     value), then the value from **AWS_SECRET_ACCESS_KEY**\\n                     environment variable is used.\\n  -q, --quiet        Output status only.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction to-s3\n# Testing positive scenario\n\nuser_details = User.details()\nDEV_BUCKET_NAME = f'{os.environ[\"STORAGE_BUCKET_PREFIX\"]}-eu-west-1'\nTEST_OBJECT_NAME = f\"{user_details['uuid']}/test_CLI_prediction_to_s3\"\nPREDICTION_TO_S3_URL = f\"s3://{DEV_BUCKET_NAME}/{TEST_OBJECT_NAME}\"\n\n# Create a new key in the s3 bucket\ns3_client = boto3.client(\"s3\")\n\ntry:\n    s3_client.create_bucket(\n        Bucket=DEV_BUCKET_NAME,\n        CreateBucketConfiguration={\"LocationConstraint\": \"eu-west-1\"},\n    )\nexcept s3_client.exceptions.BucketAlreadyOwnedByYou as e:\n    logger.info(\"Bucket already created\")\n\ns3_client.put_object(Bucket=DEV_BUCKET_NAME, Key=(TEST_OBJECT_NAME + \"/\"))\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        pred_uuid = pred.uuid\n\n        # without -q\n        result = runner.invoke(app, [\"to-s3\", pred_uuid, \"--uri\", PREDICTION_TO_S3_URL])\n\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert f\"Pushing the results for Prediction uuid: {pred_uuid}\" in result.stdout\n\n        # with -q\n        result = runner.invoke(\n            app, [\"to-s3\", pred_uuid, \"--uri\", PREDICTION_TO_S3_URL, \"-q\"]\n        )\n\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert f\"{pred_uuid}\" in result.stdout\n\n\n# Check in s3 if the uploaded files are present\ntime.sleep(10)\nresponse = s3_client.list_objects(Bucket=DEV_BUCKET_NAME, Prefix=TEST_OBJECT_NAME)\nactual_s3_contents = [content.get(\"Key\") for content in response.get(\"Contents\", [])]\nexpected_s3_contents = [\n    f\"{TEST_OBJECT_NAME}/\",\n    f\"{TEST_OBJECT_NAME}/part.0.parquet\",\n]\n\nassert len(actual_s3_contents) == 2, len(actual_s3_contents)\nassert actual_s3_contents == expected_s3_contents, actual_s3_contents\ndisplay(f\"{actual_s3_contents=}\")\n\n# Finally, delete the object in s3\nfor k in actual_s3_contents:\n    s3_client.delete_object(Bucket=DEV_BUCKET_NAME, Key=k)\n\nresponse = s3_client.list_objects(Bucket=DEV_BUCKET_NAME, Prefix=TEST_OBJECT_NAME)\ns3_contents = [content.get(\"Key\") for content in response.get(\"Contents\", [])]\n\nassert s3_contents == [], s3_contents\ndisplay(f\"{s3_contents=}\")\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the s3 bucket.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.08s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\\n'\n\n'863a392f-849b-4da7-b86e-4c0ce85eb221\\n'\n\n\"actual_s3_contents=['bbe0e09b-9c56-434c-a101-c47adae2a0c8/test_CLI_prediction_to_s3/', 'bbe0e09b-9c56-434c-a101-c47adae2a0c8/test_CLI_prediction_to_s3/part.0.parquet']\"\n\n's3_contents=[]'\n</code></pre> <pre><code># Tests for prediction to-s3\n# Testing negative scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        uri = \"s3://random-bucket-name/random-object-name\"\n        access_key = \"fake_access_key\"\n        secret_key = \"fake_secret_key\"\n\n        result = runner.invoke(\n            app,\n            [\n                \"to-s3\",\n                pred.uuid,\n                \"--uri\",\n                uri,\n                \"--access-key\",\n                access_key,\n                \"--secret-key\",\n                secret_key,\n            ],\n        )\n\n        display(result.stdout)\n        assert result.exit_code == 1\n        assert (\n            f\"The AWS Access Key Id you provided does not exist in our records\"\n            in result.stdout\n        )\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the s3 bucket.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\nError: An error occurred (InvalidAccessKeyId) when calling the ListObjects operation: The AWS Access Key Id you provided does not exist in our records.\\n'\n</code></pre> <pre><code>assert_has_help([\"to-azure-blob-storage\"])\n</code></pre> <pre><code>'Usage: root to-azure-blob-storage [OPTIONS] UUID\\n\\n  Push the prediction results to the target Azure Blob Storage.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  --uri TEXT             Target Azure Blob Storage uri.  [required]\\n  -c, --credential TEXT  Credential to access the Azure Blob Storage.\\n                         [required]\\n  -q, --quiet            Output status only.\\n  -d, --debug            Set logger level to DEBUG and output everything.\\n  --help                 Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for to-azure-blob-storage\n# Positive Scenario: Passing credential in arguments\n\nstorage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nkeys = storage_client.storage_accounts.list_keys(\"test-airt-service\", \"testairtservice\")\ncredential = keys.keys[0].value\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        # without -q\n        result = runner.invoke(\n            app,\n            [\n                \"to-azure-blob-storage\",\n                pred.uuid,\n                \"--uri\",\n                TEST_AZURE_PUSH_URI,\n                \"--credential\",\n                credential,\n            ],\n        )\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert f\"Pushing the results for Prediction uuid: {pred.uuid}\" in result.stdout\n\n        # with -q\n        result = runner.invoke(\n            app,\n            [\n                \"to-azure-blob-storage\",\n                pred.uuid,\n                \"--uri\",\n                TEST_AZURE_PUSH_URI,\n                \"--credential\",\n                credential,\n                \"-q\",\n            ],\n        )\n\n        display(result.stdout)\n        assert result.exit_code == 0\n        assert f\"{pred.uuid}\" in result.stdout\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the Azure Blob Storage.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\\n'\n\n'863a392f-849b-4da7-b86e-4c0ce85eb221\\n'\n</code></pre> <pre><code># Tests for to-azure-blob-storage\n# Negative Scenario: Passing invalid uri\n\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        invalid_uri = \"https://invalid-push-blob-storage-path\"\n        result = runner.invoke(\n            app,\n            [\n                \"to-azure-blob-storage\",\n                pred.uuid,\n                \"--uri\",\n                invalid_uri,\n                \"--credential\",\n                credential,\n            ],\n        )\n        display(result.stdout)\n        assert result.exit_code == 1\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the Azure Blob Storage.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\nError: Unable to determine account name for shared key credential.\\n'\n</code></pre> <pre><code>assert_has_help([\"to-local\"])\n</code></pre> <pre><code>'Usage: root to-local [OPTIONS] UUID\\n\\n  Download the prediction results to a local directory.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  --path TEXT  Local directory path.  [required]\\n  -q, --quiet  Output status only.\\n  -d, --debug  Set logger level to DEBUG and output everything.\\n  --help       Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction to-local\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        with tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n            assert os.listdir(d) == []\n            display(list(os.listdir(d)))\n\n            result = runner.invoke(app, [\"to-local\", pred.uuid, \"--path\", d])\n\n            display(result.stdout)\n            assert result.exit_code == 0\n            assert (\n                f\"Downloading prediction results for uuid: {pred.uuid}.\"\n                in result.stdout\n            )\n\n            downloaded_files = sorted(list(os.listdir(d)))\n            assert downloaded_files == [\"part.0.parquet\"], downloaded_files\n            display(f\"{downloaded_files=}\")\n\n        # with -q flag\n        with tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n            assert os.listdir(d) == []\n            display(list(os.listdir(d)))\n\n            result = runner.invoke(app, [\"to-local\", pred.uuid, \"--path\", d, \"-q\"])\n\n            display(result.stdout)\n            assert result.exit_code == 0\n            assert f\"{pred.uuid}\" in result.stdout\n\n            downloaded_files = sorted(list(os.listdir(d)))\n            assert downloaded_files == [\"part.0.parquet\"], downloaded_files\n            display(f\"{downloaded_files=}\")\n</code></pre> <pre><code>[]\n\n'Downloading prediction results for uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.25it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.25it/s]\\n'\n\n\"downloaded_files=['part.0.parquet']\"\n\n[]\n\n'863a392f-849b-4da7-b86e-4c0ce85eb221\\n'\n\n\"downloaded_files=['part.0.parquet']\"\n</code></pre> <pre><code># Tests for prediction to-local\n# Testing negative scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        d = Path(\"my-fake-path\")\n\n        result = runner.invoke(app, [\"to-local\", pred.uuid, \"--path\", d])\n\n        display(result.stdout)\n        assert result.exit_code == 1\n        assert \"my-fake-path\" in result.stdout\n</code></pre> <pre><code>\"Downloading prediction results for uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]Error: [Errno 2] No such file or directory: 'my-fake-path/part.0.parquet'\\n\"\n</code></pre> <pre><code>assert_has_help([\"to-mysql\"])\n</code></pre> <pre><code>'Usage: root to-mysql [OPTIONS] UUID\\n\\n  Push the prediction results to a mysql database.\\n\\n  If the database requires authentication, pass the username/password as\\n  commandline arguments or store it in the **AIRT_CLIENT_DB_USERNAME** and\\n  **AIRT_CLIENT_DB_PASSWORD** environment variables.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  --host TEXT          Database host name.  [required]\\n  --database TEXT      Database name.  [required]\\n  --table TEXT         Table name.  [required]\\n  --port INTEGER       Host port number. If not passed, then the default value\\n                       **3306** will be used.  [default: 3306]\\n  -u, --username TEXT  Database username. If not passed, then the value set in\\n                       the environment variable **AIRT_CLIENT_DB_USERNAME** will\\n                       be used else the default value **root** will be used.\\n  -p, --password TEXT  Database password. If not passed, then the value set in\\n                       the environment variable **AIRT_CLIENT_DB_PASSWORD** will\\n                       be used else the default value \"\" will be used.\\n  -q, --quiet          Output status only.\\n  -d, --debug          Set logger level to DEBUG and output everything.\\n  --help               Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction to-mysql\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        cmd = [\n            \"to-mysql\",\n            pred.uuid,\n            \"--host\",\n            os.environ[\"DB_HOST\"],\n            \"--database\",\n            os.environ[\"DB_DATABASE\"],\n            \"--table\",\n            \"prediction_to_mysql\",\n            \"-u\",\n            os.environ[\"DB_USERNAME\"],\n            \"-p\",\n            os.environ[\"DB_PASSWORD\"],\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0\n\n        assert (\n            f\"Pushing the results for Prediction uuid: {pred.uuid} to the mysql database\"\n            in str(result.stdout)\n        )\n\n        cmd = [\n            \"to-mysql\",\n            pred.uuid,\n            \"--host\",\n            os.environ[\"DB_HOST\"],\n            \"--database\",\n            os.environ[\"DB_DATABASE\"],\n            \"--table\",\n            \"prediction_to_mysql\",\n            \"-u\",\n            os.environ[\"DB_USERNAME\"],\n            \"-p\",\n            os.environ[\"DB_PASSWORD\"],\n            \"-q\",\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0\n\n        assert f\"{pred.uuid}\" in str(result.stdout)\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the mysql database.\\n\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:05&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:10&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:15&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:20&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:25&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:30&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:35&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:40&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:45&lt;?, ?it/s]\\x1b[A\\n\\r  0%|          | 0/1 [00:50&lt;?, ?it/s]\\x1b[A\\n\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00,  5.04s/it]\\x1b[A\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00, 55.58s/it]\\n'\n\n'863a392f-849b-4da7-b86e-4c0ce85eb221\\n'\n</code></pre> <pre><code>assert_has_help([\"to-clickhouse\"])\n</code></pre> <pre><code>'Usage: root to-clickhouse [OPTIONS] UUID\\n\\n  Push the prediction results to a clickhouse database.\\n\\n  If the database requires authentication, pass the username/password as\\n  commandline arguments or store it in the **CLICKHOUSE_USERNAME** and\\n  **CLICKHOUSE_PASSWORD** environment variables.\\n\\nArguments:\\n  UUID  Prediction uuid.  [required]\\n\\nOptions:\\n  --host TEXT          Remote database host name.  [required]\\n  --database TEXT      Database name.  [required]\\n  --table TEXT         Table name.  [required]\\n  --protocol TEXT      Protocol to use (native/http).  [required]\\n  --port INTEGER       Host port number. If not passed, then the default value\\n                       **0** will be used.  [default: 0]\\n  -u, --username TEXT  Database username. If not passed, then the value set in\\n                       the environment variable **CLICKHOUSE_USERNAME** will be\\n                       used else the default value **root** will be used.\\n  -p, --password TEXT  Database password. If not passed, then the value set in\\n                       the environment variable **CLICKHOUSE_PASSWORD** will be\\n                       used else the default value \"\" will be used.\\n  -q, --quiet          Output status only.\\n  -d, --debug          Set logger level to DEBUG and output everything.\\n  --help               Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for prediction to-clickhouse\n# Testing positive scenario\n\nwith set_airt_service_token_envvar():\n    with generate_prediction() as pred:\n        # without -q\n        cmd = [\n            \"to-clickhouse\",\n            pred.uuid,\n            \"--host\",\n            os.environ.get(\"CLICKHOUSE_HOST\"),\n            \"--database\",\n            os.environ.get(\"CLICKHOUSE_DATABASE\"),\n            \"--table\",\n            \"test_clickhouse_push_prediction_airt_client\",\n            \"--protocol\",\n            \"native\",\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0\n\n        assert (\n            f\"Pushing the results for Prediction uuid: {pred.uuid} to the clickhouse database\"\n            in str(result.stdout)\n        ), str(result.stdout)\n\n        # with -q\n        cmd = [\n            \"to-clickhouse\",\n            pred.uuid,\n            \"--host\",\n            os.environ.get(\"CLICKHOUSE_HOST\"),\n            \"--database\",\n            os.environ.get(\"CLICKHOUSE_DATABASE\"),\n            \"--table\",\n            \"test_clickhouse_push_prediction_airt_client\",\n            \"--protocol\",\n            \"native\",\n            \"-q\",\n        ]\n        result = runner.invoke(app, cmd)\n\n        display(result.stdout)\n        assert result.exit_code == 0\n\n        assert f\"{pred.uuid}\" in str(result.stdout), str(result.stdout)\n</code></pre> <pre><code>'Pushing the results for Prediction uuid: 863a392f-849b-4da7-b86e-4c0ce85eb221 to the clickhouse database.\\n\\r  0%|          | 0/1 [00:00&lt;?, ?it/s]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.09s/it]\\n'\n\n'863a392f-849b-4da7-b86e-4c0ce85eb221\\n'\n</code></pre>"},{"location":"CLI_Token/","title":"CLI_Token","text":"<pre><code>from contextlib import contextmanager\nfrom random import randrange\n\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._constant import (\n    SERVICE_PASSWORD,\n    SERVICE_SUPER_USER,\n    SERVICE_TOKEN,\n    SERVICE_USERNAME,\n)\n</code></pre> <pre><code># Testing SSO Flow\n# Negative case: Generating token using SSO without calling the enable SSO command\nresult = runner.invoke(\n    app,\n    [\n        \"-u\",\n        os.environ[SERVICE_USERNAME],\n        \"-p\",\n        os.environ[SERVICE_PASSWORD],\n        \"--sso_provider\",\n        \"google\",\n    ],\n)\n\nassert result.exit_code == 1\nassert \"SSO is not enabled \" in result.stdout\nresult.stdout\n</code></pre> <pre><code>'Error: SSO is not enabled for the provider.\\n'\n</code></pre> <pre><code># Testing SSO Flow\n# Negative case: Generating token without enabling SSO\nresult = runner.invoke(\n    app,\n    [\n        \"-u\",\n        os.environ[SERVICE_USERNAME],\n        \"-p\",\n        os.environ[SERVICE_PASSWORD],\n        \"--sso_provider\",\n        \"github\",\n    ],\n)\n\nassert result.exit_code == 1\nassert \"SSO is not enabled \" in result.stdout\nresult.stdout\n</code></pre> <pre><code>'Error: SSO is not enabled for the provider.\\n'\n</code></pre> <pre><code># Helper context manager for testing\n\n\n@contextmanager\ndef new_user():\n    # login as super user\n    username = os.environ[SERVICE_SUPER_USER]\n    password = os.environ[SERVICE_PASSWORD]\n\n    Client.get_token(username=username, password=password)\n    # create new user\n    _user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n    _email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n    _password = \"random_password\"\n\n    req_data = dict(\n        username=_user_name,\n        first_name=\"random_first_name\",\n        last_name=\"random_last_name\",\n        email=_email,\n        password=_password,\n        super_user=False,\n        subscription_type=\"test\",\n    )\n\n    response = Client._post_data(relative_url=f\"/user/\", data=req_data)\n\n    Client.get_token(username=_user_name, password=_password)\n    user_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = user_token\n        yield _user_name, _password\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code># Testing negative scenario: Non-mfa user send otp param\n\nrandom_otp = 123456\nresult = runner.invoke(\n    app,\n    [\n        \"-u\",\n        os.environ[SERVICE_USERNAME],\n        \"-p\",\n        os.environ[SERVICE_PASSWORD],\n        \"--otp\",\n        random_otp,\n    ],\n)\n\nassert result.exit_code == 1\nassert \"Incorrect username or password\" in str(result.stdout)\nstr(result.stdout)\n</code></pre> <pre><code>'Error: Incorrect username or password. Please try again.\\n'\n</code></pre>"},{"location":"CLI_User/","title":"CLI_User","text":"<pre><code>from airt._testing import activate_by_import\n</code></pre> <pre><code>[INFO] airt._testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import logging\nfrom contextlib import contextmanager\nfrom random import randrange\n\nimport pytest\nfrom typer.testing import CliRunner\n\nimport airt._sanitizer\nfrom airt._constant import (\n    SERVICE_PASSWORD,\n    SERVICE_SUPER_USER,\n    SERVICE_TOKEN,\n    SERVICE_USERNAME,\n)\nfrom airt.client import Client, User\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>set_level(logging.WARNING)\n</code></pre> <pre><code># Testing logger settings\n\ndisplay(logger.getEffectiveLevel())\nassert logger.getEffectiveLevel() == logging.WARNING\n\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info\")\nlogger.warning(\"This is a warning\")\nlogger.error(\"This is an error\")\n</code></pre> <pre><code>30\n\n[WARNING] __main__: This is a warning\n[ERROR] __main__: This is an error\n</code></pre> <pre><code>INVALID_UUID_FOR_TESTING = \"00000000-0000-0000-0000-000000000000\"\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_token = None\n\n\n@contextmanager\ndef normal_user():\n    global _airt_service_token\n    if _airt_service_token is None:\n        display(\"_airt_service_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_USERNAME]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with normal_user():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_super_user_token = None\n\n\n@contextmanager\ndef super_user():\n    global _airt_service_super_user_token\n    if _airt_service_super_user_token is None:\n        display(\"_airt_service_super_user_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_SUPER_USER]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_super_user_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_super_user_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with super_user():\n    display(\"*\" * len((os.environ[SERVICE_TOKEN])))\n</code></pre> <pre><code>'_airt_service_super_user_token is None, getting a token...'\n\n'*******************************************************************************************************************************'\n</code></pre> <pre><code>def assert_has_help(xs: List[str]):\n    result = runner.invoke(app, xs + [\"--help\"])\n\n    display(result.stdout)\n    assert \" \".join(xs) in result.stdout\n</code></pre> <pre><code>assert_has_help([\"details\"])\n</code></pre> <pre><code>\"Usage: details [OPTIONS]\\n\\n  Get user details\\n\\n  Please do not pass the optional 'user' option unless you are a super user.\\n  Only a super user can view details for other users.\\n\\nOptions:\\n  -u, --user TEXT                 Account user_uuid/username to get details. If\\n                                  not passed, then the currently logged-in\\n                                  details will be returned.\\n  -f, --format TEXT               Format output and show only the given\\n                                  column(s) values.\\n  -q, --quiet                     Output user uuid only.\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n\"\n</code></pre> <pre><code>with normal_user():\n    # Positive scenario: Normal user getting their details\n    format_str = \"{'uuid': '{}'}\"\n    result = runner.invoke(app, [\"--format\", format_str])\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert len(result.stdout.replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n\n    result = runner.invoke(app, \"-q\")\n    assert result.exit_code == 0\n    assert len(result.stdout.replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n\n    user_uuid = result.stdout.replace(\"\\n\", \"\")\n    display(user_uuid)\n\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"--user\", user_uuid, \"--format\", format_str])\n    assert result.exit_code == 0\n\n    # Negative scenario: Normal user getting other user's details\n    result = runner.invoke(\n        app, [\"--user\", INVALID_UUID_FOR_TESTING, \"--format\", format_str]\n    )\n    display(result.stdout)\n    assert \"Insufficient permission to access other user's data\" in result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'d12065d3-48cb-4632-a4cc-db11b843399a\\n'\n\n'd12065d3-48cb-4632-a4cc-db11b843399a'\n\n\"Error: Insufficient permission to access other user's data\\n\"\n</code></pre> <pre><code># Helper context manager for testing\n\n_airt_service_super_user_token = None\n\n\n@contextmanager\ndef super_user():\n    global _airt_service_super_user_token\n    if _airt_service_super_user_token is None:\n        display(\"_airt_service_super_user_token is None, getting a token...\")\n\n        username = os.environ[SERVICE_SUPER_USER]\n        password = os.environ[SERVICE_PASSWORD]\n\n        Client.get_token(username=username, password=password)\n        _airt_service_super_user_token = Client.auth_token\n\n    try:\n        os.environ[SERVICE_TOKEN] = _airt_service_super_user_token\n\n        yield\n    finally:\n        del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>with super_user():\n    # Positive scenario: Super user getting their details\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"--format\", format_str])\n    assert result.exit_code == 0\n\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, \"-q\")\n    assert result.exit_code == 0\n\n    user_uuid = result.stdout.replace(\"\\n\", \"\")\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"--user\", user_uuid, \"--format\", format_str])\n    assert result.exit_code == 0\n\n    # Positive scenario: Super user accessing others user's details\n    other_user = User.ls()[0]\n    result = runner.invoke(app, [\"--user\", other_user.uuid, \"-q\"])\n    display(result.stdout)\n    result = runner.invoke(app, [\"--user\", other_user.username, \"-q\"])\n    display(result.stdout)\n\n    # Negative scenario: Super user accessing invalid user's details\n    result = runner.invoke(\n        app, [\"--user\", INVALID_UUID_FOR_TESTING, \"--format\", format_str]\n    )\n    display(result.stdout)\n    assert \"user uuid is incorrect\" in result.stdout\n    assert result.exit_code == 1\n\n    invalid_user_name = \"invalid_user_name\"\n    result = runner.invoke(app, [\"--user\", invalid_user_name, \"--format\", format_str])\n    display(result.stdout)\n    assert \"Incorrect username\" in result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'_airt_service_super_user_token is None, getting a token...'\n\n'd12065d3-48cb-4632-a4cc-db11b843399a\\n'\n\n'd12065d3-48cb-4632-a4cc-db11b843399a\\n'\n\n'Error: The user uuid is incorrect. Please try again.\\n'\n\n'Error: Incorrect username. Please try again.\\n'\n</code></pre> <pre><code># tests for user create. Without -q\n\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\nformat_str = \"{'username': '{}', 'uuid': '{}', 'phone_number': '{}'}\"\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-ph\",\n    \"+44123456789\",\n    \"-su\",\n    \"--format\",\n    format_str,\n]\n\n_user_name_q = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email_q = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n\ncmd_with_otp = [\n    \"create\",\n    \"-un\",\n    _user_name_q,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email_q,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"--otp\",\n    \"123456\",\n    \"--format\",\n    format_str,\n]\n\nwith super_user():\n    result = runner.invoke(app, cmd)\n\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert _user_name in str(result.stdout)\n    assert \"44123456789\" in str(result.stdout)\n\n    # Trying to create new user with existing email and username\n    result = runner.invoke(app, cmd)\n    display(result.stdout)\n    assert result.exit_code == 1\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(app, cmd_with_otp)\n    display(result.stdout)\n    assert result.exit_code == 1\n</code></pre> <pre><code>'username               uuid                                    phone_number\\nrandom_user_1772_2579  a3872746-c793-4c4a-864e-7d05a7d1e6ed     44123456789\\n'\n\n'Error: The requested username or email already exists. Try another.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># tests for user create. With -q\n\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    result = runner.invoke(app, cmd)\n    user_uuid = result.stdout[:-1]\n\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert len(result.stdout.replace(\"-\", \"\").replace(\"\\n\", \"\")) == 32\n</code></pre> <pre><code>'393cc29c-2671-4fcd-941c-d0cb4c6f864b\\n'\n</code></pre> <pre><code>assert_has_help([\"ls\"])\n</code></pre> <pre><code>'Usage: root ls [OPTIONS]\\n\\n  Return the list of users available in the server.\\n\\nOptions:\\n  -o, --offset INTEGER  The number of users to offset at the beginning. If\\n                        **None**, then the default value **0** will be used.\\n                        [default: 0]\\n  -l, --limit INTEGER   The maximum number of users to return from the server.\\n                        If None, then the default value 100 will be used.\\n                        [default: 100]\\n  --disabled            If set to **True**, then only the deleted users will be\\n                        returned. Else, the default value **False** will be used\\n                        to return only the list of active users.\\n  -f, --format TEXT     Format output and show only the given column(s) values.\\n  -q, --quiet           Output only user uuids separated by space\\n  -d, --debug           Set logger level to DEBUG and output everything.\\n  --help                Show this message and exit.\\n'\n</code></pre> <pre><code># Tests for ls\n# Testing positive scenario. Saving the token in env variable\n\n\ndef get_uuids_from_result(result) -&gt; List[str]:\n    return [uuid for uuid in result.stdout[:-1].split(\"\\n\")]\n\n\nwith super_user():\n    # Without quiet\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(app, [\"ls\", \"--format\", format_str])\n    assert \"username\" in result.stdout\n    assert result.exit_code == 0\n\n    # With quiet\n    result = runner.invoke(app, [\"ls\", \"-q\"])\n    display(result.stdout)\n\n    assert result.exit_code == 0\n    ids = get_uuids_from_result(result)\n    display(f\"{ids=}\")\n</code></pre> <pre><code>'d12065d3-48cb-4632-a4cc-db11b843399a\\ne53369c4-f5ea-478d-a078-147c0df00093\\n7f14fe1b-3c44-4bad-b1b8-e0da5a3429e8\\n68eb0ff7-9004-4ee6-baa2-4e6bfc62b68a\\n95c0ff28-4e0a-4be3-88ae-583bf1027ae7\\n8b872c68-5a47-4d43-b565-c2215b5c144c\\n8b8fee72-a02a-4b23-8eb4-6d438d67d5a8\\n4130a386-a377-4ea1-9309-c62442a66637\\na7b89f87-ceac-43ed-84c6-fc96ec0a52a1\\n1b6b11a9-a5f3-4ba6-a244-e3ec8e917798\\ne4c31874-a867-4fc6-8407-531fc4711c39\\n45b58d1a-9716-4e39-8a2a-4fa34e64c681\\nc2b6fa37-f439-48e9-9f60-d801ebd24920\\nf0853c45-5b0e-4ee9-87bc-c92235a1651d\\n90749653-705c-48ff-bfda-82eb3b7d840e\\ncbe73708-4ebc-4a15-9920-c5bfe07dc4a6\\n5f46973b-023d-4400-b2b3-4096aac0029a\\n452a0458-c450-4eeb-a6e2-937ae6ad8e6a\\nf04bd56a-2226-4a0d-ace3-fe9497736fb5\\n274d569b-c202-45a9-8a24-13d9dc525d84\\n6ef10bbe-fd24-4be2-bc21-7cf559979abd\\n016a5fe5-db60-4ef6-bfa4-f779ac4e01dc\\n07f88176-5fe1-4847-85d5-51e93aebff20\\naf7e2314-6c56-4b4e-a90c-cfebdae0ea52\\n2c4208d7-fdf8-48a9-bf54-ac72afaf6d3d\\nd02dd242-31d4-40e4-99e3-2a49be006093\\na3872746-c793-4c4a-864e-7d05a7d1e6ed\\n393cc29c-2671-4fcd-941c-d0cb4c6f864b\\n'\n\n\"ids=['d12065d3-48cb-4632-a4cc-db11b843399a', 'e53369c4-f5ea-478d-a078-147c0df00093', '7f14fe1b-3c44-4bad-b1b8-e0da5a3429e8', '68eb0ff7-9004-4ee6-baa2-4e6bfc62b68a', '95c0ff28-4e0a-4be3-88ae-583bf1027ae7', '8b872c68-5a47-4d43-b565-c2215b5c144c', '8b8fee72-a02a-4b23-8eb4-6d438d67d5a8', '4130a386-a377-4ea1-9309-c62442a66637', 'a7b89f87-ceac-43ed-84c6-fc96ec0a52a1', '1b6b11a9-a5f3-4ba6-a244-e3ec8e917798', 'e4c31874-a867-4fc6-8407-531fc4711c39', '45b58d1a-9716-4e39-8a2a-4fa34e64c681', 'c2b6fa37-f439-48e9-9f60-d801ebd24920', 'f0853c45-5b0e-4ee9-87bc-c92235a1651d', '90749653-705c-48ff-bfda-82eb3b7d840e', 'cbe73708-4ebc-4a15-9920-c5bfe07dc4a6', '5f46973b-023d-4400-b2b3-4096aac0029a', '452a0458-c450-4eeb-a6e2-937ae6ad8e6a', 'f04bd56a-2226-4a0d-ace3-fe9497736fb5', '274d569b-c202-45a9-8a24-13d9dc525d84', '6ef10bbe-fd24-4be2-bc21-7cf559979abd', '016a5fe5-db60-4ef6-bfa4-f779ac4e01dc', '07f88176-5fe1-4847-85d5-51e93aebff20', 'af7e2314-6c56-4b4e-a90c-cfebdae0ea52', '2c4208d7-fdf8-48a9-bf54-ac72afaf6d3d', 'd02dd242-31d4-40e4-99e3-2a49be006093', 'a3872746-c793-4c4a-864e-7d05a7d1e6ed', '393cc29c-2671-4fcd-941c-d0cb4c6f864b']\"\n</code></pre> <pre><code># tests for user ls\n\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # creating a new user\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n\n    display(f\"{created_user_uuid=}\\n\")\n\n    # checking the user id is not there in the ls when --disabled is passed\n    result = runner.invoke(app, [\"ls\", \"--disabled\", \"-q\"])\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert f\"{created_user_uuid}\" not in str(result.stdout)\n</code></pre> <pre><code>\"created_user_uuid='6d007a52-c15e-404c-945a-9396d38459e2'\\n\"\n\n'9b4c8afb-8c8f-4e26-b3a3-094dc0a29cd3\\na2b14123-0729-4194-a22d-8538facb7da1\\n003a19ea-a7ce-4f17-b959-8f4e7b05b261\\nc14e1d0c-cd19-4699-a9c6-cfe04b9b1df7\\n'\n</code></pre> <pre><code>assert_has_help([\"disable\"])\n</code></pre> <pre><code>'Usage: root disable [OPTIONS] USERS...\\n\\n  Disable a user in the server.\\n\\nArguments:\\n  USERS...  user_uuid/username to disabled.  To disable multiple users, please\\n            pass the uuids/names separated by space.  [required]\\n\\nOptions:\\n  --otp TEXT         Dynamically generated six-digit verification code from the\\n                     authenticator app. Please pass this optional argument only\\n                     if you have activated the MFA for your account.\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -q, --quiet        Output user uuid only.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># tests for user disable\n\n# creating a new user\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # disabling the newly created user\n    created_user_name = runner.invoke(\n        app, [\"details\", \"--user\", created_user_uuid, \"--format\", \"{'username': '{}'}\"]\n    )\n    result = runner.invoke(app, [\"disable\", created_user_name.stdout[:-1], \"-q\"])\n    disabled_user_uuid = result.stdout[:-1]\n\n    display(f\"{disabled_user_uuid=}\")\n\n    # list disabled users only\n    result = runner.invoke(app, [\"ls\", \"--disabled\", \"-q\"])\n    all_disabled_users = list(get_uuids_from_result(result))\n\n    display(f\"{all_disabled_users=}\")\n\n    assert result.exit_code == 0\n    assert disabled_user_uuid in all_disabled_users\n\n    # disabling already disabled user\n    result = runner.invoke(app, [\"disable\", created_user_uuid])\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(app, [\"disable\", created_user_uuid, \"--otp\", random_otp])\n    display(result.stdout)\n    assert result.exit_code == 1\n</code></pre> <pre><code>\"disabled_user_uuid='c8e24693-2f7e-4e4a-bad0-0f2888d7216f'\"\n\n\"all_disabled_users=['9b4c8afb-8c8f-4e26-b3a3-094dc0a29cd3', 'a2b14123-0729-4194-a22d-8538facb7da1', '003a19ea-a7ce-4f17-b959-8f4e7b05b261', 'c14e1d0c-cd19-4699-a9c6-cfe04b9b1df7', 'c8e24693-2f7e-4e4a-bad0-0f2888d7216f']\"\n\n'Error: The user has already been disabled.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># creating a new user\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\nformat_str = \"{'username': '{}', 'uuid': '{}'}\"\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"--format\",\n    format_str,\n]\n\nwith super_user():\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n    display(result.stdout)\n\n    assert result.exit_code == 0\n</code></pre> <pre><code>'username               uuid\\nrandom_user_7131_6824  989d1a2f-ea59-4171-b7b4-dc4dcbd97f8d\\n'\n</code></pre> <pre><code>assert_has_help([\"enable\"])\n</code></pre> <pre><code>'Usage: root enable [OPTIONS] USERS...\\n\\n  Enable a disabled user in the server.\\n\\nArguments:\\n  USERS...  user_uuid/username to enable. To enable multiple users, please pass\\n            the uuids/names separated by space.  [required]\\n\\nOptions:\\n  --otp TEXT         Dynamically generated six-digit verification code from the\\n                     authenticator app. Please pass this optional argument only\\n                     if you have activated the MFA for your account.\\n  -f, --format TEXT  Format output and show only the given column(s) values.\\n  -q, --quiet        Output user uuid only.\\n  -d, --debug        Set logger level to DEBUG and output everything.\\n  --help             Show this message and exit.\\n'\n</code></pre> <pre><code># tests for user enable\n\n# creating a new user\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # Creating a new user\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # disabling the newly created user\n    result = runner.invoke(app, [\"disable\", created_user_uuid, \"-q\"])\n    disabled_user_uuid = result.stdout[:-1]\n    display(result.stdout)\n    assert result.exit_code == 0\n\n    # enabling the newly created user\n    created_user_name = runner.invoke(\n        app, [\"details\", \"--user\", created_user_uuid, \"--format\", \"{'username': '{}'}\"]\n    )\n    result = runner.invoke(app, [\"enable\", created_user_name.stdout[:-1], \"-q\"])\n    enabled_user_id = result.stdout[:-1]\n\n    display(f\"{enabled_user_id=}\")\n\n    # list enabled users only\n    result = runner.invoke(app, [\"ls\", \"-q\", \"-l\", 500])\n    all_enabled_users = list(get_uuids_from_result(result))\n\n    display(f\"{all_enabled_users=}\")\n\n    assert result.exit_code == 0\n    assert enabled_user_id in all_enabled_users\n\n    # enabling already enabled user\n    result = runner.invoke(app, [\"enable\", created_user_uuid])\n\n    display(result.stdout)\n\n    assert result.exit_code == 1\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(app, [\"enable\", created_user_uuid, \"--otp\", random_otp])\n    display(result.stdout)\n    assert result.exit_code == 1\n</code></pre> <pre><code>'4984a628-ef22-453a-9433-9f11e7d054b0\\n'\n\n\"enabled_user_id='4984a628-ef22-453a-9433-9f11e7d054b0'\"\n\n\"all_enabled_users=['d12065d3-48cb-4632-a4cc-db11b843399a', 'e53369c4-f5ea-478d-a078-147c0df00093', '7f14fe1b-3c44-4bad-b1b8-e0da5a3429e8', '68eb0ff7-9004-4ee6-baa2-4e6bfc62b68a', '95c0ff28-4e0a-4be3-88ae-583bf1027ae7', '8b872c68-5a47-4d43-b565-c2215b5c144c', '8b8fee72-a02a-4b23-8eb4-6d438d67d5a8', '4130a386-a377-4ea1-9309-c62442a66637', 'a7b89f87-ceac-43ed-84c6-fc96ec0a52a1', '1b6b11a9-a5f3-4ba6-a244-e3ec8e917798', 'e4c31874-a867-4fc6-8407-531fc4711c39', '45b58d1a-9716-4e39-8a2a-4fa34e64c681', 'c2b6fa37-f439-48e9-9f60-d801ebd24920', 'f0853c45-5b0e-4ee9-87bc-c92235a1651d', '90749653-705c-48ff-bfda-82eb3b7d840e', 'cbe73708-4ebc-4a15-9920-c5bfe07dc4a6', '5f46973b-023d-4400-b2b3-4096aac0029a', '452a0458-c450-4eeb-a6e2-937ae6ad8e6a', 'f04bd56a-2226-4a0d-ace3-fe9497736fb5', '274d569b-c202-45a9-8a24-13d9dc525d84', '6ef10bbe-fd24-4be2-bc21-7cf559979abd', '016a5fe5-db60-4ef6-bfa4-f779ac4e01dc', '07f88176-5fe1-4847-85d5-51e93aebff20', 'af7e2314-6c56-4b4e-a90c-cfebdae0ea52', '2c4208d7-fdf8-48a9-bf54-ac72afaf6d3d', 'd02dd242-31d4-40e4-99e3-2a49be006093', 'a3872746-c793-4c4a-864e-7d05a7d1e6ed', '393cc29c-2671-4fcd-941c-d0cb4c6f864b', '6d007a52-c15e-404c-945a-9396d38459e2', '989d1a2f-ea59-4171-b7b4-dc4dcbd97f8d', '4984a628-ef22-453a-9433-9f11e7d054b0']\"\n\n'Error: The user has already been enabled.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># tests for enabling muliple users\n\n\n# creating a new user\ndef get_cmd_to_create_user():\n    random_user = randrange(10000)\n    cmd = [\n        \"create\",\n        \"-un\",\n        f\"random_user_{random_user}\",\n        \"-fn\",\n        \"random_first_name\",\n        \"-ln\",\n        \"random_last_name\",\n        \"-e\",\n        f\"random_user_{random_user}@email.com\",\n        \"-p\",\n        \"random_password\",\n        \"-st\",\n        \"small\",\n        \"-su\",\n        \"-q\",\n    ]\n    return cmd\n\n\nwith super_user():\n    # Creating a new user\n    result = runner.invoke(app, get_cmd_to_create_user())\n    display(result.stdout)\n    user_1 = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # Creating a new user\n    result = runner.invoke(app, get_cmd_to_create_user())\n    display(result.stdout)\n    user_2 = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # disabling the newly created user\n    result = runner.invoke(app, [\"disable\", user_1, user_2, \"-q\"])\n    disabled_user_uuid = result.stdout[:-1]\n    disabled_user_1_uuid = disabled_user_uuid.split(\"\\n\")[0]\n    disabled_user_2_uuid = disabled_user_uuid.split(\"\\n\")[1]\n\n    # enabling multiplee users\n    result = runner.invoke(app, [\"enable\", disabled_user_1_uuid, disabled_user_2_uuid])\n    assert disabled_user_1_uuid in result.stdout\n    assert disabled_user_2_uuid in result.stdout\n</code></pre> <pre><code>'44de0383-288a-4595-9331-ee5ad27dc0d2\\n'\n\n'efb4f4ab-eee5-4c57-8e20-e0368bea0415\\n'\n</code></pre> <pre><code># creating a new user\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # disabling the newly created user\n    result = runner.invoke(app, [\"disable\", created_user_uuid, \"-q\"])\n    disabled_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # enabling the newly created user\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(\n        app, [\"enable\", created_user_uuid, \"-q\", \"--format\", format_str]\n    )\n    display(result.stdout)\n</code></pre> <pre><code>'username               uuid\\nrandom_user_2376_4264  3be0acb4-fce8-4ae3-a004-ae3101617fe0\\n'\n</code></pre> <pre><code># creating a new user\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # disabling the newly created user\n    result = runner.invoke(app, [\"disable\", created_user_uuid, \"-q\"])\n    disabled_user_uuid = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n    # enabling the newly created user\n    format_str = \"{'username': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(\n        app, [\"enable\", created_user_uuid, \"-q\", \"--format\", format_str]\n    )\n    display(result.stdout)\n</code></pre> <pre><code>'username               uuid\\nrandom_user_1820_2809  3685e5d0-9e51-4b9d-afb5-09a5e5293bf4\\n'\n</code></pre> <pre><code>assert_has_help([\"update\"])\n</code></pre> <pre><code>'Usage: root update [OPTIONS]\\n\\n  Update existing user details in the server.\\n\\n  Please do not pass the optional user option unless you are a super user. Only\\n  a super user can update details for other users.\\n\\nOptions:\\n  --user TEXT             Account user_uuid/username to update. If not passed,\\n                          then the default value None will be used to update the\\n                          currently logged-in user details.\\n  -un, --username TEXT    New username for the user.\\n  -fn, --first_name TEXT  New first name for the user.\\n  -ln, --last_name TEXT   New last name for the user.\\n  -e, --email TEXT        New email for the user.\\n  --otp TEXT              Dynamically generated six-digit verification code from\\n                          the authenticator app. Please pass this optional\\n                          argument only if you have activated the MFA for your\\n                          account.\\n  -f, --format TEXT       Format output and show only the given column(s)\\n                          values.\\n  -q, --quiet             Output user uuid only.\\n  -d, --debug             Set logger level to DEBUG and output everything.\\n  --help                  Show this message and exit.\\n'\n</code></pre> <pre><code># tests for user update\n\n# Testing positive scenario. Updating the user details as super user\n\n_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    \"random_password\",\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    created_user_uuid = result.stdout[:-1]\n    assert result.exit_code == 0\n\n    # updating the user details as super user\n    format_str = \"{'first_name': '{}', 'uuid': '{}'}\"\n    result = runner.invoke(\n        app,\n        [\n            \"update\",\n            \"--user\",\n            created_user_uuid,\n            \"--first_name\",\n            \"new_first_name\",\n            \"--format\",\n            format_str,\n        ],\n    )\n\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert \"new_first_name\" in result.stdout\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(\n        app,\n        [\n            \"update\",\n            \"--user\",\n            created_user_uuid,\n            \"--first_name\",\n            \"new_first_name\",\n            \"--format\",\n            format_str,\n            \"--otp\",\n            random_otp,\n        ],\n    )\n    display(result.stdout)\n    assert \"MFA is not activated for the account.\" in result.stdout, result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'first_name      uuid\\nnew_first_name  42a7aad7-0d01-4e40-9db4-a8fc5d9a3ee5\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code># tests for user update\n\n# Testing positive scenario: Normal user updating their details\n\n_email = f\"random_user_{randrange(10000)}_{randrange(10000)}@email.com\"\n\n_new_user_id = None\n_new_user_name = f\"random_user_{randrange(10000)}_{randrange(10000)}\"\n_new_user_password = \"random_password\"\n\ncmd = [\n    \"create\",\n    \"-un\",\n    _new_user_name,\n    \"-fn\",\n    \"random_first_name\",\n    \"-ln\",\n    \"random_last_name\",\n    \"-e\",\n    _email,\n    \"-p\",\n    _new_user_password,\n    \"-st\",\n    \"small\",\n    \"-su\",\n    \"-q\",\n]\n\nwith super_user():\n    global _new_user_id\n\n    # Creating a new user with super user credentials\n    result = runner.invoke(app, cmd)\n    _new_user_id = result.stdout[:-1]\n\n    assert result.exit_code == 0\n\n# Testing positive scenario: Normal user updating their details\ntry:\n    Client.get_token(username=_new_user_name, password=_new_user_password)\n\n    os.environ[SERVICE_TOKEN] = Client.auth_token\n\n    # Updating the user details\n    _updated_first_name = \"new_first_name\"\n    _updated_last_name = \"new_last_name\"\n\n    result = runner.invoke(\n        app,\n        [\n            \"update\",\n            \"--first_name\",\n            _updated_first_name,\n            \"-ln\",\n            _updated_last_name,\n        ],\n    )\n\n    display(result.stdout)\n    assert result.exit_code == 0\n    assert _updated_first_name in result.stdout\n    assert _updated_last_name in result.stdout\n\n    # logging in with the new password\n    Client.get_token(username=_new_user_name, password=_new_user_password)\n    display(f\"Masked token = { '*' * (len(Client.auth_token))}\")\n    assert len(Client.auth_token) &gt;= 127\n\n    # Testing negative scenario: Updating other user details with normal user credentials\n    result = runner.invoke(\n        app,\n        [\n            \"update\",\n            \"--user\",\n            INVALID_UUID_FOR_TESTING,\n            \"--first_name\",\n            _updated_first_name,\n            \"-ln\",\n            _updated_last_name,\n        ],\n    )\n    assert result.exit_code == 1\n\nfinally:\n    del os.environ[SERVICE_TOKEN]\n</code></pre> <pre><code>'uuid                                  username               email                            super_user    is_mfa_active    disabled    created    subscription_type    first_name      last_name      phone_number    is_phone_number_verified\\n88341c0c-eba0-4019-845b-de698a5b381a  random_user_4748_8390  random_user_4706_7056@email.com  True          False            False       now        small                new_first_name  new_last_name  &lt;none&gt;          False\\n'\n\n'Masked token = *************************************************************************************************************************************************'\n</code></pre> <pre><code>result = runner.invoke(app, [\"register-phone-number\", \"--help\"])\n\ndisplay(result.stdout)\nassert \"register-phone-number\" in result.stdout\n</code></pre> <pre><code>\"Usage: root register-phone-number [OPTIONS]\\n\\n  Register and validate a phone number\\n\\n  This is an interactive command, one called it will send an OTP via SMS to the\\n  phone number. Please enter the OTP you have received in the interactive prompt\\n  to complete the phone number registration process.\\n\\n  After ten invalid OTP attempts, you have to call this command again to\\n  register the phone number.\\n\\nOptions:\\n  -p, --phone-number TEXT  Phone number to register. The phone number should\\n                           follow the pattern of the  country code followed by\\n                           your phone number. For example, **440123456789,\\n                           +440123456789, 00440123456789, +44 0123456789, and\\n                           (+44) 012 345 6789** are all valid formats for\\n                           registering a UK phone number. If the phone number is\\n                           not passed in the arguments, then the OTP will be\\n                           sent to the phone  number that was already registered\\n                           to the user's account.\\n  --otp TEXT               Dynamically generated six-digit verification code\\n                           from the authenticator app. Please pass this optional\\n                           argument only if you have activated the MFA for your\\n                           account.\\n  -d, --debug              Set logger level to DEBUG and output everything.\\n  --help                   Show this message and exit.\\n\"\n</code></pre> <pre><code>result = runner.invoke(app, [\"reset-password\", \"--help\"])\n\ndisplay(result.stdout)\nassert \"reset-password\" in result.stdout\n</code></pre> <pre><code>\"Usage: root reset-password [OPTIONS]\\n\\n  Reset the account password\\n\\n      We currently support two types of OTPs to reset the password for your\\n      account and you don't have to be logged in to call this command\\n\\n\\n\\n  The command switches to interactive mode unless all arguments are passed. The\\n  interactive mode will prompt you for the missing details and ask you to choose\\n  a recovery option to reset your password. Currently, we only support resetting\\n  the password either using a TOTP or SMS OTP.\\n\\n  If you have already activated the MFA for your account, then you can either\\n  enter the dynamically generated six-digit verification code from the\\n  authenticator app (TOTP) or request an OTP via SMS to your registered phone\\n  number.\\n\\n  If the MFA is not activated already, then you can only request the OTP via SMS\\n  to your registered phone number.\\n\\n  After selecting an option, please follow the on-screen instructions to reset\\n  your password. In case, you don't have MFA enabled or don't have access to\\n  your registered phone number, please contact your administrator.\\n\\nOptions:\\n  -u, --username TEXT       Account username to reset the password\\n  -np, --new-password TEXT  New password to set for the account\\n  --otp TEXT                Dynamically generated six-digit verification code\\n                            from the authenticator app\\n  -d, --debug               Set logger level to DEBUG and output everything.\\n  --help                    Show this message and exit.\\n\"\n</code></pre> <pre><code># Tests for reset_password: passing invalid totp\n\ncmd = [\n    \"reset-password\",\n    \"-u\",\n    \"invalid_username\",\n    \"-np\",\n    \"invalid_password\",\n    \"--otp\",\n    \"123456\",\n]\n\nresult = runner.invoke(app, cmd)\nassert \"Something went wrong\" in str(result.stdout), str(result.stdout)\ndisplay(result.stdout)\n</code></pre> <pre><code>'Something went wrong. The username or OTP you entered is incorrect. Please try again or contact your administrator.\\n'\n</code></pre> <pre><code>result = runner.invoke(mfa_app, [\"--help\"])\n\ndisplay(result.stdout)\nassert \"enable\" in result.stdout\n</code></pre> <pre><code>'Usage: enable [OPTIONS]\\n\\n  Enable Multi-Factor Authentication (MFA) for the user.\\n\\n  This is an interactive command and will generate a QR code. You can use an\\n  authenticator app, such as Google Authenticator to scan the code and enter the\\n  valid six-digit verification code from the authenticator app in the\\n  interactive prompt to enable and activate MFA for your account.\\n\\n  After three invalid attempts, you have to call this command again to generate\\n  a new QR code.\\n\\nOptions:\\n  --otp TEXT                      Dynamically generated six-digit verification\\n                                  code from the authenticator app. Please pass\\n                                  this optional argument only if you have\\n                                  activated the MFA for your account.\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n'\n</code></pre> <pre><code>result = runner.invoke(mfa_app, [\"disable\", \"--help\"])\n\ndisplay(result.stdout)\nassert \"disable\" in result.stdout\n</code></pre> <pre><code>\"Usage: root disable [OPTIONS]\\n\\n  Disable Multi-Factor Authentication (MFA) for the user.\\n\\n  The command switches to interactive mode unless the OTP argument is passed.\\n  The interactive mode will prompt you to  choose an OTP option you want to use.\\n  Currently, we only support disabling MFA either using a TOTP or SMS OTP.\\n\\n  If you have access to the authenticator application, then you can either enter\\n  the dynamically generated six-digit  verification code from the authenticator\\n  app (TOTP) or request an OTP via SMS to your registered phone number.\\n\\n  After selecting an option, please follow the on-screen instructions to disable\\n  MFA for your account. In case,  you don't have access to the authenticator app\\n  and your registered phone number, please contact your administrator.\\n\\n  Note: Please do not pass the user argument unless you are a super user. Only a\\n  super user can disable MFA for other users.\\n\\nOptions:\\n  -u, --user TEXT  Account user_uuid/username to disable MFA. If not passed,\\n                   then the default value None will be used to disable MFA for\\n                   the currently logged-in user.\\n  --otp TEXT       Dynamically generated six-digit verification code from the\\n                   authenticator app or the OTP you have received via SMS.\\n  --help           Show this message and exit.\\n\"\n</code></pre> <pre><code>with normal_user():\n    random_otp = 123456\n\n    # Negative Scenario. Non-MFA user passing otp\n    result = runner.invoke(mfa_app, [\"disable\", \"--otp\", random_otp])\n\n    display(result.stdout)\n    assert (\n        \"Please pass the OTP only after activating the MFA\" in result.stdout\n    ), result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code>with normal_user():\n    random_otp = 123456\n    result = runner.invoke(\n        mfa_app, [\"disable\", \"--user\", INVALID_UUID_FOR_TESTING, \"--otp\", random_otp]\n    )\n\n    display(result.stdout)\n    assert result.exit_code == 1\n    assert (\n        \"Insufficient permission to access other user's data\" in result.stdout\n    ), result.stdout\n</code></pre> <pre><code>\"Error: Insufficient permission to access other user's data\\n\"\n</code></pre> <pre><code>result = runner.invoke(app, [\"--help\"])\ndisplay(result.stdout)\nassert \"Commands for enabling and disabling Multi-Factor\" in result.stdout\n\nresult = runner.invoke(app, [\"mfa\", \"--help\"])\n\nassert \"Disable Multi-Factor Authentication (MFA) for the user\" in result.stdout\ndisplay(result.stdout)\n</code></pre> <pre><code>'Usage: root [OPTIONS] COMMAND [ARGS]...\\n\\n  A set of commands for managing users and their authentication in the server.\\n\\nOptions:\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n\\nCommands:\\n  create                 Create a new user in the server.\\n  details                Get user details\\n  disable                Disable a user in the server.\\n  enable                 Enable a disabled user in the server.\\n  ls                     Return the list of users available in the server.\\n  mfa                    Commands for enabling and disabling Multi-Factor...\\n  register-phone-number  Register and validate a phone number\\n  reset-password         Reset the account password\\n  update                 Update existing user details in the server.\\n'\n\n'Usage: root mfa [OPTIONS] COMMAND [ARGS]...\\n\\n  Commands for enabling and disabling Multi-Factor Authentication (MFA).\\n\\nOptions:\\n  --help  Show this message and exit.\\n\\nCommands:\\n  disable  Disable Multi-Factor Authentication (MFA) for the user.\\n  enable   Enable Multi-Factor Authentication (MFA) for the user.\\n'\n</code></pre> <pre><code>with normal_user():\n    result = runner.invoke(sso_app, [\"google\"])\n\n    display(result.stdout)\n    assert result.exit_code == 1\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(sso_app, [\"google\", \"--otp\", random_otp])\n\n    display(result.stdout)\n    assert (\n        \"Please pass the OTP only after activating the MFA for your account.\"\n        in result.stdout\n    ), result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Error: SSO is not enabled for the provider.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code>result = runner.invoke(sso_app, [\"--help\"])\n\ndisplay(result.stdout)\nassert \"enable\" in result.stdout\n</code></pre> <pre><code>'Usage: root [OPTIONS] COMMAND [ARGS]...\\n\\n  Commands for enabling and disabling Single sign-on (SSO).\\n\\nOptions:\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n\\nCommands:\\n  disable  Disable Single sign-on (SSO) for the user.\\n  enable   Enable Single sign-on (SSO) for the user\\n'\n</code></pre> <pre><code>with normal_user():\n    sso_email = \"sso_email@mail.com\"\n    new_sso_email = \"new_sso_email@mail.com\"\n    sso_provider = \"google\"\n\n    # Positive scenario: Disabling SSO\n    result = runner.invoke(sso_app, [\"disable\", sso_provider])\n\n    # Positive scenario: Enabling SSO\n    result = runner.invoke(sso_app, [\"enable\", sso_provider, \"-e\", new_sso_email])\n\n    display(result.stdout)\n    assert (\n        f\"Single sign-on (SSO) is successfully enabled for {sso_provider}\"\n        in result.stdout\n    ), result.stdout\n    assert new_sso_email in result.stdout\n    assert result.exit_code == 0\n\n    # Positive scenario: Disabling SSO\n    result = runner.invoke(sso_app, [\"disable\", sso_provider])\n\n    display(result.stdout)\n    assert (\n        f\"Single sign-on (SSO) is successfully disabled for {sso_provider}\"\n        in result.stdout\n    ), result.stdout\n    assert result.exit_code == 0, result.exit_code\n\n    # Negative Scenario. Non-MFA user passing otp\n    random_otp = 123456\n    result = runner.invoke(\n        sso_app, [\"enable\", sso_provider, \"-e\", sso_email, \"--otp\", random_otp]\n    )\n\n    display(result.stdout)\n    assert (\n        \"Please pass the OTP only after activating the MFA for your account\"\n        in result.stdout\n    ), result.stdout\n    assert result.exit_code == 1\n</code></pre> <pre><code>'Single sign-on (SSO) is successfully enabled for google. Please use new_sso_email@mail.com as the email address while authenticating with google.\\n'\n\n'Single sign-on (SSO) is successfully disabled for google.\\n'\n\n'Error: MFA is not activated for the account. Please pass the OTP only after activating the MFA for your account.\\n'\n</code></pre> <pre><code>result = runner.invoke(app, [\"--help\"])\ndisplay(result.stdout)\nassert \"Commands for enabling and disabling Single sign-on\" in result.stdout\n\nresult = runner.invoke(app, [\"sso\", \"--help\"])\n\ndisplay(result.stdout)\nassert \"Enable Single sign-on (SSO)\" in result.stdout\n</code></pre> <pre><code>'Usage: root [OPTIONS] COMMAND [ARGS]...\\n\\n  A set of commands for managing users and their authentication in the server.\\n\\nOptions:\\n  --install-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Install completion for the specified shell.\\n  --show-completion [bash|zsh|fish|powershell|pwsh]\\n                                  Show completion for the specified shell, to\\n                                  copy it or customize the installation.\\n  --help                          Show this message and exit.\\n\\nCommands:\\n  create                 Create a new user in the server.\\n  details                Get user details\\n  disable                Disable a user in the server.\\n  enable                 Enable a disabled user in the server.\\n  ls                     Return the list of users available in the server.\\n  mfa                    Commands for enabling and disabling Multi-Factor...\\n  register-phone-number  Register and validate a phone number\\n  reset-password         Reset the account password\\n  sso                    Commands for enabling and disabling Single sign-on...\\n  update                 Update existing user details in the server.\\n'\n\n'Usage: root sso [OPTIONS] COMMAND [ARGS]...\\n\\n  Commands for enabling and disabling Single sign-on (SSO).\\n\\nOptions:\\n  --help  Show this message and exit.\\n\\nCommands:\\n  disable  Disable Single sign-on (SSO) for the user.\\n  enable   Enable Single sign-on (SSO) for the user\\n'\n</code></pre>"},{"location":"CLI_Version/","title":"CLI_Version","text":"<pre><code>from typer.testing import CliRunner\n\nimport airt._sanitizer\n</code></pre>"},{"location":"Client/","title":"Full pipeline example","text":"<pre><code>import os\nimport tempfile\n\nimport airt._sanitizer\n</code></pre> <pre><code># full pipeline example\n\nfrom datetime import timedelta\n\n# 0. Obtain access token\nClient.get_token()\n\n# 1. Connect, process and pull the datasource to the server\ndb = DataBlob.from_s3(\n    uri=\"s3://test-airt-service/ecommerce_behavior_notebooks\",\n    access_key=os.environ[\"AWS_ACCESS_KEY_ID\"],\n    secret_key=os.environ[\"AWS_SECRET_ACCESS_KEY\"],\n    cloud_provider=\"aws\",\n    region=\"eu-west-1\",\n)\n\ndb.progress_bar()\n\nds = db.to_datasource(file_type=\"parquet\", index_column=\"user_id\", sort_by=\"event_time\")\n\nds.progress_bar()\n\n# 2. Train and evaluate a model\nmodel = ds.train(\n    client_column=\"user_id\",\n    target_column=\"event_type\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3),\n)\nmodel.progress_bar()\ndisplay(model.evaluate())\n\n# 3. Make prediction using existing data source\n\npredictions = model.predict()\npredictions.progress_bar()\n\ndisplay(predictions.to_pandas())\n\nwith tempfile.TemporaryDirectory(prefix=\"test_to_local_\") as d:\n    assert os.listdir(d) == []\n    display(list(os.listdir(d)))\n\n    r = predictions.to_local(path=d)\n\n    downloaded_files = sorted(list(os.listdir(d)))\n    assert downloaded_files == [\"part.0.parquet\"], downloaded_files\n    display(f\"{downloaded_files=}\")\n</code></pre> <pre><code>  0%|          | 0/1 [00:00&lt;?, ?it/s]  0%|          | 0/1 [00:05&lt;?, ?it/s]  0%|          | 0/1 [00:10&lt;?, ?it/s]  0%|          | 0/1 [00:15&lt;?, ?it/s]100%|##########| 1/1 [00:20&lt;00:00,  5.13s/it]100%|##########| 1/1 [00:20&lt;00:00, 20.53s/it]\n  0%|          | 0/1 [00:00&lt;?, ?it/s]  0%|          | 0/1 [00:00&lt;?, ?it/s]  0%|          | 0/1 [00:05&lt;?, ?it/s]  0%|          | 0/1 [00:10&lt;?, ?it/s]  0%|          | 0/1 [00:15&lt;?, ?it/s]  0%|          | 0/1 [00:20&lt;?, ?it/s]  0%|          | 0/1 [00:25&lt;?, ?it/s]  0%|          | 0/1 [00:30&lt;?, ?it/s]100%|##########| 1/1 [00:35&lt;00:00,  5.07s/it]100%|##########| 1/1 [00:35&lt;00:00, 35.64s/it]\n  0%|          | 0/5 [00:00&lt;?, ?it/s]100%|##########| 5/5 [00:00&lt;00:00, 82.62it/s]\n</code></pre>   |           | eval  | |-----------|-------| | accuracy  | 0.985 | | recall    | 0.962 | | precision | 0.934 |     |           | Score    | |-----------|----------| | user_id   |          | | 520088904 | 0.979853 | | 530496790 | 0.979157 | | 561587266 | 0.979055 | | 518085591 | 0.978915 | | 558856683 | 0.977960 | | 520772685 | 0.004043 | | 514028527 | 0.003890 | | 518574284 | 0.001346 | | 532364121 | 0.001341 | | 532647354 | 0.001139 |   <pre><code>[]\n\n\"downloaded_files=['part.0.parquet']\"\n</code></pre>"},{"location":"Constants/","title":"Constants","text":""},{"location":"Docstring_helpers/","title":"Docstring helpers","text":"<pre><code>import airt._testing.activate_by_import\n</code></pre> <pre><code>[INFO] airt.testing.activate_by_import: Testing environment activated.\n</code></pre> <pre><code>import numpy as np\nimport pytest\n\nimport airt._sanitizer\n</code></pre> <pre><code>def f(i: str, *, a: int = 0):\n\"\"\"Very cool function\n\n    **f** is a very cool function\n\n    Args:\n        i: something\n        a: something else\n\n    Example:\n        The following snippet prints out greetings for two names:\n        ```python\n        print(\"hello {fill in name_1}\")\n        print(\"goodbye {fill in name_2}\")\n        ```\n        Output:\n        ```\n        hello John\n        goodbye Jane\n        ```\n\n\n    Example:\n        Yet another example\n        ```python\n        password = {fill in password}\n        print(f\"this is your password: {password}\")\n        ```\n        and then you can login with it:\n        ```python\n\n        print(\"Logging in...\")\n        ```\n\n    \"\"\"\n    raise NotImplemented()\n</code></pre> <pre><code>def g():\n\"\"\"Function\n\n    Example:\n        ```python\n\n        print(\"s\")\n        ```\n    \"\"\"\n\n\n_extract_examples_from_docstring(g)\n</code></pre> <pre><code>['\\n\\nprint(\"s\")\\n']\n</code></pre> <pre><code>_extract_examples_from_docstring(f)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'i'\n&lt;module&gt;:6: No type or annotation for parameter 'a'\n\n['\\nprint(\"hello {fill in name_1}\")\\nprint(\"goodbye {fill in name_2}\")\\n',\n '\\npassword = {fill in password}\\nprint(f\"this is your password: {password}\")\\n\\n\\n\\n\\nprint(\"Logging in...\")\\n']\n</code></pre> <pre><code>expected = [\n    textwrap.dedent(\n\"\"\"\n            print(\"hello {fill in name_1}\")\n            print(\"goodbye {fill in name_2}\")\n        \"\"\"\n    ),\n    textwrap.dedent(\n\"\"\"\n            password = {fill in password}\n            print(f\"this is your password: {password}\")\n\n\n\n\n            print(\"Logging in...\")\n        \"\"\"\n    ),\n]\n\nexamples = _extract_examples_from_docstring(f)\nfor example in examples:\n    print(example)\n\nnp.testing.assert_array_equal(examples, expected)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'i'\n&lt;module&gt;:6: No type or annotation for parameter 'a'\n</code></pre> <pre>\nprint(\"hello {fill in name_1}\")\nprint(\"goodbye {fill in name_2}\")\n\n</pre> <pre>\npassword = {fill in password}\nprint(f\"this is your password: {password}\")\n\n\n\n\nprint(\"Logging in...\")\n\n</pre> <pre><code>expected = [\"name_1\", \"name_2\", \"password\"]\n\nkeywords = _get_keywords(examples)\n\nnp.testing.assert_array_equal(keywords, expected)\n</code></pre> <pre><code>expected = [\n    textwrap.dedent(\n\"\"\"\n            print(\"hello davor\")\n            print(\"goodbye kumaran\")\n        \"\"\"\n    ),\n    textwrap.dedent(\n\"\"\"\n            password = 'not_a_password'\n            print(f\"this is your password: {password}\")\n\n\n\n\n            print(\"Logging in...\")\n        \"\"\"\n    ),\n]\n\nactual = _replace_keywords(\n    examples, name_1=\"davor\", name_2=\"kumaran\", password=\"'not_a_password'\"\n)\nfor x in actual:\n    print(x)\n\nnp.testing.assert_array_equal(actual, expected)\n</code></pre> <pre>\nprint(\"hello davor\")\nprint(\"goodbye kumaran\")\n\n</pre> <pre>\npassword = 'not_a_password'\nprint(f\"this is your password: {password}\")\n\n\n\n\nprint(\"Logging in...\")\n\n</pre> <pre><code>Panel(\n    Group(\n        \"\",\n        _format_output(\"hello world and one more time world\", title=\"output\"),\n        _format_output(\n            \"hello world and one more time world\",\n            title=\"output\",\n            sub_dict={\"world\": \"*****\"},\n        ),\n        _format_output(\n            \"hello world and one more time world\",\n            title=\"output\",\n            sub_dict={\"world\": \"*****\"},\n            supress=True,\n        ),\n    ),\n    title=\"Test: _format_output()\",\n)\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Test: _format_output() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 hello world and one more time world                                                                         \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 hello ***** and one more time *****                                                                         \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <p>source</p>"},{"location":"Docstring_helpers/#run_examples_from_docstring","title":"run_examples_from_docstring","text":"<pre><code> run_examples_from_docstring (o:Any, supress_stdout:bool=False,\n                              supress_stderr:bool=False,\n                              sub_dict:Optional[Dict[str,str]]=None,\n                              **kwargs)\n</code></pre> <p>Runs example from a docstring</p> <p>Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process.</p> <p>Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library.</p> <p>Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords</p> <pre><code>**kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples\n</code></pre> <p>Raises: ValueError: if some params are missing from the kwargs RuntimeException: if example fails</p> <p>Example: ```python</p> <pre><code>def f():\n    ```python\n    Example:\n        print(\"Hello {fill in name}!\")\n        print(\"Goodbye {fill in other_name}!\")\n    ```\n    pass\n\nrun_examples_from_docstring(f, name=\"John\", other_name=\"Jane\")\n```\n</code></pre> <p>``` python print(run_examples_from_docstring.doc) <pre><code>&lt;pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"&gt;Runs example from a docstring\n&amp;#10;    Parses docstring of an objects looking for examples. The examples are then saved into files and executed\n    in a separate process.\n&amp;#10;    Note:\n        Execution context is not the same as the one in the notebook because we want examples to work from\n        user code. Make sure you compiled the library prior to executing the examples, otherwise you might\n        be running them agains an old version of the library.\n&amp;#10;    Args:\n        o: an object, typically a function or a class, for which docstring is being parsed for examples\n        supress_stdout: omit stdout from output, typically due to security considerations\n        supress_stderr: omit stderr from output, typically due to security considerations\n        sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and\n            stderr, typically used to mask sensitive information such as passwords\n&amp;#10;        **kwargs: arguments use to replace &lt;span style=\"color: #008000; text-decoration-color: #008000\"&gt;\"{fill in **param**}\"&lt;/span&gt; in docstring with the actual values when running \nexamples\n&amp;#10;    Raises:\n        ValueError: if some params are missing from the **kwargs**\n        RuntimeException: if example fails\n&amp;#10;    Example:\n        ```python\n&amp;#10;        def &lt;span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\"&gt;f&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;()&lt;/span&gt;:\n            ```python\n            Example:\n                &lt;span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\"&gt;print&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;(&lt;/span&gt;&lt;span style=\"color: #008000; text-decoration-color: #008000\"&gt;\"Hello {fill in name}!\"&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;)&lt;/span&gt;\n                &lt;span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\"&gt;print&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;(&lt;/span&gt;&lt;span style=\"color: #008000; text-decoration-color: #008000\"&gt;\"Goodbye {fill in other_name}!\"&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;)&lt;/span&gt;\n            ```\n&amp;#10;            pass\n&amp;#10;\n        &lt;span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\"&gt;run_examples_from_docstring&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;(&lt;/span&gt;f, &lt;span style=\"color: #808000; text-decoration-color: #808000\"&gt;name&lt;/span&gt;=&lt;span style=\"color: #008000; text-decoration-color: #008000\"&gt;\"John\"&lt;/span&gt;, &lt;span style=\"color: #808000; text-decoration-color: #808000\"&gt;other_name&lt;/span&gt;=&lt;span style=\"color: #008000; text-decoration-color: #008000\"&gt;\"Jane\"&lt;/span&gt;&lt;span style=\"font-weight: bold\"&gt;)&lt;/span&gt;\n        ```\n    &amp;#10;&lt;/pre&gt;\n\n``` python\nexamples = _extract_examples_from_docstring(run_examples_from_docstring)\ndisplay(Panel(examples[0]))\n</code></pre></p> <pre><code>&lt;module&gt;:11: No type or annotation for parameter 'o'\n&lt;module&gt;:12: No type or annotation for parameter 'supress_stdout'\n&lt;module&gt;:13: No type or annotation for parameter 'supress_stderr'\n&lt;module&gt;:14: No type or annotation for parameter 'sub_dict'\n&lt;module&gt;:17: No type or annotation for parameter '**kwargs'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\nFailed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502 def f():                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code>run_examples_from_docstring(\n    f,\n    name_1=\"davor\",\n    name_2=\"all\",\n    password='\"zeko\"',\n    supress_stderr=True,\n    sub_dict={\"zeko\": \"*\" * 12},\n)\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'i'\n&lt;module&gt;:6: No type or annotation for parameter 'a'\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     print(\"hello {fill in name_1}\")                                                                             \u2502\n\u2502     print(\"goodbye {fill in name_2}\")                                                                           \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 hello davor                                                                                                 \u2502 \u2502\n\u2502 \u2502 goodbye all                                                                                                 \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     password = {fill in password}                                                                               \u2502\n\u2502     print(f\"this is your password: {password}\")                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502                                                                                                                 \u2502\n\u2502     print(\"Logging in...\")                                                                                      \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 this is your password: ************                                                                         \u2502 \u2502\n\u2502 \u2502 Logging in...                                                                                               \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code>with pytest.raises(ValueError) as e:\n    run_examples_from_docstring(f, name_1=\"davor\")\n\ne.value\n</code></pre> <pre><code>&lt;module&gt;:5: No type or annotation for parameter 'i'\n&lt;module&gt;:6: No type or annotation for parameter 'a'\n\nValueError(\"{'name_1', 'name_2', 'password'} &gt; {'name_1'}\")\n</code></pre> <pre><code>class C:\n\"\"\"Cool class with broken example\n\n    Example:\n        ```python\n        raise NotImplementedError(\"expected to fail\")\n        ```\n    \"\"\"\n\n    pass\n</code></pre> <pre><code>with pytest.raises(RuntimeError) as e:\n    run_examples_from_docstring(C)\ne.value\n</code></pre> <pre>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Example:                                                                                                        \u2502\n\u2502                                                                                                                 \u2502\n\u2502     raise NotImplementedError(\"expected to fail\")                                                               \u2502\n\u2502                                                                                                                 \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 Traceback (most recent call last):                                                                          \u2502 \u2502\n\u2502 \u2502   File \"/tmp/tmpk7qcxvxy/example.py\", line 2, in &lt;module&gt;                                                   \u2502 \u2502\n\u2502 \u2502     raise NotImplementedError(\"expected to fail\")                                                           \u2502 \u2502\n\u2502 \u2502 NotImplementedError: expected to fail                                                                       \u2502 \u2502\n\u2502 \u2502                                                                                                             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> <pre><code>RuntimeError('Traceback (most recent call last):\\n  File \"/tmp/tmpk7qcxvxy/example.py\", line 2, in &lt;module&gt;\\n    raise NotImplementedError(\"expected to fail\")\\nNotImplementedError: expected to fail\\n')\n</code></pre>"},{"location":"Logger/","title":"Logger","text":"<pre><code>import pytest\n\nimport airt._sanitizer\n</code></pre>"},{"location":"Logger/#get_logger","title":"get_logger","text":"<pre><code> get_logger (name:str)\n</code></pre> <p>An internal function to set the default logger configuration</p> <p>Returns: An instance of Logger with custom configuration that can be used across the CLI for logging</p>"},{"location":"Logger/#supress_timestamps","title":"supress_timestamps","text":"<pre><code> supress_timestamps (flag:bool=True)\n</code></pre>"},{"location":"Logger/#set_level","title":"set_level","text":"<pre><code> set_level (level:int)\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Python client for airt service</li> <li>Tutorial</li> <li>API<ul> <li>airt.client</li> </ul> </li> <li>CLI<ul> <li>airt</li> </ul> </li> <li>Releases</li> </ul>"},{"location":"Sanitize_Secrets/","title":"Sanitize Secrets","text":"<pre><code>import random\nimport string\n</code></pre> <pre><code>def generate_random_string(n: int = 20, include_punctuation: bool = False):\n    characters_to_use = string.ascii_uppercase + string.digits\n    if include_punctuation:\n        characters_to_use = characters_to_use + '!\"#$%&amp;*+,-.:;&lt;=&gt;?@[\\\\]^_`{|}~'\n    return \"\".join(random.choices(characters_to_use, k=n))\n</code></pre> <pre><code>generate_random_string()\n</code></pre> <pre><code>'BB2W6PZ28UDFRKF9ZN8Q'\n</code></pre> <pre><code>generate_random_string(n=36, include_punctuation=True)\n</code></pre> <pre><code>'5;18T|]}R*38=.64AU0\"}F`;`\"T,XK=L86|V'\n</code></pre> <pre><code>string.punctuation\n</code></pre> <pre><code>'!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~'\n</code></pre>"},{"location":"Sanitize_Secrets/#sanitize_secrets","title":"sanitize_secrets","text":"<pre><code> sanitize_secrets (s:str)\n</code></pre> <pre><code>test_string = (\n\"\"\"[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId \\'[\"OccurredTime\"]\\' --blocksize 256MB --kwargs_json \\'{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}\\' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '\"\"\"\n    + generate_random_string(20)\n    + \"\"\"', 'AWS_SECRET_ACCESS_KEY': '\"\"\"\n    + generate_random_string(36)\n    + \"\"\"', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '\"\"\"\n    + f\"{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\"\n    + \"\"\"', 'AZURE_TENANT_ID': '\"\"\"\n    + f\"{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\"\n    + \"\"\"', 'AZURE_CLIENT_ID': '\"\"\"\n    + f\"{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\"\n    + \"\"\"', 'AZURE_CLIENT_SECRET': '\"\"\"\n    + generate_random_string(40, include_punctuation=True)\n    + \"\"\"', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '\"\"\"\n    + generate_random_string(26)\n    + \"\"\"', 'AIRT_TOKEN_SECRET_KEY': 'asdflkjoemnnaaserniuhenbcloieenfase', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': 'SuperSecretPassword', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\"\"\"\n)\nprint(test_string)\nexpected = \"\"\"[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId \\'[\"OccurredTime\"]\\' --blocksize 256MB --kwargs_json \\'{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}\\' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\"\"\"\nactual = sanitize_secrets(test_string)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '1WNAY3Y5D1H2J8RG9RO1', 'AWS_SECRET_ACCESS_KEY': 'UHNAMZZJN4FFVQ1W8BSZU4VB8B2FSWJKWEZ8', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '0UG6WBS5-OF5W-X4NC-SEXF-MWTAWW6A1LAQ', 'AZURE_TENANT_ID': 'V28OBCPX-32VS-87R9-TZUN-FV5Y6FD1N7RF', 'AZURE_CLIENT_ID': '39AFB0E8-5U3Z-OXK9-U70W-S12WGN5K93WV', 'AZURE_CLIENT_SECRET': '-~9&amp;_50N:{4UOKN{T\"MLWK7B+VS146Y+,18%@SR2', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': 'F781RRC2THVQV8W87MKGBHTMB2', 'AIRT_TOKEN_SECRET_KEY': 'asdflkjoemnnaaserniuhenbcloieenfase', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': 'SuperSecretPassword', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\n[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'}\n[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'}\n</code></pre> <pre><code>test = (\n    f\"\"\"--env AWS_SECRET_ACCESS_KEY=\\'{generate_random_string(40)}\\' --env AWS_DEFAULT_REGION=\\'eu-west-1\\' --env AZURE_SUBSCRIPTION_ID=\\'{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\\' \"\"\"\n    + f\"\"\"--env AZURE_TENANT_ID=\\'{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\\' --env AZURE_CLIENT_ID=\\'{generate_random_string(8)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(4)}-{generate_random_string(12)}\\' \"\"\"\n    + f\"\"\"--env AZURE_CLIENT_SECRET=\\'{generate_random_string(40, include_punctuation=True)}\\' --env AZURE_STORAGE_ACCOUNT_PREFIX=\\'kumsairtsdev\\' --env AZURE_RESOURCE_GROUP=\\'kumaran-airt-service-dev\\' --env STORAGE_BUCKET_PREFIX=\\'kumaran-airt-service\\' --env DB_USERNAME=\\'root\\' --env DB_PASSWORD=\\'SuperSecretPassword\\' --env DB_HOST=\\'kumaran-mysql\\' --env DB_PORT=\\'3306\\' --env DB_DATABASE=\\'airt_service\\' --env DB_DATABASE_SERVER=\\'mysql\\'\"\"\"\n)\nexpected = \"\"\"--env AWS_SECRET_ACCESS_KEY = '****************************************' --env AWS_DEFAULT_REGION='eu-west-1' --env AZURE_SUBSCRIPTION_ID = '************************************' --env AZURE_TENANT_ID = '************************************' --env AZURE_CLIENT_ID = '************************************' --env AZURE_CLIENT_SECRET = '****************************************' --env AZURE_STORAGE_ACCOUNT_PREFIX='kumsairtsdev' --env AZURE_RESOURCE_GROUP='kumaran-airt-service-dev' --env STORAGE_BUCKET_PREFIX='kumaran-airt-service' --env DB_USERNAME='root' --env DB_PASSWORD = '****************************************' --env DB_HOST='kumaran-mysql' --env DB_PORT='3306' --env DB_DATABASE='airt_service' --env DB_DATABASE_SERVER='mysql'\"\"\"\nactual = sanitize_secrets(test)\nprint(actual)\nprint(expected)\nassert actual == expected\n</code></pre> <pre><code>--env AWS_SECRET_ACCESS_KEY = '****************************************' --env AWS_DEFAULT_REGION='eu-west-1' --env AZURE_SUBSCRIPTION_ID = '************************************' --env AZURE_TENANT_ID = '************************************' --env AZURE_CLIENT_ID = '************************************' --env AZURE_CLIENT_SECRET = '****************************************' --env AZURE_STORAGE_ACCOUNT_PREFIX='kumsairtsdev' --env AZURE_RESOURCE_GROUP='kumaran-airt-service-dev' --env STORAGE_BUCKET_PREFIX='kumaran-airt-service' --env DB_USERNAME='root' --env DB_PASSWORD = '****************************************' --env DB_HOST='kumaran-mysql' --env DB_PORT='3306' --env DB_DATABASE='airt_service' --env DB_DATABASE_SERVER='mysql'\n--env AWS_SECRET_ACCESS_KEY = '****************************************' --env AWS_DEFAULT_REGION='eu-west-1' --env AZURE_SUBSCRIPTION_ID = '************************************' --env AZURE_TENANT_ID = '************************************' --env AZURE_CLIENT_ID = '************************************' --env AZURE_CLIENT_SECRET = '****************************************' --env AZURE_STORAGE_ACCOUNT_PREFIX='kumsairtsdev' --env AZURE_RESOURCE_GROUP='kumaran-airt-service-dev' --env STORAGE_BUCKET_PREFIX='kumaran-airt-service' --env DB_USERNAME='root' --env DB_PASSWORD = '****************************************' --env DB_HOST='kumaran-mysql' --env DB_PORT='3306' --env DB_DATABASE='airt_service' --env DB_DATABASE_SERVER='mysql'\n</code></pre> <pre><code>test = f\"DataBlob(id=185, uuid=UUID('d90014da-a38b-4b38-a26e-24849d5c0879'), type='s3', uri='s3://{generate_random_string(20)}:{generate_random_string(40)}@bucket', source='s3://bucket', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 4, 59, 49), user_id=34, pulled_on=None, tags=[Tag(name='new_tag', id=9, created=datetime.datetime(2022, 10, 18, 12, 30, 43), uuid=UUID('1662ea89-5018-4728-a71a-ecc502a22fd7'))])\"\nexpected = \"DataBlob(id=185, uuid=UUID('d90014da-a38b-4b38-a26e-24849d5c0879'), type='s3', uri='s3://****************************************@bucket', source='s3://bucket', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 4, 59, 49), user_id=34, pulled_on=None, tags=[Tag(name='new_tag', id=9, created=datetime.datetime(2022, 10, 18, 12, 30, 43), uuid=UUID('1662ea89-5018-4728-a71a-ecc502a22fd7'))])\"\nactual = sanitize_secrets(test)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>DataBlob(id=185, uuid=UUID('d90014da-a38b-4b38-a26e-24849d5c0879'), type='s3', uri='s3://****************************************@bucket', source='s3://bucket', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 4, 59, 49), user_id=34, pulled_on=None, tags=[Tag(name='new_tag', id=9, created=datetime.datetime(2022, 10, 18, 12, 30, 43), uuid=UUID('1662ea89-5018-4728-a71a-ecc502a22fd7'))]\nDataBlob(id=185, uuid=UUID('d90014da-a38b-4b38-a26e-24849d5c0879'), type='s3', uri='s3://****************************************@bucket', source='s3://bucket', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 4, 59, 49), user_id=34, pulled_on=None, tags=[Tag(name='new_tag', id=9, created=datetime.datetime(2022, 10, 18, 12, 30, 43), uuid=UUID('1662ea89-5018-4728-a71a-ecc502a22fd7'))]\n</code></pre> <pre><code>test = f\"DataBlob(id=189, uuid=UUID('c03e2c7f-e974-4f0d-ae2e-6735f329a57b'), type='azure_blob_storage', uri='https://{generate_random_string(88)}@testairtservice.blob.core.windows.net/test-container/account_312571_events', source='https://testairtservice.blob.core.windows.net/test-container/account_312571_events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.azure: 'azure'&gt;, region='westeurope', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 4), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_azure_blob_storage_datablob_tag', id=4, created=datetime.datetime(2022, 10, 18, 12, 29, 9), uuid=UUID('0aaaa594-c164-4555-bf16-d8ce8deb14a6'))])\"\nexpected = \"DataBlob(id=189, uuid=UUID('c03e2c7f-e974-4f0d-ae2e-6735f329a57b'), type='azure_blob_storage', uri='https://****************************************@testairtservice.blob.core.windows.net/test-container/account_312571_events', source='https://testairtservice.blob.core.windows.net/test-container/account_312571_events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.azure: 'azure'&gt;, region='westeurope', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 4), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_azure_blob_storage_datablob_tag', id=4, created=datetime.datetime(2022, 10, 18, 12, 29, 9), uuid=UUID('0aaaa594-c164-4555-bf16-d8ce8deb14a6'))])\"\nactual = sanitize_secrets(test)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>DataBlob(id=189, uuid=UUID('c03e2c7f-e974-4f0d-ae2e-6735f329a57b'), type='azure_blob_storage', uri='https://****************************************@testairtservice.blob.core.windows.net/test-container/account_312571_events', source='https://testairtservice.blob.core.windows.net/test-container/account_312571_events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.azure: 'azure'&gt;, region='westeurope', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 4), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_azure_blob_storage_datablob_tag', id=4, created=datetime.datetime(2022, 10, 18, 12, 29, 9), uuid=UUID('0aaaa594-c164-4555-bf16-d8ce8deb14a6'))]\nDataBlob(id=189, uuid=UUID('c03e2c7f-e974-4f0d-ae2e-6735f329a57b'), type='azure_blob_storage', uri='https://****************************************@testairtservice.blob.core.windows.net/test-container/account_312571_events', source='https://testairtservice.blob.core.windows.net/test-container/account_312571_events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.azure: 'azure'&gt;, region='westeurope', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 4), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_azure_blob_storage_datablob_tag', id=4, created=datetime.datetime(2022, 10, 18, 12, 29, 9), uuid=UUID('0aaaa594-c164-4555-bf16-d8ce8deb14a6'))]\n</code></pre> <pre><code>test = \"DataBlob(id=190, uuid=UUID('7017b354-8009-4132-af05-986b167cc3d3'), type='db', uri='mysql://username:password@db.example.com:3306/database_to_import/events', source='mysql://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 5), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_db_datablob_tag', id=5, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('b6b7787e-bd74-4c19-bf0d-6c2245e56796'))])\"\nexpected = \"DataBlob(id=190, uuid=UUID('7017b354-8009-4132-af05-986b167cc3d3'), type='db', uri='mysql://****************************************@db.example.com:3306/database_to_import/events', source='mysql://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 5), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_db_datablob_tag', id=5, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('b6b7787e-bd74-4c19-bf0d-6c2245e56796'))])\"\nactual = sanitize_secrets(test)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>DataBlob(id=190, uuid=UUID('7017b354-8009-4132-af05-986b167cc3d3'), type='db', uri='mysql://****************************************@db.example.com:3306/database_to_import/events', source='mysql://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 5), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_db_datablob_tag', id=5, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('b6b7787e-bd74-4c19-bf0d-6c2245e56796'))]\nDataBlob(id=190, uuid=UUID('7017b354-8009-4132-af05-986b167cc3d3'), type='db', uri='mysql://****************************************@db.example.com:3306/database_to_import/events', source='mysql://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 5), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_db_datablob_tag', id=5, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('b6b7787e-bd74-4c19-bf0d-6c2245e56796'))]\n</code></pre> <pre><code>test = \"DataBlob(id=191, uuid=UUID('7cb023b9-9c79-4193-a5de-15cd3b197301'), type='db', uri='clickhouse+native://username:password@db.example.com:3306/database_to_import/events', source='clickhouse+native://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 6), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_clickhouse_datablob_tag', id=6, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('4011d87d-de84-4482-a1a8-cafdd623be91'))])\"\nexpected = \"DataBlob(id=191, uuid=UUID('7cb023b9-9c79-4193-a5de-15cd3b197301'), type='db', uri='clickhouse+native://****************************************@db.example.com:3306/database_to_import/events', source='clickhouse+native://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 6), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_clickhouse_datablob_tag', id=6, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('4011d87d-de84-4482-a1a8-cafdd623be91'))])\"\nactual = sanitize_secrets(test)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>DataBlob(id=191, uuid=UUID('7cb023b9-9c79-4193-a5de-15cd3b197301'), type='db', uri='clickhouse+native://****************************************@db.example.com:3306/database_to_import/events', source='clickhouse+native://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 6), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_clickhouse_datablob_tag', id=6, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('4011d87d-de84-4482-a1a8-cafdd623be91'))]\nDataBlob(id=191, uuid=UUID('7cb023b9-9c79-4193-a5de-15cd3b197301'), type='db', uri='clickhouse+native://****************************************@db.example.com:3306/database_to_import/events', source='clickhouse+native://db.example.com:3306/database_to_import/events', total_steps=1, completed_steps=0, folder_size=None, cloud_provider=&lt;CloudProvider.aws: 'aws'&gt;, region='eu-west-1', error=None, disabled=False, path=None, created=datetime.datetime(2022, 10, 19, 5, 0, 6), user_id=34, pulled_on=None, tags=[Tag(name='latest', id=3, created=datetime.datetime(2022, 10, 18, 12, 28, 54), uuid=UUID('38763262-eceb-4501-8ce2-b6ca66bce7c1')), Tag(name='my_clickhouse_datablob_tag', id=6, created=datetime.datetime(2022, 10, 18, 12, 29, 11), uuid=UUID('4011d87d-de84-4482-a1a8-cafdd623be91'))]\n</code></pre> <pre><code>test = (\n\"\"\"FromLocalResponse(uuid=UUID('b19157e3-4bb9-4755-8cfa-208f87d32c04'), type='local', presigned={'url': 'https://kumaran-airt-service-eu-west-1.s3.amazonaws.com/', 'fields': {'key': '34/datablob/192/${filename}', 'AWSAccessKeyId': '\"\"\"\n    + generate_random_string(20)\n    + \"\"\"', 'policy': '\"\"\"\n    + generate_random_string(252)\n    + \"\"\"', 'signature': '\"\"\"\n    + generate_random_string(28)\n    + \"\"\"'}})\"\"\"\n)\nexpected = \"FromLocalResponse(uuid=UUID('b19157e3-4bb9-4755-8cfa-208f87d32c04'), type='local', presigned={'url': 'https://kumaran-airt-service-eu-west-1.s3.amazonaws.com/', 'fields': {'key': '****************************************', 'AWSAccessKeyId': '********************', 'policy': '************************************************************************************************************************************************************************************************************************************************************', 'signature': '****************************'}})\"\nactual = sanitize_secrets(test)\nn = -1\nprint(actual[:n])\nprint(expected[:n])\nassert actual[:n] == expected[:n]\n</code></pre> <pre><code>FromLocalResponse(uuid=UUID('b19157e3-4bb9-4755-8cfa-208f87d32c04'), type='local', presigned={'url': 'https://kumaran-airt-service-eu-west-1.s3.amazonaws.com/', 'fields': {'key': '****************************************', 'AWSAccessKeyId': '********************', 'policy': '************************************************************************************************************************************************************************************************************************************************************', 'signature': '****************************'}}\nFromLocalResponse(uuid=UUID('b19157e3-4bb9-4755-8cfa-208f87d32c04'), type='local', presigned={'url': 'https://kumaran-airt-service-eu-west-1.s3.amazonaws.com/', 'fields': {'key': '****************************************', 'AWSAccessKeyId': '********************', 'policy': '************************************************************************************************************************************************************************************************************************************************************', 'signature': '****************************'}}\n</code></pre> <pre><code>logger = get_logger(__name__)\nlogger.log(logging.INFO, test_string)\n</code></pre> <pre><code>22-10-19 13:28:49.216 [INFO] __main__: [INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\n</code></pre> <pre><code>logger.info(test_string)\n</code></pre> <pre><code>22-10-19 13:28:49.220 [INFO] __main__: [INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\n</code></pre> <pre><code># display(test_string)\n</code></pre>"},{"location":"Sanitize_Secrets/#new_publish_display_data","title":"new_publish_display_data","text":"<pre><code> new_publish_display_data (data, metadata=None, source=&lt;deprecated&gt;,\n                           transient=None, **kwargs)\n</code></pre> <pre><code>display(test_string)\n</code></pre> <pre><code>'[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command=\\'process_csv 80 30 PersonId \\'[\"OccurredTime\"]\\' --blocksize 256MB --kwargs_json \\'{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}\\' --deduplicate_data\\', environment_vars={\\'AWS_ACCESS_KEY_ID': '********************', \\'AWS_SECRET_ACCESS_KEY': '****************************************', \\'AWS_DEFAULT_REGION\\': \\'eu-west-1\\', \\'AZURE_SUBSCRIPTION_ID': '************************************', \\'AZURE_TENANT_ID': '************************************', \\'AZURE_CLIENT_ID': '************************************', \\'AZURE_CLIENT_SECRET': '****************************************', \\'AZURE_STORAGE_ACCOUNT_PREFIX\\': \\'kumsairtsdev\\', \\'AZURE_RESOURCE_GROUP\\': \\'kumaran-airt-service-dev\\', \\'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', \\'AIRT_TOKEN_SECRET_KEY': '****************************************', \\'STORAGE_BUCKET_PREFIX\\': \\'kumaran-airt-service\\', \\'DB_USERNAME\\': \\'root\\', \\'DB_PASSWORD': '****************************************', \\'DB_HOST\\': \\'kumaran-mysql\\', \\'DB_PORT\\': \\'3306\\', \\'DB_DATABASE\\': \\'airt_service\\', \\'DB_DATABASE_SERVER\\': \\'mysql\\'})'\n</code></pre>"},{"location":"Sanitize_Secrets/#sanitized_print","title":"sanitized_print","text":"<pre><code> sanitized_print (*objects, sep=' ', end='\\n', file=&lt;_io.StringIO object\n                  at 0x7f6e07d0d5e0&gt;, flush=False)\n</code></pre> <pre><code>sanitized_print(test_string)\n</code></pre> <pre><code>[INFO] airt_service.batch_job_components.fastapi: FastAPIBatchJobContext.create_job(self=FastAPIBatchJobContext(task=csv_processing), command='process_csv 80 30 PersonId '[\"OccurredTime\"]' --blocksize 256MB --kwargs_json '{\"usecols\": [0, 1, 2, 3, 4], \"parse_dates\": [\"OccurredTime\"]}' --deduplicate_data', environment_vars={'AWS_ACCESS_KEY_ID': '********************', 'AWS_SECRET_ACCESS_KEY': '****************************************', 'AWS_DEFAULT_REGION': 'eu-west-1', 'AZURE_SUBSCRIPTION_ID': '************************************', 'AZURE_TENANT_ID': '************************************', 'AZURE_CLIENT_ID': '************************************', 'AZURE_CLIENT_SECRET': '****************************************', 'AZURE_STORAGE_ACCOUNT_PREFIX': 'kumsairtsdev', 'AZURE_RESOURCE_GROUP': 'kumaran-airt-service-dev', 'AIRT_SERVICE_SUPER_USER_PASSWORD': '****************************************', 'AIRT_TOKEN_SECRET_KEY': '****************************************', 'STORAGE_BUCKET_PREFIX': 'kumaran-airt-service', 'DB_USERNAME': 'root', 'DB_PASSWORD': '****************************************', 'DB_HOST': 'kumaran-mysql', 'DB_PORT': '3306', 'DB_DATABASE': 'airt_service', 'DB_DATABASE_SERVER': 'mysql'})\n</code></pre>"},{"location":"Tutorial/","title":"Tutorial","text":"<p>This tutorial gives an example of how to use airt services to train a model and make predictions.</p> <p>We can use the airt-client library\u2019s following classes for the task at hand:</p> <ul> <li> <p><code>Client</code>   for authenticating and accessing the airt service,</p> </li> <li> <p><code>DataBlob</code>   for encapsulating the data from sources like CSV files, databases,   Azure Blob Storage, or AWS S3 bucket, and</p> </li> <li> <p><code>DataSource</code>   for managing datasources and training the models in the airt service.</p> </li> </ul> <p>We import them from airt.client module as follows:</p> <pre><code>from airt.client import Client, DataBlob, DataSource\n</code></pre>"},{"location":"Tutorial/#authentication","title":"Authentication","text":"<p>To access the airt service, you must first create a developer account. Please fill out the signup form below to get one:</p> <ul> <li>https://bit.ly/3hbXQLY</li> </ul> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>Client.get_token</code> method. It is necessary to get an access token; otherwise, you won\u2019t be able to access all of the airt service\u2019s APIs. You can either pass the username, password, and server address as parameters to the <code>Client.get_token</code> method or store them in the environment variables AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the     <code>User.enable_mfa</code>     method, which will generate a QR code. You can then scan the QR code     with an authenticator app, such as Google Authenticator and follow     the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling     <code>User.activate_mfa</code>     and passing the dynamically generated six-digit verification code     from your smartphone\u2019s authenticator app.</p> </li> </ol> <p>You can also disable MFA for your account at any time by calling the method <code>User.disable_mfa</code> method.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the     <code>User.enable_sso</code>     method with the SSO provider name and an email address. At the     moment, we only support \u201cgoogle\u201d and \u201cgithub\u201d as SSO     providers. We intend to support additional SSO providers in future     releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first     authenticate with the SSO provider. Call the     <code>Client.get_token</code>     with the same SSO provider you have enabled in the step above to     generate an SSO authorization URL. Please copy and paste it into     your preferred browser and complete the authentication process with     the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the     <code>Client.set_sso_token</code>     method to generate a new token and use it automatically in all     future interactions with the airt server.</p> </li> </ol> <p>Info</p> <p>In the below example, the username, password, and server address are stored in AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL environment variables.</p> <pre><code># Authenticate\nClient.get_token()\n</code></pre>"},{"location":"Tutorial/#1-data-blob","title":"1. Data Blob","text":"<p><code>DataBlob</code> objects are used to encapsulate data access. Currently, we support:</p> <ul> <li> <p>access for local CSV files,</p> </li> <li> <p>database access for MySql, ClickHouse, and</p> </li> <li> <p>files stored cloud storages like AWS S3 bucket and Azure Blob Storage.</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <p>To create a <code>DataBlob</code> object, use one of the DataBlob class\u2019s from_* methods. Check out the <code>DataBlob</code> class documentation for more information.</p> <p>In this example, the input data is a CSV file stored in an AWS S3 bucket. Before you can use the data to train a model, it must be uploaded to the airt server. To upload data from an AWS S3 bucket to the airt server, use the DataBlob class\u2019s <code>DataBlob.from_s3</code> method.</p> <pre><code># Pull the data from an AWS S3 bucket to the airt server\ndata_blob = DataBlob.from_s3(uri=\"s3://test-airt-service/ecommerce_behavior_csv\")\n</code></pre> <p>The above method will automatically pull the data into the airt server, and all calls to the library are asynchronous and return immediately. To manage completion, all the from_* methods of the <code>DataBlob</code> class will return a status object indicating the completion status. Alternatively, you can monitor the completion status interactively in a progress bar by calling the <code>DataBlob.progress_bar</code> method:</p> <pre><code># Display the completion status in a progress bar\ndata_blob.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.48s/it]\n</code></pre> <pre><code># Check to ensure that the upload is complete\nassert data_blob.is_ready()\n</code></pre> <p>The next step is to preprocess and prepare the data for training. Preprocessing entails creating the index column, sort column, and so on. Currently, CSV and Parquet files can be preprocessed. Please use the <code>to_datasource</code> method in the <code>DataBlob</code> class for the same. We intend to support additional file formats in the future releases.</p> <pre><code># Preprocess and prepare the data for training.\ndata_source = data_blob.to_datasource(\n    file_type=\"csv\", index_column=\"user_id\", sort_by=\"event_time\"\n)\n\n# Display the data preprocessing progress\ndata_source.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.46s/it]\n</code></pre> <p>When the preprocessing is finished, you can run the following command to display the head of the data to ensure everything is fine.</p> <pre><code># Display the first few rows of preprocessed data.\ndata_source.head().style\n</code></pre> event_time event_type product_id category_id category_code brand price user_session user_id 10300217 2019-11-06 06:51:52+00:00 view 26300219 2053013563424899840 None sokolov 40.540000 d1fdcbf1-bb1f-434b-8f1a-4b77f29a84a0 253299396 2019-11-05 21:25:44+00:00 view 2400724 2053013563743666944 appliances.kitchen.hood bosch 246.850000 b097b84d-cfb8-432c-9ab0-a841bb4d727f 253299396 2019-11-05 21:27:43+00:00 view 2400724 2053013563743666944 appliances.kitchen.hood bosch 246.850000 b097b84d-cfb8-432c-9ab0-a841bb4d727f 272811580 2019-11-05 19:38:48+00:00 view 3601406 2053013563810775808 appliances.kitchen.washer beko 195.600000 d18427ab-8f2b-44f7-860d-a26b9510a70b 272811580 2019-11-05 19:40:21+00:00 view 3601406 2053013563810775808 appliances.kitchen.washer beko 195.600000 d18427ab-8f2b-44f7-860d-a26b9510a70b 288929779 2019-11-06 05:39:21+00:00 view 15200134 2053013553484398848 None racer 55.860000 fc582087-72f8-428a-b65a-c2f45d74dc27 288929779 2019-11-06 05:39:34+00:00 view 15200134 2053013553484398848 None racer 55.860000 fc582087-72f8-428a-b65a-c2f45d74dc27 310768124 2019-11-05 20:25:52+00:00 view 1005106 2053013555631882752 electronics.smartphone apple 1422.310000 79d8406f-4aa3-412c-8605-8be1031e63d6 315309190 2019-11-05 23:13:43+00:00 view 31501222 2053013558031024640 None dobrusskijfarforovyjzavod 115.180000 e3d5a1a4-f8fd-4ac3-acb7-af6ccd1e3fa9 339186405 2019-11-06 07:00:32+00:00 view 1005115 2053013555631882752 electronics.smartphone apple 915.690000 15197c7e-aba0-43b4-9f3a-a815e31ade40"},{"location":"Tutorial/#2-training","title":"2. Training","text":"<p>The prediction engine is specialized for predicting which clients are most likely to have a given event in the future.</p> <p>We assume the input data includes the following:</p> <ul> <li> <p>a column identifying a client client_column (person, car,   business, etc.),</p> </li> <li> <p>a colum specifying a type of event we will try to predict   target_column (buy, checkout, click on form submit, etc.), and</p> </li> <li> <p>a timestamp column specifying the time of an occured event.</p> </li> </ul> <p>Each row of data may contain additional columns of the int, category, float, or datetime types, which will be used to improve prediction accuracy. E.g. there could be a city associated with each user or type, credit card used for a transaction, smartphone model used to access a mobile app, etc.</p> <p>Finally, we need to know how far ahead we want to make predictions. E.g. if we predict that a client will most likely buy a product in the next minute, there isn\u2019t much we can do anyway. We might be more interested in clients who are likely to buy a product tomorrow so that we can send them a special offer or engage them in some other way. That lead time varies greatly depending on the application and can be as short as a few minutes for a web store or as long as several weeks for a banking product such as a loan. In any case, there is a parameter predict_after that allows you to specify the time period based on your particular needs.</p> <p>To train a model, pass the configurations for your usecase to the <code>DataSource.train</code> method. The train method is asynchronous and may take several hours to complete depending on the size of your dataset. You can check the training status by calling the <code>Model.is_ready</code> method or monitor the completion progress interactively by calling the <code>Model.progress_bar</code> method.</p> <p>In the following example, we will train a model to predict which users will perform a purchase event **(*purchase)** 3 hours before they actually do it:</p> <pre><code># Train a model\nfrom datetime import timedelta\n\nmodel = data_source.train(\n    client_column=\"user_id\",\n    target_column=\"event_type\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3),\n)\n\n# Display model training progress\nmodel.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 90.27it/s]\n</code></pre> <pre><code># Check to ensure that the model training is complete\nassert model.is_ready()\n</code></pre> <p>Once the model training is complete, call the <code>Model.evaluate</code> method to display multiple evaluation metrics to evaluate the model\u2019s performance.</p> <pre><code># Evaluate the model\nmodel.evaluate().style\n</code></pre> eval accuracy 0.985000 recall 0.962000 precision 0.934000"},{"location":"Tutorial/#3-predictions","title":"3. Predictions","text":"<p>Finally, you can use the trained model to make predictions by calling the <code>Model.predict</code> method. The predict method is asynchronous and may take several hours to complete depending on the size of your dataset. You can check the prediction status by calling the <code>Prediction.is_ready</code> method or monitor the completion progress interactively by calling the <code>Prediction.progress_bar</code> method.</p> <pre><code># Run predictions\npredictions = model.predict()\n\n# Display model prediction progress\npredictions.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.40s/it]\n</code></pre> <pre><code># Check to ensure that the prediction is complete\nassert predictions.is_ready()\n</code></pre> <p>If the dataset is small enough, you can download the prediction results as a Pandas DataFrame by calling the <code>Prediction.to_pandas</code> method:</p> <pre><code># Download the prediction results as a pandas DataFrame\npredictions.to_pandas().style\n</code></pre> Score user_id 520088904 0.979853 530496790 0.979157 561587266 0.979055 518085591 0.978915 558856683 0.977960 520772685 0.004043 514028527 0.003890 518574284 0.001346 532364121 0.001341 532647354 0.001139 <p>In many cases, it is much better to push the prediction results to destinations such as AWS S3, MySql databases, or even download them to the local machine.</p> <p>Below is an example to push the prediction results to an AWS S3 bucket. For other available options, please check the documentation of the <code>Prediction</code> class.</p> <pre><code># Push prediction results to an AWS S3 bucket\nstatus = predictions.to_s3(uri=TARGET_S3_BUCKET)\n\n# Display prediction push progress\nstatus.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:10&lt;00:00, 10.18s/it]\n</code></pre>"},{"location":"airt_api_docs/airt/client/","title":"airt.client","text":""},{"location":"airt_api_docs/airt/client/#airt.client.APIKey","title":"<code> APIKey        </code>","text":"<p>A class for managing the APIKeys in the server.</p> <p>Both the APIKey and the token can be used for accessing the airt services. However, there is a slight difference in generating and managing the two.</p> <p>For generating the APIKey, you first need to get the developer token. Please refer to <code>Client.get_token</code> method documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new APIKeys and can set an expiration date individually. You can also access other methods available in the APIKey class to list, revoke the APIKey at any time.</p> <p>Here's an example of how to use the APIKey class to create a new key and use it to access the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a new key with the given name\nkey_name = \"{fill in key_name}\"\nnew_key = APIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# Call the set_token method to set the newly generated key\nClient.set_token(token=new_key[\"access_token\"])\n\n# Print the logged-in user details\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.__init__","title":"<code>__init__(self, uuid, name=None, expiry=None, disabled=None, created=None)</code>  <code>special</code>","text":"<p>Constructs a new APIKey instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>APIKey uuid.</p> required <code>name</code> <code>Optional[str]</code> <p>APIKey name.</p> <code>None</code> <code>expiry</code> <code>Optional[str]</code> <p>APIKey expiry date.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Flag to indicate the status of the APIKey.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>APIKey creation date.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    name: Optional[str] = None,\n    expiry: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n):\n\"\"\"Constructs a new APIKey instance.\n\n    Args:\n        uuid: APIKey uuid.\n        name: APIKey name.\n        expiry: APIKey expiry date.\n        disabled: Flag to indicate the status of the APIKey.\n        created: APIKey creation date.\n    \"\"\"\n    self.uuid = uuid\n    self.name = name\n    self.expiry = expiry\n    self.disabled = disabled\n    self.created = created\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.as_df","title":"<code>as_df(ax)</code>  <code>staticmethod</code>","text":"<p>Return the details of APIKey instances in a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>List[APIKey]</code> <p>List of APIKey instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the APIKeys in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user in a dataframe</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display all the APIKey instance details in a pandas dataframe\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(ax: List[\"APIKey\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of APIKey instances in a pandas dataframe.\n\n    Args:\n        ax: List of APIKey instances.\n\n    Returns:\n        Details of all the APIKeys in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the APIKeys generated by the currently logged-in user in a dataframe\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display all the APIKey instance details in a pandas dataframe\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ax, APIKey.API_KEY_COLS)  # type: ignore\n    return generate_df(lists, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.create","title":"<code>create(name, expiry=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new APIKey</p> <p>In order to access the airt service with the newly generated APIKey, please call the <code>Client.set_token</code> method or set the APIKey value in the AIRT_SERVICE_TOKEN environment variable.</p> <p>Note</p> <ul> <li> <p>The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key. However, you can create a new key with the name of a revoked key.</p> </li> <li> <p>The expiry for an APIKey is optional, if not passed then the default value None will be used to create an APIKey with no expiry date!</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the APIKey.</p> required <code>expiry</code> <code>Union[int, datetime.timedelta, datetime.datetime]</code> <p>The validity for the APIKey. This can be an integer representing the number of days till expiry, can be an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value None will be used to create a APIKey that will never expire!</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The APIKey and its type as a dictionary.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user is not authenticated.</p> <code>ValueError</code> <p>If the user tries to create a new APIKey with an existing key name.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key with the given name and set the expiry to 10 days from now.\n# If the expiry parameter is not specified, a key with no expiry date is created.\nkey_name = \"{fill in key_name}\"\nnew_key_details = APIKey.create(name=key_name, expiry=10)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# If a new key with the same name is created, an exception will be raised.\n# However, you can create a new key with the name of a revoked key.\ntry:\n    APIKey.create(name=key_name, expiry=10)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n\n# Finally, either call the below method to set the newly generated key\n# or store it in the AIRT_SERVICE_TOKEN environment variable.\nClient.set_token(token=new_key_details[\"access_token\"])\n\n# If set_token fails, the line below will throw an error.\nprint(APIKey.details(apikey=key_name))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef create(\n    name: str,\n    expiry: Optional[Union[int, timedelta, datetime]] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, str]:\n\"\"\"Create a new APIKey\n\n    In order to access the airt service with the newly generated APIKey, please call the `Client.set_token` method\n    or set the APIKey value in the **AIRT_SERVICE_TOKEN** environment variable.\n\n    !!! note\n\n        - The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key.\n        However, you can create a new key with the name of a revoked key.\n\n        - The expiry for an APIKey is optional, if not passed then the default value **None** will be used to create an APIKey with no expiry date!\n\n    Args:\n        name: The name of the APIKey.\n        expiry: The validity for the APIKey. This can be an integer representing the number of days till expiry, can be\n            an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value\n            **None** will be used to create a APIKey that will never expire!\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n        The APIKey and its type as a dictionary.\n\n    Raises:\n        ValueError: If the user is not authenticated.\n        ValueError: If the user tries to create a new APIKey with an existing key name.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key with the given name and set the expiry to 10 days from now.\n        # If the expiry parameter is not specified, a key with no expiry date is created.\n        key_name = \"{fill in key_name}\"\n        new_key_details = APIKey.create(name=key_name, expiry=10)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # If a new key with the same name is created, an exception will be raised.\n        # However, you can create a new key with the name of a revoked key.\n        try:\n            APIKey.create(name=key_name, expiry=10)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n\n        # Finally, either call the below method to set the newly generated key\n        # or store it in the AIRT_SERVICE_TOKEN environment variable.\n        Client.set_token(token=new_key_details[\"access_token\"])\n\n        # If set_token fails, the line below will throw an error.\n        print(APIKey.details(apikey=key_name))\n        ```\n    \"\"\"\n    if expiry is None:\n        expiry_date = expiry\n    else:\n        if isinstance(expiry, int):\n            delta = datetime.now() + timedelta(days=expiry)\n        elif isinstance(expiry, timedelta):\n            delta = datetime.now() + expiry\n        else:\n            delta = expiry\n\n        expiry_date = delta.strftime(\"%Y-%m-%dT%H:%M\")\n\n    return Client._post_data(\n        relative_url=\"/apikey\",\n        json=dict(name=name, expiry=expiry_date, otp=otp),\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.details","title":"<code>details(apikey)</code>  <code>staticmethod</code>","text":"<p>Return details of an APIKey.</p> <p>Parameters:</p> Name Type Description Default <code>apikey</code> <code>str</code> <p>APIKey uuid/name.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the APIKey.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get details of an APIKey</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# To display the details of all keys created by the user, use the method below.\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef details(apikey: str) -&gt; pd.DataFrame:\n\"\"\"Return details of an APIKey.\n\n    Args:\n        apikey: APIKey uuid/name.\n\n    Returns:\n        A pandas Dataframe encapsulating the details of the APIKey.\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get details of an APIKey\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # To display the details of all keys created by the user, use the method below.\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    details = Client._get_data(relative_url=f\"/apikey/{apikey}\")\n\n    return pd.DataFrame(details, index=[0])[APIKey.API_KEY_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.ls","title":"<code>ls(user=None, offset=0, limit=100, include_disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of APIKeys instances.</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can view the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid. If not passed, then the currently logged-in user_uuid will be used.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>include_disabled</code> <code>bool</code> <p>If set to True, then the disabled APIKeys will also be included in the result.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[APIKey]</code> <p>A list of APIKey instances.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Get the list of all APIKey instances created by the currently logged-in user.\n# If you are a super user, you can view the APIkeys created by other users by\n# passing their uuid/username in the user parameter.\nax = APIKey.ls()\nprint(ax)\n\n# Display the details of the instances in a pandas dataframe\ndf = APIKey.as_df(ax)\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    user: Optional[str] = None,\n    offset: int = 0,\n    limit: int = 100,\n    include_disabled: bool = False,\n) -&gt; List[\"APIKey\"]:\n\"\"\"Return the list of APIKeys instances.\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can view\n    the APIKeys created by other users.\n\n    Args:\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid.\n            If not passed, then the currently logged-in user_uuid will be used.\n        offset: The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.\n        limit: The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.\n        include_disabled: If set to **True**, then the disabled APIKeys will also be included in the result.\n\n    Returns:\n        A list of APIKey instances.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the user_uuid is invalid.\n\n    An example of displaying the APIKeys generated by the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Get the list of all APIKey instances created by the currently logged-in user.\n        # If you are a super user, you can view the APIkeys created by other users by\n        # passing their uuid/username in the user parameter.\n        ax = APIKey.ls()\n        print(ax)\n\n        # Display the details of the instances in a pandas dataframe\n        df = APIKey.as_df(ax)\n        print(df)\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n\n    apikeys = Client._get_data(\n        relative_url=f\"/{user_uuid}/apikey?include_disabled={include_disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ax = [\n        APIKey(\n            uuid=apikey[\"uuid\"],\n            name=apikey[\"name\"],\n            expiry=apikey[\"expiry\"],\n            disabled=apikey[\"disabled\"],\n            created=apikey[\"created\"],\n        )\n        for apikey in apikeys\n    ]\n\n    return ax\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.APIKey.revoke","title":"<code>revoke(keys, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Revoke one or more APIKeys</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can revoke the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>Union[str, List[str], List[APIKey]]</code> <p>APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.</p> required <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid/username. If not passed, then the currently logged-in user will be used.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the deleted APIKey(s).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to revoke a single APIKey by name</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Check that the newly created key exists\nprint([key.name for key in APIKey.ls()])\n\n# Revoke the newly created key\n# To delete multiple keys, pass a list of key names or key instances\nAPIKey.revoke(keys=key_name)\n\n# Check that the newly created key does not exists\nprint([key.name for key in APIKey.ls()])\n</code></pre> <p>Here's an example of a super user revoking all APIkeys generated by a specific user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# List the APIKeys generated by a specific user\nuser = \"{fill in other_username}\"\nax = APIKey.ls(user=user)\nprint([key.name for key in ax])\n\n# Revoke the APIKeys\nAPIKey.revoke(keys=ax, user=user)\n\n# Check that all APIkeys have been revoked\nprint([key.name for key in APIKey.ls(user=user)])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef revoke(\n    keys: Union[str, List[str], List[\"APIKey\"]],\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Revoke one or more APIKeys\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can revoke the\n    APIKeys created by other users.\n\n    Args:\n        keys: APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid/username.\n            If not passed, then the currently logged-in user will be used.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n         A pandas Dataframe encapsulating the details of the deleted APIKey(s).\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ValueError: If the user_uuid is invalid.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to revoke a single APIKey by name\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Check that the newly created key exists\n        print([key.name for key in APIKey.ls()])\n\n        # Revoke the newly created key\n        # To delete multiple keys, pass a list of key names or key instances\n        APIKey.revoke(keys=key_name)\n\n        # Check that the newly created key does not exists\n        print([key.name for key in APIKey.ls()])\n        ```\n\n    Here's an example of a super user revoking all APIkeys generated by a specific user.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # List the APIKeys generated by a specific user\n        user = \"{fill in other_username}\"\n        ax = APIKey.ls(user=user)\n        print([key.name for key in ax])\n\n        # Revoke the APIKeys\n        APIKey.revoke(keys=ax, user=user)\n\n        # Check that all APIkeys have been revoked\n        print([key.name for key in APIKey.ls(user=user)])\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    _keys = APIKey._get_key_names(keys)\n\n    response_list = []\n\n    for key_uuid in _keys:\n        url = f\"/{user_uuid}/apikey/{key_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return generate_df(response_list, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Client","title":"<code> Client        </code>","text":"<p>A class for authenticating and accessing the airt service.</p> <p>To access the airt service, you must first create a developer account. To obtain one, please contact us at info@airt.ai.</p> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>get_token</code> method. It is necessary to get an access token; otherwise, you won't be able to access all of the airt service's APIs. You can either pass the username, password, and server address as parameters to the <code>get_token</code> method or store them in the environment variables AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL.</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the <code>User.enable_mfa</code> method, which will generate a QR code. You can then scan the QR code with an authenticator app, such as Google Authenticator and follow the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling <code>User.activate_mfa</code> and passing the dynamically generated six-digit verification code from your smartphone's authenticator app.</p> </li> </ol> <p>After activating MFA for your account, you must pass the dynamically generated six-digit verification code, along with your username and password, to the <code>get_token</code> method to generate new tokens.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the <code>User.enable_sso</code> method with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the <code>get_token</code> with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the <code>set_sso_token</code> method to generate a new token and use it automatically in all future interactions with the airt server.</p> </li> </ol> <p>Here's an example of how to use the Client class to authenticate and display the details of the currently logged-in user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate\n# MFA enabled users must pass the OTP along with the username and password\n# to the get_token method.\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Client.get_token","title":"<code>get_token(*, username=None, password=None, server=None, sso_provider=None, otp=None)</code>  <code>classmethod</code>","text":"<p>Get application token for airt service from a username/password pair.</p> <p>This methods validates the developer credentials and returns an auth token. The returned auth token is implicitly used in all the interactions with the server.</p> <p>If you've already enabled multi-factor authentication (MFA) for your account, you'll need to pass the dynamically generated six-digit verification code along with your username and password to generate new tokens.</p> <p>If the token is requested using Single sign-on (SSO), an authorization URL will be returned. Please copy and paste it into your preferred browser and complete the SSO provider authentication within 10 minutes. Otherwise, the SSO login will time out and you will need to re-request the token.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>Optional[str]</code> <p>Username for the developer account. If None (default value), then the value from AIRT_SERVICE_USERNAME environment variable is used.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Password for the developer account. If None (default value), then the value from AIRT_SERVICE_PASSWORD environment variable is used.</p> <code>None</code> <code>server</code> <code>Optional[str]</code> <p>The airt server uri. If None (default value), then the value from AIRT_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@airt.ai for that possibility).</p> <code>None</code> <code>sso_provider</code> <code>Optional[str]</code> <p>Name of the Single sign-on (SSO) provider. Please pass this parameter only if you have successfully enabled SSO for this provider. At present, the API only supports \"google\" and \"github\" as valid SSO providers.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The authorization url if the token is requested using Single sign-on (SSO).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the username/password pair does not match.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>KeyError</code> <p>If username/password is neither passed as parameters nor stored in environment variables.</p> <p>Here's an example of a non-MFA user authenticating and generating a new token</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre> <p>Here's an example of a MFA user authenticating using SMS OTP and generating a new token</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Request OTP via SMS to authenticate\n# If you want to use the OTP from the authenticator app, skip this step and\n# don't generate an SMS OTP; instead, pass the OTP from the authenticator\n# app to the get_token method below\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@classmethod\ndef get_token(  # type: ignore\n    cls,\n    *,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    server: Optional[str] = None,\n    sso_provider: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; Optional[str]:\n\"\"\"Get application token for airt service from a username/password pair.\n\n    This methods validates the developer credentials and returns an auth token. The returned auth\n    token is implicitly used in all the interactions with the server.\n\n    If you've already enabled multi-factor authentication (MFA) for your account, you'll need to\n    pass the dynamically generated six-digit verification code along with your username and\n    password to generate new tokens.\n\n    If the token is requested using Single sign-on (SSO), an authorization URL will be returned.\n    Please copy and paste it into your preferred browser and complete the SSO provider\n    authentication within 10 minutes. Otherwise, the SSO login will time out and you will need\n    to re-request the token.\n\n    Args:\n        username: Username for the developer account. If None (default value), then the value from\n            **AIRT_SERVICE_USERNAME** environment variable is used.\n        password: Password for the developer account. If None (default value), then the value from\n            **AIRT_SERVICE_PASSWORD** environment variable is used.\n        server: The airt server uri. If None (default value), then the value from **AIRT_SERVER_URL** environment variable\n            is used. If the variable is not set as well, then the default public server will be used. Please leave this\n            setting to default unless you are running the service in your own server (please email us to info@airt.ai\n            for that possibility).\n        sso_provider: Name of the Single sign-on (SSO) provider. Please pass this parameter only if you have successfully\n            enabled SSO for this provider. At present, the API only supports \"google\" and \"github\" as valid SSO providers.\n        otp: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.\n\n    Returns:\n        The authorization url if the token is requested using Single sign-on (SSO).\n\n    Raises:\n        ValueError: If the username/password pair does not match.\n        ConnectionError: If the server address is invalid or not reachable.\n        KeyError: If username/password is neither passed as parameters nor stored in environment variables.\n\n    Here's an example of a non-MFA user authenticating and generating a new token\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Print the logged-in user details\n        print(User.details())\n        ```\n\n    Here's an example of a MFA user authenticating using SMS OTP and generating a new token\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to authenticate\n        # If you want to use the OTP from the authenticator app, skip this step and\n        # don't generate an SMS OTP; instead, pass the OTP from the authenticator\n        # app to the get_token method below\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Print the logged-in user details\n        print(User.details())\n        ```\n    \"\"\"\n    cls.server = get_base_url(server)\n\n    username, password = _get_credentials(username, password)\n\n    if otp is not None:\n        password = json.dumps({\"password\": password, \"user_otp\": otp})\n\n    if sso_provider is None:\n        response = post_data(\n            url=f\"{cls.server}/token\",\n            data=dict(username=username, password=password),\n            token=None,\n        )\n\n        cls.auth_token = response[\"access_token\"]\n    else:\n        response = post_data(\n            url=f\"{cls.server}/sso/initiate\",\n            data=json.dumps(  # type: ignore\n                dict(\n                    username=username, password=password, sso_provider=sso_provider\n                )\n            ),\n            token=None,\n        )\n\n        cls.sso_authorization_url = response[\"authorization_url\"]\n        return cls.sso_authorization_url\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Client.set_sso_token","title":"<code>set_sso_token()</code>  <code>classmethod</code>","text":"<p>Set the application token generated using Single sign-on (SSO).</p> <p>The token set using this method will be implicitly used in all the interactions with the server.</p> <p>Please call this method only if you successfully enabled and completed the login with the Single sign-on (SSO) provider. If not, please call the <code>get_token</code> method with an appropriate sso_provider to initiate the SSO authentication.</p> <p>Here's an example of authenticating with Single sign-on (SSO) using google and setting the newly generated token to interact with the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Enable single sign-on (SSO) and use google as the provider\nsso_provider=\"google\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n# Authenticate using Single sign-on (SSO)\n# To generate a token using SSO, you must first authenticate with the provider.\n# The command below will generate an authorization URL for you.\n# Please copy and paste it into your preferred browser and complete the\n# SSO provider authentication within 10 minutes. Otherwise, the SSO login\n# will time out and you will need to call the get_token method again.\nsso_url = Client.get_token(sso_provider=sso_provider)\nprint(sso_url)\n\n# Once the provider authentication is successful, call the below method to\n# set the generated token\nClient.set_sso_token()\n\n# If set_sso_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@classmethod\ndef set_sso_token(cls):\n\"\"\"Set the application token generated using Single sign-on (SSO).\n\n    The token set using this method will be implicitly used in all the interactions with the server.\n\n    Please call this method only if you successfully enabled and completed the login with the Single\n    sign-on (SSO) provider. If not, please call the `get_token` method with an appropriate\n    sso_provider to initiate the SSO authentication.\n\n    Here's an example of authenticating with Single sign-on (SSO) using google and setting the\n    newly generated token to interact with the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Enable single sign-on (SSO) and use google as the provider\n        sso_provider=\"google\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n        # Authenticate using Single sign-on (SSO)\n        # To generate a token using SSO, you must first authenticate with the provider.\n        # The command below will generate an authorization URL for you.\n        # Please copy and paste it into your preferred browser and complete the\n        # SSO provider authentication within 10 minutes. Otherwise, the SSO login\n        # will time out and you will need to call the get_token method again.\n        sso_url = Client.get_token(sso_provider=sso_provider)\n        print(sso_url)\n\n        # Once the provider authentication is successful, call the below method to\n        # set the generated token\n        Client.set_sso_token()\n\n        # If set_sso_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n    quoted_authorization_url = urllib.parse.quote(cls.sso_authorization_url)\n    response = get_data(\n        url=f\"{cls.server}/sso/token/?authorization_url={quoted_authorization_url}\",\n        token=None,\n    )\n\n    cls.auth_token = response[\"access_token\"]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Client.set_token","title":"<code>set_token(token=None, server=None)</code>  <code>classmethod</code>","text":"<p>Set application token for airt service.</p> <p>If you already have a valid token, you can call this method to set it and use it in all subsequent interactions with the airt server.</p> <p>Please call this method only if you already have a token. If not, please call the <code>get_token</code> method to generate one.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Optional[str]</code> <p>The application token obtained by calling the <code>get_token</code> method, or an APIKey obtained by calling the <code>APIKey.create</code> method. If None (default value), then the value from AIRT_SERVICE_TOKEN environment variable is used.</p> <code>None</code> <code>server</code> <code>Optional[str]</code> <p>The airt server uri. If None (default value), then the value from AIRT_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@airt.ai for that possibility).</p> <code>None</code> <p>An example to set an existing token:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Optional Step: For demonstration purpose, generate a new token\n# When you generate a new token with the get_token method, you do not\n# need to explicitly call set_token. It is shown here for demo purposes only.\n# Skip this step if you already have a valid token and pass it directly to\n# the set_token method below\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Setting a valid token\nClient.set_token(token=Client.auth_token)\n\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@classmethod\ndef set_token(cls, token: Optional[str] = None, server: Optional[str] = None):\n\"\"\"Set application token for airt service.\n\n    If you already have a valid token, you can call this method to set it and use it in all\n    subsequent interactions with the airt server.\n\n    Please call this method only if you already have a token. If not, please call the `get_token` method to generate one.\n\n    Args:\n        token: The application token obtained by calling the `get_token` method, or an APIKey obtained by calling\n            the `APIKey.create` method. If None (default value), then the value from **AIRT_SERVICE_TOKEN** environment variable is used.\n        server: The airt server uri. If None (default value), then the value from **AIRT_SERVER_URL** environment variable\n            is used. If the variable is not set as well, then the default public server will be used. Please leave this\n            setting to default unless you are running the service in your own server (please email us to info@airt.ai\n            for that possibility).\n\n    An example to set an existing token:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: For demonstration purpose, generate a new token\n        # When you generate a new token with the get_token method, you do not\n        # need to explicitly call set_token. It is shown here for demo purposes only.\n        # Skip this step if you already have a valid token and pass it directly to\n        # the set_token method below\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Setting a valid token\n        Client.set_token(token=Client.auth_token)\n\n        # If set_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n\n    auth_token = token if token is not None else os.environ.get(SERVICE_TOKEN)\n\n    if not auth_token:\n        raise KeyError(\n            f\"The token is neither passed as parameter nor set in the environment variable {SERVICE_TOKEN}.\"\n        )\n\n    cls.auth_token = auth_token\n    cls.server = get_base_url(server)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Client.version","title":"<code>version()</code>  <code>staticmethod</code>","text":"<p>Return the client and server versions.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dict containing the client and server versions.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get the client and server versions:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client\n\n# Get the client and server versions\nprint(Client.version())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef version() -&gt; dict:\n\"\"\"Return the client and server versions.\n\n    Returns:\n        A dict containing the client and server versions.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get the client and server versions:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client\n\n        # Get the client and server versions\n        print(Client.version())\n        ```\n    \"\"\"\n\n    response = Client._get_data(relative_url=f\"/version\")\n\n    version = {\n        # nosemgrep: python.lang.security.audit.non-literal-import.non-literal-import\n        \"client\": importlib.import_module(CLIENT_NAME).__version__,\n        \"server\": response[\"airt_service\"],\n    }\n\n    return version\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob","title":"<code> DataBlob        </code>","text":"<p>A class for importing and processing data from sources such as CSV/parquet files, databases, AWS S3 buckets, and Azure Blob Storage.</p> <p>Currently, the only way to instantiate the DataBlob class is to call one of the following static methods <code>from_local</code>, <code>from_mysql</code>, <code>from_clickhouse</code>, <code>from_s3</code>, or <code>from_azure_blob_storage</code> which imports the data in the parquet file format from:</p> <ul> <li> <p>a local CSV/parquet file,</p> </li> <li> <p>a MySql database,</p> </li> <li> <p>a ClickHouse database</p> </li> <li> <p>an AWS S3 bucket, and</p> </li> <li> <p>an Azure Blob Storage respectively.</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.__init__","title":"<code>__init__(self, uuid, type=None, source=None, region=None, cloud_provider=None, datasources=None, total_steps=None, completed_steps=None, folder_size=None, disabled=None, pulled_on=None, user=None, tags=None, error=None)</code>  <code>special</code>","text":"<p>Constructs a new DataBlob instance.</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use <code>from_s3</code>, <code>from_azure_blob_storage</code>, <code>from_mysql</code>, <code>from_clickhouse</code> or <code>from_local</code> methods instead.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>Datablob uuid.</p> required <code>source</code> <code>Optional[str]</code> <p>The URI of the data that was used to create the datablob.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>The type of source used to generate the datablob. Depending on the source type, one of the following values will be assigned: \"s3\", \"local\", \"db\", or \"azure_blob_storage\".</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>Cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers.</p> <code>None</code> <code>datasources</code> <code>Optional[List[str]]</code> <p>The uuids of the datasources created from the datablob.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>The number of steps required to upload the datablob to the server.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>The number of steps completed during the datablob's upload to the server.</p> <code>None</code> <code>folder_size</code> <code>Optional[int]</code> <p>The uploaded datablob's size in bytes.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the datablob's status. If the datablob is deleted, then False will be set.</p> <code>None</code> <code>pulled_on</code> <code>Optional[str]</code> <p>The most recent date the datablob was uploaded.</p> <code>None</code> <code>user</code> <code>Optional[str]</code> <p>The uuid of the user who created the datablob.</p> <code>None</code> <code>tags</code> <code>Optional[List]</code> <p>Tag names associated with the datablob.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if the processing of the datablob fails.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    type: Optional[str] = None,\n    source: Optional[str] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    datasources: Optional[List[str]] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n    folder_size: Optional[int] = None,\n    disabled: Optional[bool] = None,\n    pulled_on: Optional[str] = None,\n    user: Optional[str] = None,\n    tags: Optional[List] = None,\n    error: Optional[str] = None,\n):\n\"\"\"Constructs a new DataBlob instance.\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use `from_s3`, `from_azure_blob_storage`,\n        `from_mysql`, `from_clickhouse` or `from_local` methods instead.\n\n    Args:\n        uuid: Datablob uuid.\n        source: The URI of the data that was used to create the datablob.\n        type: The type of source used to generate the datablob. Depending on the source type, one of the following\n            values will be assigned: \"s3\", \"local\", \"db\", or \"azure_blob_storage\".\n        region: The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider.\n        cloud_provider: Cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n        datasources: The uuids of the datasources created from the datablob.\n        total_steps: The number of steps required to upload the datablob to the server.\n        completed_steps: The number of steps completed during the datablob's upload to the server.\n        folder_size: The uploaded datablob's size in bytes.\n        disabled: A flag that indicates the datablob's status. If the datablob is deleted, then **False** will be set.\n        pulled_on: The most recent date the datablob was uploaded.\n        user: The uuid of the user who created the datablob.\n        tags: Tag names associated with the datablob.\n        error: Contains the error message if the processing of the datablob fails.\n    \"\"\"\n    self.uuid = uuid\n    self.type = type\n    self.source = source\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.datasources = datasources\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n    self.folder_size = folder_size\n    self.disabled = disabled\n    self.pulled_on = pulled_on\n    self.user = user\n    self.tags = tags\n    self.error = error\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.as_df","title":"<code>as_df(dbx)</code>  <code>staticmethod</code>","text":"<p>Return the details of datablob instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dbx</code> <code>List[DataBlob]</code> <p>List of datablob instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the datablobs in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(dbx: List[\"DataBlob\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of datablob instances as a pandas dataframe.\n\n    Args:\n        dbx: List of datablob instances.\n\n    Returns:\n        Details of all the datablobs in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    db_lists = get_attributes_from_instances(dbx, DataBlob.ALL_DB_COLS)  # type: ignore\n\n    for db in db_lists:\n        db = DataBlob._get_tag_name_and_datasource_id(db)\n\n    lists_df = generate_df(db_lists, DataBlob.BASIC_DB_COLS)\n    df = add_ready_column(lists_df)\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return df\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.delete","title":"<code>delete(self)</code>","text":"<p>Delete a datablob from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted datablob.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef delete(self: DataBlob) -&gt; pd.DataFrame:\n\"\"\"Delete a datablob from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted datablob.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._delete_data(relative_url=f\"/datablob/{self.uuid}\")\n\n    response = DataBlob._get_tag_name_and_datasource_id(response)\n\n    df = pd.DataFrame([response])[DataBlob.BASIC_DB_COLS]\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.details","title":"<code>details(self)</code>","text":"<p>Return details of a datablob.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The datablob details as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> <p>Columns in the resulting dataframe are: uuid, datasources, type, source, region, cloud_provider, tags, pulled_on, completed_steps, total_steps, folder_size, user, error, disabled.</p> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef details(self: DataBlob) -&gt; pd.DataFrame:\n\"\"\"Return details of a datablob.\n\n    Returns:\n        The datablob details as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    details = Client._get_data(relative_url=f\"/datablob/{self.uuid}\")\n\n    details = DataBlob._get_tag_name_and_datasource_id(details)\n\n    details_df = pd.DataFrame([details])[DataBlob.ALL_DB_COLS]\n\n    details_df = details_df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(details_df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.from_azure_blob_storage","title":"<code>from_azure_blob_storage(uri, credential, cloud_provider=None, region=None, tag=None)</code>  <code>classmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from an Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Azure Blob Storage URI of the source file.</p> required <code>credential</code> <code>str</code> <p>Credential to access the Azure Blob Storage.</p> required <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then azure  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>To create a Datablob from Azure Blob Storage, you must have a valid Azure Blob Storage credential.</p> <p>If you don't know how to get the Azure Blob Storage credential, you can follow the below python example. It's one of the ways to get the Azure Blob Storage credential.</p> <ul> <li> <p>If you don't already have it, please install the Azure Storage Management (azure-mgmt-storage) and Azure Resource Management (azure-mgmt-resource) python client libraries using pip.</p> </li> <li> <p>Ensure the following four environment variables are set into your current working environment with appropriate values.</p> <ul> <li> <p>AZURE_TENANT_ID</p> </li> <li> <p>AZURE_CLIENT_ID</p> </li> <li> <p>AZURE_CLIENT_SECRET</p> </li> <li> <p>AZURE_SUBSCRIPTION_ID</p> </li> </ul> </li> <li> <p>Assign the resource group name in the GROUP_NAME variable and the storage account name in the STORAGE_ACCOUNT_NAME variable.</p> </li> <li> <p>Below is a sample code to create a datablob and storing it in S3. Please copy it and replace the placeholders with appropriate values</p> </li> </ul> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob\n\n# Create a credential for accessing Azure Blob Storage\n# Setting the required environment variables\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n# Setting the resource group name and storage account name\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n# Retrieving the credential\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\ncredential = azure_storage_keys['key1']\n\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-1 (default), feel free to change the cloud provider and\n# the region to suit your needs.\ndb = DataBlob.from_azure_blob_storage(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    credential=credential\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@classmethod\ndef from_azure_blob_storage(\n    cls,\n    uri: str,\n    credential: str,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from an Azure Blob Storage.\n\n    Args:\n        uri: Azure Blob Storage URI of the source file.\n        credential: Credential to access the Azure Blob Storage.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **azure**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n        An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    To create a Datablob from Azure Blob Storage, you must have a valid Azure Blob Storage credential.\n\n    If you don't know how to get the Azure Blob Storage credential, you can follow the below python example. It's one of the ways to get the Azure Blob Storage credential.\n\n    - If you don't already have it, please install the Azure Storage Management (azure-mgmt-storage) and Azure Resource Management (azure-mgmt-resource) python client libraries using pip.\n\n    - Ensure the following four environment variables are set into your current working environment with appropriate values.\n\n        - AZURE_TENANT_ID\n\n        - AZURE_CLIENT_ID\n\n        - AZURE_CLIENT_SECRET\n\n        - AZURE_SUBSCRIPTION_ID\n\n    - Assign the resource group name in the GROUP_NAME variable and the storage account name in the STORAGE_ACCOUNT_NAME variable.\n\n    - Below is a sample code to create a datablob and storing it in S3. Please copy it and replace the placeholders with appropriate values\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        import os\n\n        from azure.identity import DefaultAzureCredential\n        from azure.mgmt.storage import StorageManagementClient\n\n        from  airt.client import Client, DataBlob\n\n        # Create a credential for accessing Azure Blob Storage\n        # Setting the required environment variables\n        os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\n        os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\n        os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\n        os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n        # Setting the resource group name and storage account name\n        azure_group_name = \"{fill in azure_group_name}\"\n        azure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n        # Retrieving the credential\n        azure_storage_client = StorageManagementClient(\n            DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n        )\n        azure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n            azure_group_name, azure_storage_account_name\n        )\n        azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\n        credential = azure_storage_keys['key1']\n\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-1 (default), feel free to change the cloud provider and\n        # the region to suit your needs.\n        db = DataBlob.from_azure_blob_storage(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            credential=credential\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider=cloud_provider, region=region, default_cloud_provider=\"azure\")  # type: ignore\n\n    response = Client._post_data(\n        relative_url=\"/datablob/from_azure_blob_storage\",\n        json=dict(\n            uri=uri,\n            credential=credential,\n            region=region,\n            cloud_provider=cloud_provider,\n            tag=tag,\n        ),\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.from_clickhouse","title":"<code>from_clickhouse(*, host, database, table, protocol, index_column, timestamp_column, port=0, cloud_provider=None, region=None, username=None, password=None, filters=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from a ClickHouse database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Remote database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>protocol</code> <code>str</code> <p>Protocol to use. The valid values are \"native\" and \"http\".</p> required <code>index_column</code> <code>str</code> <p>The column to use as index (row labels).</p> required <code>timestamp_column</code> <code>str</code> <p>Timestamp column name in the tabel.</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 0 will be used.</p> <code>0</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CLICKHOUSE_USERNAME.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CLICKHOUSE_PASSWORD.</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass {\"user_id\": 1}.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a ClickHouse database:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_clickhouse(\n    username=\"{fill in database_username}\",\n    password=\"{fill in database_password}\",\n    host=\"{fill in host}\",\n    database=\"{fill in database}\",\n    table=\"{fill in table}\",\n    index_column=\"{fill in index_column}\",\n    timestamp_column=\"{fill in timestamp_column}\",\n    port=\"{fill in port}\",\n    filters={fill in filters},\n    protocol=\"native\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef from_clickhouse(\n    *,\n    host: str,\n    database: str,\n    table: str,\n    protocol: str,\n    index_column: str,\n    timestamp_column: str,\n    port: int = 0,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    filters: Optional[Dict[str, Any]] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from a ClickHouse database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **CLICKHOUSE_USERNAME** and **CLICKHOUSE_PASSWORD** environment variables.\n\n    Args:\n        host: Remote database host name.\n        database: Database name.\n        table: Table name.\n        protocol: Protocol to use. The valid values are \"native\" and \"http\".\n        index_column: The column to use as index (row labels).\n        timestamp_column: Timestamp column name in the tabel.\n        port: Host port number. If not passed, then the default value **0** will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        username: Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable\n            **CLICKHOUSE_USERNAME**.\n        password: Database password. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable\n            **CLICKHOUSE_PASSWORD**.\n        filters: Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass {\"user_id\": 1}.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a ClickHouse database:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_clickhouse(\n            username=\"{fill in database_username}\",\n            password=\"{fill in database_password}\",\n            host=\"{fill in host}\",\n            database=\"{fill in database}\",\n            table=\"{fill in table}\",\n            index_column=\"{fill in index_column}\",\n            timestamp_column=\"{fill in timestamp_column}\",\n            port=\"{fill in port}\",\n            filters={fill in filters},\n            protocol=\"native\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    username = (\n        username\n        if username is not None\n        else os.environ.get(\"CLICKHOUSE_USERNAME\", \"root\")\n    )\n\n    password = (\n        password\n        if password is not None\n        else os.environ.get(\"CLICKHOUSE_PASSWORD\", \"\")\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    json_req = dict(\n        host=host,\n        database=database,\n        table=table,\n        protocol=protocol,\n        port=port,\n        username=username,\n        password=password,\n        index_column=index_column,\n        timestamp_column=timestamp_column,\n        filters=filters,\n        region=region,\n        cloud_provider=cloud_provider,\n        tag=tag,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_clickhouse\", json=json_req\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.from_local","title":"<code>from_local(path, cloud_provider=None, region=None, tag=None, show_progress=True)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob from local file.</p> <p>The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>The relative or absolute path to a local file or to a directory containing the source files.</p> required <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <code>show_progress</code> <code>Optional[bool]</code> <p>Flag to set the progressbar visibility. If not passed, then the default value True will be used.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a local file:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_local(\n    path=\"{fill in path}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef from_local(\n    path: Union[str, Path],\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n    show_progress: Optional[bool] = True,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob from local file.\n\n    The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.\n\n    Args:\n        path: The relative or absolute path to a local file or to a directory containing the source files.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n        show_progress: Flag to set the progressbar visibility. If not passed, then the default value **True** will be used.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a local file:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_local(\n            path=\"{fill in path}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n\n        ```\n    \"\"\"\n    path = Path(path)\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    # Step 1: get presigned URL\n    _path = f\"local:{str(path)}\"\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_local/start\",\n        json=dict(\n            path=_path, region=region, cloud_provider=cloud_provider, tag=tag\n        ),\n    )\n\n    # Step 2: download the csv to the s3 bucket\n    files = list(path.glob(\"*\")) if path.is_dir() else [path]\n\n    # Initiate progress bar\n    t = tqdm(total=len(files), disable=not show_progress)\n\n    for file_to_upload in files:\n        DataBlob._upload_to_s3_with_retry(\n            file_to_upload=file_to_upload,\n            presigned_url=response[\"presigned\"][\"url\"],\n            presigned_fields=response[\"presigned\"][\"fields\"],\n        )\n        t.update()\n\n    t.close()\n    return DataBlob(uuid=response[\"uuid\"], type=response[\"type\"])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.from_mysql","title":"<code>from_mysql(*, host, database, table, port=3306, cloud_provider=None, region=None, username=None, password=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from a mysql database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the AIRT_CLIENT_DB_USERNAME and AIRT_CLIENT_DB_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Remote database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 3306 will be used.</p> <code>3306</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable AIRT_CLIENT_DB_USERNAME.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, the default value \"\" will be used unless the value is explicitly set in the environment variable AIRT_CLIENT_DB_PASSWORD.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a MySQL database:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_mysql(\n    username=\"{fill in database_username}\",\n    password=\"{fill in database_password}\",\n    host=\"{fill in host}\",\n    database=\"{fill in database}\",\n    table=\"{fill in table}\",\n    port=\"{fill in port}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef from_mysql(\n    *,\n    host: str,\n    database: str,\n    table: str,\n    port: int = 3306,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from a mysql database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **AIRT_CLIENT_DB_USERNAME** and **AIRT_CLIENT_DB_PASSWORD** environment variables.\n\n    Args:\n        host: Remote database host name.\n        database: Database name.\n        table: Table name.\n        port: Host port number. If not passed, then the default value **3306** will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        username: Database username. If not passed, the default value **\"root\"** will be used unless the value is explicitly set in the environment variable\n            **AIRT_CLIENT_DB_USERNAME**.\n        password: Database password. If not passed, the default value **\"\"** will be used unless the value is explicitly set in the environment variable\n            **AIRT_CLIENT_DB_PASSWORD**.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a MySQL database:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_mysql(\n            username=\"{fill in database_username}\",\n            password=\"{fill in database_password}\",\n            host=\"{fill in host}\",\n            database=\"{fill in database}\",\n            table=\"{fill in table}\",\n            port=\"{fill in port}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    username = (\n        username\n        if username is not None\n        else os.environ.get(CLIENT_DB_USERNAME, \"root\")\n    )\n\n    password = (\n        password if password is not None else os.environ.get(CLIENT_DB_PASSWORD, \"\")\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    json_req = dict(\n        host=host,\n        port=port,\n        username=username,\n        password=password,\n        database=database,\n        table=table,\n        region=region,\n        cloud_provider=cloud_provider,\n        tag=tag,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_mysql\", json=json_req\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.from_s3","title":"<code>from_s3(*, uri, access_key=None, secret_key=None, cloud_provider=None, region=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from an AWS S3 bucket.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>AWS S3 bucket uri.</p> required <code>access_key</code> <code>Optional[str]</code> <p>Access key for the S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable will be used.</p> <code>None</code> <code>secret_key</code> <code>Optional[str]</code> <p>Secret key for the S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable will be used.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region of the destination cloud provider where the datablob will be stored. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, the datablob's source bucket region will be used, whereas azure will use westeurope. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from an AWS S3 bucket:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the access_key and the secret_key are set in the\n# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef from_s3(\n    *,\n    uri: str,\n    access_key: Optional[str] = None,\n    secret_key: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from an AWS S3 bucket.\n\n    Args:\n        uri: AWS S3 bucket uri.\n        access_key: Access key for the S3 bucket. If **None** (default value), then the value\n            from **AWS_ACCESS_KEY_ID** environment variable will be used.\n        secret_key: Secret key for the S3 bucket. If **None** (default value), then the value\n            from **AWS_SECRET_ACCESS_KEY** environment variable will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The region of the destination cloud provider where the datablob will be stored. If **None** (default value) then the default region will be assigned based on\n            the cloud provider. In the case of **aws**, the datablob's source bucket region will be used, whereas **azure** will use **westeurope**. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n        An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from an AWS S3 bucket:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the access_key and the secret_key are set in the\n        # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_s3(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    access_key = (\n        access_key if access_key is not None else os.environ[\"AWS_ACCESS_KEY_ID\"]\n    )\n    secret_key = (\n        secret_key\n        if secret_key is not None\n        else os.environ[\"AWS_SECRET_ACCESS_KEY\"]\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider=cloud_provider, region=region, set_source_region=True)  # type: ignore\n\n    response = Client._post_data(\n        relative_url=\"/datablob/from_s3\",\n        json=dict(\n            uri=uri,\n            access_key=access_key,\n            secret_key=secret_key,\n            region=region,\n            cloud_provider=cloud_provider,\n            tag=tag,\n        ),\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.is_ready","title":"<code>is_ready(self)</code>","text":"<p>Check if the method's progress is complete.</p> <p>Info</p> <p>This method will return <code>True</code> immediately and will not wait for the progress to finish if the datablob is created using the <code>from_local</code> method.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the upload progress is completed, else False.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>def is_ready(self) -&gt; bool:\n\"\"\"Check if the method's progress is complete.\n\n    !!! info\n\n        This method will return `True` immediately and will not wait for the progress to finish\n        if the datablob is created using the `from_local` method.\n\n    Returns:\n        **True** if the upload progress is completed, else **False**.\n    \"\"\"\n    if self.type in [\"local\"]:\n        return True\n\n    progress_status = ProgressStatus(relative_url=f\"/datablob/{self.uuid}\")\n\n    return progress_status.is_ready()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of DataBlob instances</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of datablobs to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of datablobs to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted datablobs will be returned. Else, the default value False will be used to return only the list of active datablobs.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the datablobs that are successfully downloaded to the server will be returned. Else, the default value False will be used to return all the datablobs.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[DataBlob]</code> <p>A list of DataBlob instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"DataBlob\"]:\n\"\"\"Return the list of DataBlob instances\n\n    Args:\n        offset: The number of datablobs to offset at the beginning. If **None**,\n            then the default value **0** will be used.\n        limit: The maximum number of datablobs to return from the server. If **None**,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted datablobs will be returned.\n            Else, the default value **False** will be used to return only the list\n            of active datablobs.\n        completed: If set to **True**, then only the datablobs that are successfully downloaded\n            to the server will be returned. Else, the default value **False** will be used to\n            return all the datablobs.\n\n    Returns:\n        A list of DataBlob instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/datablob/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    dbx = [\n        DataBlob(\n            uuid=db[\"uuid\"],\n            type=db[\"type\"],\n            source=db[\"source\"],\n            region=db[\"region\"],\n            cloud_provider=db[\"cloud_provider\"],\n            datasources=db[\"datasources\"],\n            total_steps=db[\"total_steps\"],\n            completed_steps=db[\"completed_steps\"],\n            folder_size=db[\"folder_size\"],\n            disabled=db[\"disabled\"],\n            pulled_on=db[\"pulled_on\"],\n            user=db[\"user\"],\n            tags=db[\"tags\"],\n            error=db[\"error\"],\n        )\n        for db in lists\n    ]\n\n    return dbx\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.progress_bar","title":"<code>progress_bar(self, sleep_for=5, timeout=0)</code>","text":"<p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Info</p> <p>This method will not check the progress if the datablob is created using the <code>from_local</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>5</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of connection timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>def progress_bar(self, sleep_for: Union[int, float] = 5, timeout: int = 0):\n\"\"\"Blocks the execution and displays a progress bar showing the remote action progress.\n\n    !!! info\n\n        This method will not check the progress if the datablob is created using the\n        `from_local` method.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of connection timeout.\n    \"\"\"\n    if self.type not in [\"local\"]:\n        progress_status = ProgressStatus(\n            relative_url=f\"/datablob/{self.uuid}\",\n            sleep_for=sleep_for,\n            timeout=timeout,\n        )\n\n        progress_status.progress_bar()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.set_default_cloud_provider","title":"<code>set_default_cloud_provider(cls, cloud_provider, region=None)</code>","text":"<p>Sets the default destination value for the cloud_provider and the region.</p> <p>Whenever you call the from_* methods of the <code>DataBlob</code> class inside this context manager, the destination cloud_provider and region set in this context will be passed to the from_* methods, unless you explicitely override it in the parameter.</p> <p>Parameters:</p> Name Type Description Default <code>cloud_provider</code> <code>str</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers.</p> required <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[NoneType]</code> <p>A context manager that specifies the cloud provider and region to use.</p> <p>Here's an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob\n\n# Create a credential for accessing Azure Blob Storage\n# Setting the required environment variables\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n# Setting the resource group name and storage account name\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n# Retrieving the credential\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\ncredential = azure_storage_keys['key1']\n\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablobs created inside the context manager will be\n# stored in an AWS S3 bucket with the region set to eu-west-3.\nwith DataBlob.set_default_cloud_provider(\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n):\n    db = DataBlob.from_azure_blob_storage(\n        uri=\"{fill in uri}\",\n        credential=credential\n    )\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch(cls_method=True)\n@contextmanager\ndef set_default_cloud_provider(\n    cls: DataBlob, cloud_provider: str, region: Optional[str] = None\n) -&gt; Iterator[None]:\n\"\"\"Sets the default destination value for the cloud_provider and the region.\n\n    Whenever you call the from_\\* methods of the `DataBlob` class inside this context manager, the destination cloud_provider and region set in this context\n    will be passed to the from_\\* methods, unless you explicitely override it in the parameter.\n\n    Args:\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n        region: The destination cloud provider's region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1,\n            ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported\n            Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia,\n            centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth,\n            northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth,\n            switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n\n    Returns:\n        A context manager that specifies the cloud provider and region to use.\n\n    Here's an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        import os\n\n        from azure.identity import DefaultAzureCredential\n        from azure.mgmt.storage import StorageManagementClient\n\n        from  airt.client import Client, DataBlob\n\n        # Create a credential for accessing Azure Blob Storage\n        # Setting the required environment variables\n        os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\n        os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\n        os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\n        os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n        # Setting the resource group name and storage account name\n        azure_group_name = \"{fill in azure_group_name}\"\n        azure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n        # Retrieving the credential\n        azure_storage_client = StorageManagementClient(\n            DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n        )\n        azure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n            azure_group_name, azure_storage_account_name\n        )\n        azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\n        credential = azure_storage_keys['key1']\n\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablobs created inside the context manager will be\n        # stored in an AWS S3 bucket with the region set to eu-west-3.\n        with DataBlob.set_default_cloud_provider(\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        ):\n            db = DataBlob.from_azure_blob_storage(\n                uri=\"{fill in uri}\",\n                credential=credential\n            )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n\n    cls._default_provider_and_regions.append((cloud_provider, region))  # type: ignore\n\n    yield\n\n    cls._default_provider_and_regions.pop()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.tag","title":"<code>tag(self, name)</code>","text":"<p>Tag an existing datablob in the server.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A string to tag the datablob.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe with the details of the tagged datablob.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef tag(self: DataBlob, name: str) -&gt; pd.DataFrame:\n\"\"\"Tag an existing datablob in the server.\n\n    Args:\n        name: A string to tag the datablob.\n\n    Returns:\n        A pandas dataframe with the details of the tagged datablob.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/datablob/{self.uuid}/tag\", json=dict(name=name)\n    )\n\n    response = DataBlob._get_tag_name_and_datasource_id(response)\n\n    df = pd.DataFrame([response])[DataBlob.BASIC_DB_COLS]\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.to_datasource","title":"<code>to_datasource(self, *, file_type, index_column, sort_by, deduplicate_data=False, blocksize='256MB', **kwargs)</code>","text":"<p>Process the datablob and return a datasource object.</p> <p>Parameters:</p> Name Type Description Default <code>file_type</code> <code>str</code> <p>The file type of the datablob. Currently, the API only supports \"csv\" and \"parquet\" as file types.</p> required <code>index_column</code> <code>str</code> <p>The column to use as index (row labels).</p> required <code>sort_by</code> <code>Union[str, List[str]]</code> <p>The column(s) to sort the data. Can either be a string or a list of strings.</p> required <code>deduplicate_data</code> <code>bool</code> <p>If set to True (default value False), the datasource will be created with duplicate rows removed.</p> <code>False</code> <code>blocksize</code> <code>str</code> <p>The number of bytes used to split larger files. If None, then the default value 256MB will be used.</p> <code>'256MB'</code> <code>kwargs</code> <p>Additional keyword arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file, pass **{\"skipfooter\": 100}</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataSource</code> <p>An instance of the <code>DataSource</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the CSV file processing fails.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_datasource(\n    self: DataBlob,\n    *,\n    file_type: str,\n    index_column: str,\n    sort_by: Union[str, List[str]],\n    deduplicate_data: bool = False,\n    blocksize: str = \"256MB\",\n    **kwargs,\n) -&gt; DataSource:\n\"\"\"Process the datablob and return a datasource object.\n\n    Args:\n        file_type: The file type of the datablob. Currently, the API only supports **\"csv\"** and **\"parquet\"** as file types.\n        index_column: The column to use as index (row labels).\n        sort_by: The column(s) to sort the data. Can either be a string or a list of strings.\n        deduplicate_data: If set to **True** (default value **False**), the datasource will be created with duplicate rows removed.\n        blocksize: The number of bytes used to split larger files. If None, then the default value **256MB** will be used.\n        kwargs: Additional keyword arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file,\n            pass **{\"skipfooter\": 100}\n\n    Returns:\n        An instance of the `DataSource` class.\n\n    Raises:\n        ValueError: If the CSV file processing fails.\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    json_req = dict(\n        file_type=file_type,\n        deduplicate_data=deduplicate_data,\n        index_column=index_column,\n        sort_by=sort_by,\n        blocksize=blocksize,\n        kwargs=kwargs,\n    )\n    response = Client._post_data(\n        relative_url=f\"/datablob/{self.uuid}/to_datasource\", json=json_req\n    )\n\n    return DataSource(uuid=response[\"uuid\"])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataBlob.wait","title":"<code>wait(self, sleep_for=1, timeout=0)</code>","text":"<p>Blocks execution while waiting for the remote action to complete.</p> <p>Info</p> <p>This method will not check the progress if the datablob is created using the <code>from_local</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>def wait(self, sleep_for: Union[int, float] = 1, timeout: int = 0):\n\"\"\"Blocks execution while waiting for the remote action to complete.\n\n    !!! info\n\n        This method will not check the progress if the datablob is created using the\n        `from_local` method.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of timeout.\n    \"\"\"\n    if self.type not in [\"local\"]:\n        progress_status = ProgressStatus(\n            relative_url=f\"/datablob/{self.uuid}\",\n            sleep_for=sleep_for,\n            timeout=timeout,\n        )\n\n        progress_status.wait()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource","title":"<code> DataSource        </code>","text":"<p>A class for managing datasources and training ML models on them.</p> <p>To instantiate the DataSource class, please call <code>DataBlob.to_datasource</code> method of the <code>DataBlob</code> class.</p> <p>The DataSource class has two categories of methods,</p> <ul> <li>Methods for managing the datasources.</li> <li>Method for training a model against a datasource.</li> </ul> <p>Methods such as <code>delete</code>, <code>ls</code>, <code>details</code>, <code>head</code>, etc., can be used to manage and obtain additional information from a datasource instance.</p> <p>And, the <code>train</code> method can be used to train a new model against a datasource instance.</p> <p>All the function calls to the library are asynchronous and they return immediately. To manage completion, methods inside the returned object will return a status object indicating the completion status and a method to display an interactive progress bar that can be called to check the progress.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.dtypes","title":"<code>dtypes: DataFrame</code>  <code>property</code> <code>readonly</code>","text":"<p>Return the dtypes of the datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the data type of each column.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.__init__","title":"<code>__init__(self, uuid, datablob=None, folder_size=None, no_of_rows=None, error=None, disabled=None, created=None, pulled_on=None, user=None, hash=None, region=None, cloud_provider=None, tags=None, total_steps=None, completed_steps=None)</code>  <code>special</code>","text":"<p>Constructs a new <code>DataSource</code> instance.</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use <code>DataBlob.to_datasource</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>DataSource uuid.</p> required <code>datablob</code> <code>Optional[str]</code> <p>Datablob uuid.</p> <code>None</code> <code>folder_size</code> <code>Optional[int]</code> <p>The uploaded datasource's size in bytes.</p> <code>None</code> <code>no_of_rows</code> <code>Optional[int]</code> <p>The number of records in the datasource.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if the processing of the datasource fails.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the datasource's status. If the datasource is deleted, then False will be set.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>The datasource creation date.</p> <code>None</code> <code>pulled_on</code> <code>Optional[str]</code> <p>The most recent date the datasource was uploaded.</p> <code>None</code> <code>user</code> <code>Optional[str]</code> <p>The uuid of the user who created the datasource.</p> <code>None</code> <code>hash</code> <code>Optional[str]</code> <p>The datasource hash.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region name of the cloud provider where the datasource is stored</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The name of the cloud storage provider where the datasource is stored.</p> <code>None</code> <code>tags</code> <code>Optional[List[Dict[str, str]]]</code> <p>Tag names associated with the datasource.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>The number of steps required to upload the datasource to the server.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>The number of steps completed during the datasource's upload to the server.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    datablob: Optional[str] = None,\n    folder_size: Optional[int] = None,\n    no_of_rows: Optional[int] = None,\n    error: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n    pulled_on: Optional[str] = None,\n    user: Optional[str] = None,\n    hash: Optional[str] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    tags: Optional[List[Dict[str, str]]] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n):\n\"\"\"Constructs a new `DataSource` instance.\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use `DataBlob.to_datasource` method instead.\n\n    Args:\n        uuid: DataSource uuid.\n        datablob: Datablob uuid.\n        folder_size: The uploaded datasource's size in bytes.\n        no_of_rows: The number of records in the datasource.\n        error: Contains the error message if the processing of the datasource fails.\n        disabled: A flag that indicates the datasource's status. If the datasource is deleted, then **False** will be set.\n        created: The datasource creation date.\n        pulled_on: The most recent date the datasource was uploaded.\n        user: The uuid of the user who created the datasource.\n        hash: The datasource hash.\n        region: The region name of the cloud provider where the datasource is stored\n        cloud_provider: The name of the cloud storage provider where the datasource is stored.\n        tags: Tag names associated with the datasource.\n        total_steps: The number of steps required to upload the datasource to the server.\n        completed_steps: The number of steps completed during the datasource's upload to the server.\n    \"\"\"\n    self.uuid = uuid\n    self.datablob = datablob\n    self.folder_size = folder_size\n    self.no_of_rows = no_of_rows\n    self.error = error\n    self.disabled = disabled\n    self.created = created\n    self.pulled_on = pulled_on\n    self.user = user\n    self.hash = hash\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.tags = tags\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.as_df","title":"<code>as_df(dsx)</code>  <code>staticmethod</code>","text":"<p>Return the details of <code>DataSource</code> instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dsx</code> <code>List[DataSource]</code> <p>List of <code>DataSource</code> instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of the datasources in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(dsx: List[\"DataSource\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of `DataSource` instances as a pandas dataframe.\n\n    Args:\n        dsx: List of `DataSource` instances.\n\n    Returns:\n        Details of the datasources in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    ds_lists = [{i: getattr(ds, i) for i in DataSource.ALL_DS_COLS} for ds in dsx]\n\n    for ds in ds_lists:\n        ds[\"tags\"] = get_values_from_item(ds[\"tags\"], \"name\")\n\n    lists_df = generate_df(ds_lists, DataSource.BASIC_DS_COLS)\n    df = add_ready_column(lists_df)\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return df\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.delete","title":"<code>delete(self)</code>","text":"<p>Delete a datasource from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted datasource.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef delete(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Delete a datasource from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted datasource.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._delete_data(relative_url=f\"/datasource/{self.uuid}\")\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.BASIC_DS_COLS]\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.details","title":"<code>details(self)</code>","text":"<p>Return details of a datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The datasource details as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef details(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Return details of a datasource.\n\n    Returns:\n        The datasource details as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._get_data(relative_url=f\"/datasource/{self.uuid}\")\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.ALL_DS_COLS]\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.head","title":"<code>head(self)</code>","text":"<p>Return the first few rows of the datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The first few rows of the datasource as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef head(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Return the first few rows of the datasource.\n\n    Returns:\n        The first few rows of the datasource as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._get_data(relative_url=f\"/datasource/{self.uuid}/head\")\n    df = dict_to_df(response)\n\n    return df\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.is_ready","title":"<code>is_ready(self)</code>","text":"<p>Check if the method's progress is complete.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the progress is completed, else False.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef is_ready(\n    self: DataSource,\n) -&gt; bool:\n\"\"\"Check if the method's progress is complete.\n\n    Returns:\n        **True** if the progress is completed, else **False**.\n    \"\"\"\n    progress_status = ProgressStatus(relative_url=f\"/datasource/{self.uuid}\")\n\n    return progress_status.is_ready()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of <code>DataSource</code> instances available in server.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of datasources to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of datasources to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted datasources will be returned. Else, the default value False will be used to return only the list of active datasources.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the datasources that are successfully processed in server will be returned. Else, the default value False will be used to return all the datasources.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[DataSource]</code> <p>A list of <code>DataSource</code> instances available in server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"DataSource\"]:\n\"\"\"Return the list of `DataSource` instances available in server.\n\n    Args:\n        offset: The number of datasources to offset at the beginning. If **None**,\n            then the default value **0** will be used.\n        limit: The maximum number of datasources to return from the server. If **None**,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted datasources will be returned.\n            Else, the default value **False** will be used to return only the list\n            of active datasources.\n        completed: If set to **True**, then only the datasources that are successfully processed\n            in server will be returned. Else, the default value **False** will be used to\n            return all the datasources.\n\n    Returns:\n        A list of `DataSource` instances available in server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/datasource/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    dsx = [\n        DataSource(\n            uuid=ds[\"uuid\"],\n            datablob=ds[\"datablob\"],\n            folder_size=ds[\"folder_size\"],\n            no_of_rows=ds[\"no_of_rows\"],\n            region=ds[\"region\"],\n            cloud_provider=ds[\"cloud_provider\"],\n            error=ds[\"error\"],\n            disabled=ds[\"disabled\"],\n            created=ds[\"created\"],\n            pulled_on=ds[\"pulled_on\"],\n            user=ds[\"user\"],\n            hash=ds[\"hash\"],\n            tags=ds[\"tags\"],\n            total_steps=ds[\"total_steps\"],\n            completed_steps=ds[\"completed_steps\"],\n        )\n        for ds in lists\n    ]\n\n    return dsx\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.progress_bar","title":"<code>progress_bar(self, sleep_for=5, timeout=0)</code>","text":"<p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>5</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of connection timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef progress_bar(self: DataSource, sleep_for: Union[int, float] = 5, timeout: int = 0):\n\"\"\"Blocks the execution and displays a progress bar showing the remote action progress.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of connection timeout.\n    \"\"\"\n    progress_status = ProgressStatus(\n        relative_url=f\"/datasource/{self.uuid}\", sleep_for=sleep_for, timeout=timeout\n    )\n\n    progress_status.progress_bar()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.tag","title":"<code>tag(self, name)</code>","text":"<p>Tag an existing datasource in server.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A string to tag the datasource.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe with the details of the tagged datasource.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef tag(self: DataSource, name: str) -&gt; pd.DataFrame:\n\"\"\"Tag an existing datasource in server.\n\n    Args:\n        name: A string to tag the datasource.\n\n    Returns:\n        A pandas dataframe with the details of the tagged datasource.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/datasource/{self.uuid}/tag\", json=dict(name=name)\n    )\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.BASIC_DS_COLS]\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.train","title":"<code>train(self, *, client_column, timestamp_column=None, target_column, target, predict_after)</code>","text":"<p>Train a model against the datasource.</p> <p>This method trains the model for predicting which clients are most likely to have a specified event in the future.</p> <p>The call to this method is asynchronous and the progress can be checked using the progress bar method or the status flag attribute available in the <code>DataSource</code> class.</p> <p>For more model specific information, please check the documentation of <code>Model</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>client_column</code> <code>str</code> <p>The column name that uniquely identifies the users/clients.</p> required <code>timestamp_column</code> <code>Optional[str]</code> <p>The timestamp column indicating the time of an event. If not passed, then the default value None will be used.</p> <code>None</code> <code>target_column</code> <code>str</code> <p>Target column name that indicates the type of the event.</p> required <code>target</code> <code>str</code> <p>Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event.</p> required <code>predict_after</code> <code>timedelta</code> <p>Time delta in hours of the expected target event.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>An instance of the <code>Model</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the input parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef train(\n    self: DataSource,\n    *,\n    client_column: str,\n    timestamp_column: Optional[str] = None,\n    target_column: str,\n    target: str,\n    predict_after: timedelta,\n) -&gt; Model:\n\"\"\"Train a model against the datasource.\n\n    This method trains the model for predicting which clients are most likely to have a specified\n    event in the future.\n\n    The call to this method is asynchronous and the progress can be checked using the progress bar method\n    or the status flag attribute available in the `DataSource` class.\n\n    For more model specific information, please check the documentation of `Model` class.\n\n    Args:\n        client_column: The column name that uniquely identifies the users/clients.\n        timestamp_column: The timestamp column indicating the time of an event. If not passed,\n            then the default value **None** will be used.\n        target_column: Target column name that indicates the type of the event.\n        target: Target event name to train and make predictions. You can pass the target event as a string or as a\n            regular expression for predicting more than one event. For example, passing ***checkout** will\n            train a model to predict any checkout event.\n        predict_after: Time delta in hours of the expected target event.\n\n    Returns:\n        An instance of the `Model` class.\n\n    Raises:\n        ValueError: If the input parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/model/train\",\n        json=dict(\n            data_uuid=self.uuid,\n            client_column=client_column,\n            target_column=target_column,\n            target=target,\n            predict_after=int(predict_after.total_seconds()),\n        ),\n    )\n\n    return Model(uuid=response[\"uuid\"])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.DataSource.wait","title":"<code>wait(self, sleep_for=1, timeout=0)</code>","text":"<p>Blocks execution while waiting for the remote action to complete.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef wait(self: DataSource, sleep_for: Union[int, float] = 1, timeout: int = 0):\n\"\"\"Blocks execution while waiting for the remote action to complete.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of timeout.\n    \"\"\"\n\n    progress_status = ProgressStatus(\n        relative_url=f\"/datasource/{self.uuid}\", sleep_for=sleep_for, timeout=timeout\n    )\n\n    progress_status.wait()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model","title":"<code> Model            (ProgressStatus)         </code>","text":"<p>A class for querying the model training, evaluation, and prediction status.</p> <p>The Model class is instantiated automatically when the <code>DataSource.train</code> method is called on a datasource. Currently, it is the only way to instantiate the Model class.</p> <p>The model is trained to predict a specific event in the future and we assume the input data to have:</p> <ul> <li>a column identifying a client (client_column). E.g: person, car, business, etc.,</li> <li>a column specifying a type of event to predict (target_column). E.g: buy, checkout, etc.,</li> <li>a timestamp column (timestamp_column) specifying the time of an occurred event.</li> </ul> <p>Along with the above mandatory columns, the input data can have additional columns of any type (int, category, float, datetime type, etc.,). These additional columns will be used in the model training for making more accurate predictions.</p> <p>Finally, we need to know how much ahead we wish to make predictions. This lead time varies widely for each use case and can be in minutes for a webshop or even several weeks for a banking product such as a loan.</p> <p>As always, the model training and prediction is an asynchronous process and can take a few hours to finish depending on the size of your dataset. The progress for the same can be checked by calling the <code>ProgressStatus.is_ready</code> method on the Model instance. Alternatively, you can call the <code>ProgressStatus.progress_bar</code> method to monitor the status interactively.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.__init__","title":"<code>__init__(self, uuid, datasource=None, client_column=None, target_column=None, target=None, predict_after=None, timestamp_column=None, total_steps=None, completed_steps=None, region=None, cloud_provider=None, error=None, disabled=None, created=None, user=None)</code>  <code>special</code>","text":"<p>Constructs a new <code>Model</code> instance</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use <code>DataSource.train</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>Model uuid.</p> required <code>datasource</code> <code>Optional[str]</code> <p>DataSource uuid.</p> <code>None</code> <code>client_column</code> <code>Optional[str]</code> <p>The column name that uniquely identifies the users/clients.</p> <code>None</code> <code>target_column</code> <code>Optional[str]</code> <p>Target column name that indicates the type of the event.</p> <code>None</code> <code>target</code> <code>Optional[str]</code> <p>Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event.</p> <code>None</code> <code>predict_after</code> <code>Optional[str]</code> <p>Time delta in hours of the expected target event.</p> <code>None</code> <code>timestamp_column</code> <code>Optional[str]</code> <p>The timestamp column indicating the time of an event. If not passed, then the default value None will be used.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>No of steps needed to complete the model training.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>No of steps completed so far in the model training.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region name of the cloud provider where the model is stored.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The name of the cloud storage provider where the model is stored.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if the training of the model fails.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the model's status. If the model is deleted, then False will be set.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>Model creation date.</p> <code>None</code> <code>user</code> <code>Optional[str]</code> <p>The uuid of the user who created the model.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    datasource: Optional[str] = None,\n    client_column: Optional[str] = None,\n    target_column: Optional[str] = None,\n    target: Optional[str] = None,\n    predict_after: Optional[str] = None,\n    timestamp_column: Optional[str] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    error: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n    user: Optional[str] = None,\n):\n\"\"\"Constructs a new `Model` instance\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use\n        `DataSource.train` method instead.\n\n    Args:\n        uuid: Model uuid.\n        datasource: DataSource uuid.\n        client_column: The column name that uniquely identifies the users/clients.\n        target_column: Target column name that indicates the type of the event.\n        target: Target event name to train and make predictions. You can pass the target event as a string or as a\n            regular expression for predicting more than one event. For example, passing ***checkout** will\n            train a model to predict any checkout event.\n        predict_after: Time delta in hours of the expected target event.\n        timestamp_column: The timestamp column indicating the time of an event. If not passed,\n            then the default value **None** will be used.\n        total_steps: No of steps needed to complete the model training.\n        completed_steps: No of steps completed so far in the model training.\n        region: The region name of the cloud provider where the model is stored.\n        cloud_provider: The name of the cloud storage provider where the model is stored.\n        error: Contains the error message if the training of the model fails.\n        disabled: A flag that indicates the model's status. If the model is deleted, then **False** will be set.\n        created: Model creation date.\n        user: The uuid of the user who created the model.\n    \"\"\"\n    self.uuid = uuid\n    self.datasource = datasource\n    self.client_column = client_column\n    self.target_column = target_column\n    self.target = target\n    self.predict_after = predict_after\n    self.timestamp_column = timestamp_column\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.error = error\n    self.disabled = disabled\n    self.created = created\n    self.user = user\n    ProgressStatus.__init__(self, relative_url=f\"/model/{self.uuid}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.as_df","title":"<code>as_df(mx)</code>  <code>staticmethod</code>","text":"<p>Return the details of Model instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>mx</code> <code>List[Model]</code> <p>List of Model instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the models in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(mx: List[\"Model\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of Model instances as a pandas dataframe.\n\n    Args:\n        mx: List of Model instances.\n\n    Returns:\n        Details of all the models in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    model_lists = get_attributes_from_instances(mx, Model.BASIC_MODEL_COLS)  # type: ignore\n\n    df = generate_df(model_lists, Model.BASIC_MODEL_COLS)\n\n    df = df.rename(columns=Model.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.delete","title":"<code>delete(self)</code>","text":"<p>Delete a model from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted model.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef delete(self: Model) -&gt; pd.DataFrame:\n\"\"\"Delete a model from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted model.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._delete_data(relative_url=f\"/model/{self.uuid}\")\n\n    df = pd.DataFrame(response, index=[0])[Model.BASIC_MODEL_COLS]\n\n    df = df.rename(columns=Model.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.details","title":"<code>details(self)</code>","text":"<p>Return the details of a model.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the model.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef details(self: Model) -&gt; pd.DataFrame:\n\"\"\"Return the details of a model.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the model.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._get_data(relative_url=f\"/model/{self.uuid}\")\n\n    df = pd.DataFrame(response, index=[0])[Model.ALL_MODEL_COLS]\n\n    df = df.rename(columns=Model.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.evaluate","title":"<code>evaluate(self)</code>","text":"<p>Return the evaluation metrics of the trained model.</p> <p>Currently, this method returns the model's accuracy, precision, and recall. In the future, more performance metrics will be added.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The performance metrics of the trained model as a pandas series.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef evaluate(self: Model) -&gt; pd.DataFrame:\n\"\"\"Return the evaluation metrics of the trained model.\n\n    Currently, this method returns the model's accuracy, precision, and recall. In the\n    future, more performance metrics will be added.\n\n    Returns:\n        The performance metrics of the trained model as a pandas series.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    model_evaluate = Client._get_data(relative_url=f\"/model/{self.uuid}/evaluate\")\n    return pd.DataFrame(dict(model_evaluate), index=[0]).T.rename(columns={0: \"eval\"})\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of Model instances available in the server.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of models to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of models to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted models will be returned. Else, the default value False will be used to return only the list of active models.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the models that are successfully processed in server will be returned. Else, the default value False will be used to return all the models.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Model]</code> <p>A list of Model instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"Model\"]:\n\"\"\"Return the list of Model instances available in the server.\n\n    Args:\n        offset: The number of models to offset at the beginning. If None, then the default value **0** will be used.\n        limit: The maximum number of models to return from the server. If None,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted models will be returned. Else, the default value\n            **False** will be used to return only the list of active models.\n        completed: If set to **True**, then only the models that are successfully processed in server will be returned.\n            Else, the default value **False** will be used to return all the models.\n\n    Returns:\n        A list of Model instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/model/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    mx = [\n        Model(\n            uuid=model[\"uuid\"],\n            datasource=model[\"datasource\"],\n            client_column=model[\"client_column\"],\n            target_column=model[\"target_column\"],\n            target=model[\"target\"],\n            predict_after=model[\"predict_after\"],\n            timestamp_column=model[\"timestamp_column\"],\n            total_steps=model[\"total_steps\"],\n            completed_steps=model[\"completed_steps\"],\n            region=model[\"region\"],\n            cloud_provider=model[\"cloud_provider\"],\n            error=model[\"error\"],\n            disabled=model[\"disabled\"],\n            created=model[\"created\"],\n            user=model[\"user\"],\n        )\n        for model in lists\n    ]\n\n    return mx\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Model.predict","title":"<code>predict(self, data_uuid=0)</code>","text":"<p>Run predictions against the trained model.</p> <p>The progress for the same can be checked by calling the <code>is_ready</code> method on the <code>Model</code> instance. Alternatively, you can call the <code>progress_bar</code> method to monitor the status interactively.</p> <p>Parameters:</p> Name Type Description Default <code>data_uuid</code> <code>Optional[int]</code> <p>The datasource uuid to run the predictions. If not set, then the datasource used for training the model will be used for prediction aswell.</p> <code>0</code> <p>Returns:</p> Type Description <code>Prediction</code> <p>An instance of the <code>Prediction</code> class.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  airt.client import Client, DataBlob, Model\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Print the details of the newly created model\nprint(model.details())\n\n# Display the details of all models created by the currently\n# logged-in user\nprint(Model.as_df(Model.ls()))\n\n# Evaluate the newly created model\nprint(model.evaluate())\n\n# Run predictions on the newly created model\nprediction = model.predict()\n\n# Display the prediction status in a progress bar\nprediction.progress_bar()\n\n# Display details of the predictions\nprint(prediction.details())\n\n# Delete the newly created model\nprint(model.delete())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef predict(self: Model, data_uuid: Optional[int] = 0) -&gt; Prediction:\n\"\"\"Run predictions against the trained model.\n\n    The progress for the same can be checked by calling the `is_ready` method on the `Model` instance.\n    Alternatively, you can call the `progress_bar` method to monitor the status interactively.\n\n    Args:\n        data_uuid: The datasource uuid to run the predictions. If not set, then the datasource used for training\n            the model will be used for prediction aswell.\n\n    Returns:\n        An instance of the `Prediction` class.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    req_json = dict(data_uuid=data_uuid) if data_uuid else None\n\n    response = Client._post_data(\n        relative_url=f\"/model/{self.uuid}/predict\", json=req_json\n    )\n\n    return Prediction(uuid=response[\"uuid\"], datasource=response[\"datasource\"])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction","title":"<code> Prediction            (ProgressStatus)         </code>","text":"<p>A class to manage and download the predictions.</p> <p>The Prediction class is automatically instantiated by calling the <code>Model.predict</code> method of a <code>Model</code> instance. Currently, it is the only way to instantiate this class.</p> <p>At the moment, the prediction results can only be</p> <ul> <li> <p>downloaded to a local folder in parquet file format</p> </li> <li> <p>pushed to Azure Blob Storage or an AWS S3 bucket</p> </li> <li> <p>pushed to MySql or ClickHouse database</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.__init__","title":"<code>__init__(self, uuid, datasource=None, model=None, created=None, total_steps=None, completed_steps=None, region=None, cloud_provider=None, error=None, disabled=None)</code>  <code>special</code>","text":"<p>Constructs a new Prediction instance</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, instead please use <code>Model.predict</code> method of the Model instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>Prediction uuid.</p> required <code>datasource</code> <code>Optional[str]</code> <p>DataSource uuid.</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model uuid.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>Prediction creation date.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>No of steps needed to complete the model prediction.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>No of steps completed so far in the model prediction.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region name of the cloud provider where the prediction is stored.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The name of the cloud storage provider where the prediction is stored.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if running the predictions fails.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the prediction's status. If the prediction is deleted, then False will be set.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    datasource: Optional[str] = None,\n    model: Optional[str] = None,\n    created: Optional[str] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    error: Optional[str] = None,\n    disabled: Optional[bool] = None,\n):\n\"\"\"Constructs a new **Prediction** instance\n\n    Warning:\n        Do not construct this object directly by calling the constructor, instead please use\n        `Model.predict` method of the Model instance.\n\n    Args:\n        uuid: Prediction uuid.\n        datasource: DataSource uuid.\n        model: Model uuid.\n        created: Prediction creation date.\n        total_steps: No of steps needed to complete the model prediction.\n        completed_steps: No of steps completed so far in the model prediction.\n        region: The region name of the cloud provider where the prediction is stored.\n        cloud_provider: The name of the cloud storage provider where the prediction is stored.\n        error: Contains the error message if running the predictions fails.\n        disabled: A flag that indicates the prediction's status. If the prediction is deleted, then **False** will be set.\n    \"\"\"\n    self.uuid = uuid\n    self.datasource = datasource\n    self.model = model\n    self.created = created\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.error = error\n    self.disabled = disabled\n    ProgressStatus.__init__(self, relative_url=f\"/prediction/{self.uuid}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.as_df","title":"<code>as_df(predx)</code>  <code>staticmethod</code>","text":"<p>Return the details of prediction instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>predx</code> <code>List[Prediction]</code> <p>List of prediction instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the prediction in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(predx: List[\"Prediction\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of prediction instances as a pandas dataframe.\n\n    Args:\n        predx: List of prediction instances.\n\n    Returns:\n        Details of all the prediction in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = get_attributes_from_instances(predx, Prediction.BASIC_PRED_COLS)  # type: ignore\n\n    df = generate_df(response, Prediction.BASIC_PRED_COLS)\n\n    df = df.rename(columns=Prediction.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.delete","title":"<code>delete(self)</code>","text":"<p>Delete a prediction from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted prediction.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef delete(self: Prediction) -&gt; pd.DataFrame:\n\"\"\"Delete a prediction from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted prediction.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._delete_data(relative_url=f\"/prediction/{self.uuid}\")\n\n    df = pd.DataFrame(response, index=[0])[Prediction.BASIC_PRED_COLS]\n\n    df = df.rename(columns=Prediction.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.details","title":"<code>details(self)</code>","text":"<p>Return the details of a prediction.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the prediction.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef details(self: Prediction) -&gt; pd.DataFrame:\n\"\"\"Return the details of a prediction.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the prediction.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._get_data(relative_url=f\"/prediction/{self.uuid}\")\n\n    df = pd.DataFrame(response, index=[0])[Prediction.ALL_PRED_COLS]\n\n    df = df.rename(columns=Prediction.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of Prediction instances available in the server.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of predictions to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of predictions to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted predictions will be returned. Else, the default value False will be used to return only the list of active predictions.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the predictions that are successfully processed in server will be returned. Else, the default value False will be used to return all the predictions.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Prediction]</code> <p>A list of Prediction instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"Prediction\"]:\n\"\"\"Return the list of Prediction instances available in the server.\n\n    Args:\n        offset: The number of predictions to offset at the beginning. If None, then the default value **0** will be used.\n        limit: The maximum number of predictions to return from the server. If None,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted predictions will be returned. Else, the default value\n            **False** will be used to return only the list of active predictions.\n        completed: If set to **True**, then only the predictions that are successfully processed in server will be returned.\n            Else, the default value **False** will be used to return all the predictions.\n\n    Returns:\n        A list of Prediction instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/prediction/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    predx = [\n        Prediction(\n            uuid=pred[\"uuid\"],\n            model=pred[\"model\"],\n            datasource=pred[\"datasource\"],\n            created=pred[\"created\"],\n            total_steps=pred[\"total_steps\"],\n            completed_steps=pred[\"completed_steps\"],\n            region=pred[\"region\"],\n            cloud_provider=pred[\"cloud_provider\"],\n            error=pred[\"error\"],\n            disabled=pred[\"disabled\"],\n        )\n        for pred in lists\n    ]\n\n    return predx\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_azure_blob_storage","title":"<code>to_azure_blob_storage(self, uri, credential)</code>","text":"<p>Push the prediction results to the target Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Target Azure Blob Storage uri.</p> required <code>credential</code> <code>str</code> <p>Credential to access the Azure Blob Storage.</p> required <p>Returns:</p> Type Description <code>ProgressStatus</code> <p>An instance of <code>ProgressStatus</code> class.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_azure_blob_storage(\n    self: Prediction,\n    uri: str,\n    credential: str,\n) -&gt; ProgressStatus:\n\"\"\"Push the prediction results to the target Azure Blob Storage.\n\n    Args:\n        uri: Target Azure Blob Storage uri.\n        credential: Credential to access the Azure Blob Storage.\n\n    Returns:\n        An instance of `ProgressStatus` class.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/prediction/{self.uuid}/to_azure_blob_storage\",\n        json=dict(uri=uri, credential=credential),\n    )\n\n    return ProgressStatus(relative_url=f\"/prediction/push/{response['uuid']}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_clickhouse","title":"<code>to_clickhouse(self, *, host, database, table, protocol, port=0, username=None, password=None)</code>","text":"<p>Push the prediction results to a clickhouse database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Remote database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>protocol</code> <code>str</code> <p>Protocol to use (native/http).</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 0 will be used.</p> <code>0</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, then the value set in the environment variable CLICKHOUSE_USERNAME will be used else the default value \"root\" will be used.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, then the value set in the environment variable CLICKHOUSE_PASSWORD will be used else the default value \"\" will be used.</p> <code>None</code> <p>Returns:</p> Type Description <code>ProgressStatus</code> <p>An instance of <code>ProgressStatus</code> class.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_clickhouse(\n    self: Prediction,\n    *,\n    host: str,\n    database: str,\n    table: str,\n    protocol: str,\n    port: int = 0,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n) -&gt; ProgressStatus:\n\"\"\"Push the prediction results to a clickhouse database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **CLICKHOUSE_USERNAME** and **CLICKHOUSE_PASSWORD** environment variables.\n\n    Args:\n        host: Remote database host name.\n        database: Database name.\n        table: Table name.\n        protocol: Protocol to use (native/http).\n        port: Host port number. If not passed, then the default value **0** will be used.\n        username: Database username. If not passed, then the value set in the environment variable\n            **CLICKHOUSE_USERNAME** will be used else the default value \"root\" will be used.\n        password: Database password. If not passed, then the value set in the environment variable\n            **CLICKHOUSE_PASSWORD** will be used else the default value \"\" will be used.\n\n    Returns:\n        An instance of `ProgressStatus` class.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    username = (\n        username\n        if username is not None\n        else os.environ.get(\"CLICKHOUSE_USERNAME\", \"root\")\n    )\n\n    password = (\n        password if password is not None else os.environ.get(\"CLICKHOUSE_PASSWORD\", \"\")\n    )\n\n    req_json = dict(\n        host=host,\n        database=database,\n        table=table,\n        protocol=protocol,\n        port=port,\n        username=username,\n        password=password,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/prediction/{self.uuid}/to_clickhouse\", json=req_json\n    )\n\n    return ProgressStatus(relative_url=f\"/prediction/push/{response['uuid']}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_local","title":"<code>to_local(self, path, show_progress=True)</code>","text":"<p>Download the prediction results to a local directory.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Local directory path.</p> required <code>show_progress</code> <code>Optional[bool]</code> <p>Flag to set the progressbar visibility. If not passed, then the default value True will be used.</p> <code>True</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>If the path is invalid.</p> <code>HTTPError</code> <p>If the presigned AWS s3 uri to download the prediction results are invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_local(\n    self: Prediction,\n    path: Union[str, Path],\n    show_progress: Optional[bool] = True,\n) -&gt; None:\n\"\"\"Download the prediction results to a local directory.\n\n    Args:\n        path: Local directory path.\n        show_progress: Flag to set the progressbar visibility. If not passed, then the default value **True** will be used.\n\n    Raises:\n        FileNotFoundError: If the **path** is invalid.\n        HTTPError: If the presigned AWS s3 uri to download the prediction results are invalid or not reachable.\n    \"\"\"\n    response = Client._get_data(relative_url=f\"/prediction/{self.uuid}/to_local\")\n\n    # Initiate progress bar\n    t = tqdm(total=len(response), disable=not show_progress)\n\n    for file_name, url in response.items():\n        Prediction._download_prediction_file_to_local(file_name, url, Path(path))\n        t.update()\n\n    t.close()\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_mysql","title":"<code>to_mysql(self, *, host, database, table, port=3306, username=None, password=None)</code>","text":"<p>Push the prediction results to a mysql database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the AIRT_CLIENT_DB_USERNAME and AIRT_CLIENT_DB_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 3306 will be used.</p> <code>3306</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_USERNAME will be used else the default value \"root\" will be used.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_PASSWORD will be used else the default value \"\" will be used.</p> <code>None</code> <p>Returns:</p> Type Description <code>ProgressStatus</code> <p>An instance of <code>ProgressStatus</code> class.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_mysql(\n    self: Prediction,\n    *,\n    host: str,\n    database: str,\n    table: str,\n    port: int = 3306,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n) -&gt; ProgressStatus:\n\"\"\"Push the prediction results to a mysql database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **AIRT_CLIENT_DB_USERNAME** and **AIRT_CLIENT_DB_PASSWORD** environment variables.\n\n    Args:\n        host: Database host name.\n        database: Database name.\n        table: Table name.\n        port: Host port number. If not passed, then the default value **3306** will be used.\n        username: Database username. If not passed, then the value set in the environment variable\n            **AIRT_CLIENT_DB_USERNAME** will be used else the default value \"root\" will be used.\n        password: Database password. If not passed, then the value set in the environment variable\n            **AIRT_CLIENT_DB_PASSWORD** will be used else the default value \"\" will be used.\n\n    Returns:\n        An instance of `ProgressStatus` class.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    username = (\n        username if username is not None else os.environ.get(CLIENT_DB_USERNAME, \"root\")\n    )\n\n    password = (\n        password if password is not None else os.environ.get(CLIENT_DB_PASSWORD, \"\")\n    )\n\n    req_json = dict(\n        host=host,\n        port=port,\n        username=username,\n        password=password,\n        database=database,\n        table=table,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/prediction/{self.uuid}/to_mysql\", json=req_json\n    )\n\n    return ProgressStatus(relative_url=f\"/prediction/push/{response['uuid']}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_pandas","title":"<code>to_pandas(self)</code>","text":"<p>Return the prediction results as a pandas DataFrame</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the results of the prediction.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_pandas(self: Prediction) -&gt; pd.DataFrame:\n\"\"\"Return the prediction results as a pandas DataFrame\n\n    Returns:\n        A pandas DataFrame encapsulating the results of the prediction.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._get_data(relative_url=f\"/prediction/{self.uuid}/pandas\")\n    keys = list(response.keys())\n    keys.remove(\"Score\")\n    index_name = keys[0]\n    return (\n        pd.DataFrame(response)\n        .set_index(index_name)\n        .sort_values(\"Score\", ascending=False)\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.Prediction.to_s3","title":"<code>to_s3(self, uri, access_key=None, secret_key=None)</code>","text":"<p>Push the prediction results to the target AWS S3 bucket.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Target S3 bucket uri.</p> required <code>access_key</code> <code>Optional[str]</code> <p>Access key for the target S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable is used.</p> <code>None</code> <code>secret_key</code> <code>Optional[str]</code> <p>Secret key for the target S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>ProgressStatus</code> <p>An instance of <code>ProgressStatus</code> class.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\nimport tempfile\nfrom datetime import timedelta\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  airt.client import Client, DataBlob, DataSource, Model, Prediction\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Train a model to predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the status in a progress bar\nmodel.progress_bar()\n\n# Run predictions\nprediction = model.predict()\nprediction.progress_bar()\n\n# Print the details of the newly created prediction\nprint(prediction.details())\n\n# Get the list of all prediction instances created by the currently logged-in user\npredx = Prediction.ls()\nprint(predx)\n\n# Display the details of the prediction instances in a pandas dataframe\ndf = Prediction.as_df(predx)\nprint(df)\n\n# Display the prediction results in a pandas DataFrame\nprint(prediction.to_pandas())\n\n# Push the prediction results to an AWS S3 bucket\ns3_status = prediction.to_s3(uri=\"{fill in s3_target_uri}\")\n\n# Push the prediction results to an Azure Blob Storage\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\nazure_credential = azure_storage_keys['key1']\n\nazure_status = prediction.to_azure_blob_storage(\n    uri=\"{fill in azure_target_uri}\",\n    credential=azure_credential\n)\n\n# Push the prediction results to a MySQL database\nmysql_status = prediction.to_mysql(\n    username=\"{fill in mysql_db_username}\",\n    password=\"{fill in mysql_db_password}\",\n    host=\"{fill in mysql_host}\",\n    database=\"{fill in mysql_database}\",\n    table=\"{fill in mysql_table}\",\n)\n\n# Push the prediction results to a ClickHouse database\nclickhouse_status = prediction.to_clickhouse(\n    username=\"{fill in clickhouse_db_username}\",\n    password=\"{fill in clickhouse_db_password}\",\n    host=\"{fill in clickhouse_host}\",\n    database=\"{fill in clickhouse_database}\",\n    table=\"{fill in clickhouse_table}\",\n    protocol=\"native\",\n)\n\n# Download the predictions to a local directory\n# In this example, the prediction results are downloaded\n# to a temporary directory\nwith tempfile.TemporaryDirectory(prefix=\"predictions_results_\") as d:\n    prediction.to_local(path=d)\n    # Check the downloaded prediction files\n    downloaded_files = sorted(list(os.listdir(d)))\n    print(downloaded_files)\n\n\n# Check the status\ns3_status.wait()\nazure_status.progress_bar()\nmysql_status.progress_bar()\nclickhouse_status.progress_bar()\n\n# Delete the prediction\nprediction.delete()\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef to_s3(\n    self: Prediction,\n    uri: str,\n    access_key: Optional[str] = None,\n    secret_key: Optional[str] = None,\n) -&gt; ProgressStatus:\n\"\"\"Push the prediction results to the target AWS S3 bucket.\n\n    Args:\n        uri: Target S3 bucket uri.\n        access_key: Access key for the target S3 bucket. If **None** (default value), then the value\n            from **AWS_ACCESS_KEY_ID** environment variable is used.\n        secret_key: Secret key for the target S3 bucket. If **None** (default value), then the value\n            from **AWS_SECRET_ACCESS_KEY** environment variable is used.\n\n    Returns:\n        An instance of `ProgressStatus` class.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    access_key = (\n        access_key if access_key is not None else os.environ[\"AWS_ACCESS_KEY_ID\"]\n    )\n    secret_key = (\n        secret_key if secret_key is not None else os.environ[\"AWS_SECRET_ACCESS_KEY\"]\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/prediction/{self.uuid}/to_s3\",\n        json=dict(uri=uri, access_key=access_key, secret_key=secret_key),\n    )\n\n    return ProgressStatus(relative_url=f\"/prediction/push/{response['uuid']}\")\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.ProgressStatus","title":"<code> ProgressStatus        </code>","text":"<p>A base class for querying status of a remote operation.</p> <p>Here's an example of using the ProgressStatus class to checking the upload status of the datablob</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Check the ready status of the datablob\nprint(db.is_ready())\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Check the ready status of the datablob\n# If the upload is successful, True will be returned\nprint(db.is_ready())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.ProgressStatus.__init__","title":"<code>__init__(self, relative_url, sleep_for=5, timeout=0)</code>  <code>special</code>","text":"<p>Constructs a new ProgressStatus instance.</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use either progress_bar, is_ready, or wait methods of <code>DataBlob</code>, <code>DataSource</code>, <code>Model</code> or <code>Prediction</code> classes instead.</p> <p>Parameters:</p> Name Type Description Default <code>relative_url</code> <code>str</code> <p>Relative URI to query the status of the remote operation.</p> required <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>5</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>TimeoutError</code> <p>in case of connection timeout.</p> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self, relative_url: str, sleep_for: Union[int, float] = 5, timeout: int = 0\n):\n\"\"\"Constructs a new ProgressStatus instance.\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use either progress_bar,\n        is_ready, or wait methods of `DataBlob`, `DataSource`, `Model` or `Prediction` classes instead.\n\n    Args:\n        relative_url: Relative URI to query the status of the remote operation.\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        TimeoutError: in case of connection timeout.\n    \"\"\"\n    self.relative_url = relative_url\n    self.sleep_for = sleep_for\n    self.timeout = timeout\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.ProgressStatus.is_ready","title":"<code>is_ready(self)</code>","text":"<p>Check if the method's progress is complete.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the progress is completed, else False.</p> <p>Here's an example of checking the upload status of the datablob:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Check the ready status of the datablob\nprint(db.is_ready())\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Check the ready status of the datablob\n# If the upload is successful, True will be returned\nprint(db.is_ready())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>def is_ready(self) -&gt; bool:\n\"\"\"Check if the method's progress is complete.\n\n    Returns:\n        **True** if the progress is completed, else **False**.\n\n    Here's an example of checking the upload status of the datablob:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_s3(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Check the ready status of the datablob\n        print(db.is_ready())\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Check the ready status of the datablob\n        # If the upload is successful, True will be returned\n        print(db.is_ready())\n        ```\n    \"\"\"\n    response = Client._get_data(relative_url=self.relative_url)\n    return response[\"completed_steps\"] == response[\"total_steps\"]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.ProgressStatus.progress_bar","title":"<code>progress_bar(self)</code>","text":"<p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of connection timeout.</p> <p>Here's an example of checking the upload status of the datablob:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Check the ready status of the datablob\nprint(db.is_ready())\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Check the ready status of the datablob\n# If the upload is successful, True will be returned\nprint(db.is_ready())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>def progress_bar(self):\n\"\"\"Blocks the execution and displays a progress bar showing the remote action progress.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of connection timeout.\n\n    Here's an example of checking the upload status of the datablob:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_s3(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Check the ready status of the datablob\n        print(db.is_ready())\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Check the ready status of the datablob\n        # If the upload is successful, True will be returned\n        print(db.is_ready())\n        ```\n    \"\"\"\n    total_steps = Client._get_data(relative_url=self.relative_url)[\"total_steps\"]\n    with tqdm(total=total_steps) as pbar:\n        started_at = datetime.now()\n        while True:\n            if (0 &lt; self.timeout) and (datetime.now() - started_at) &gt; timedelta(\n                seconds=self.timeout\n            ):\n                raise TimeoutError()\n\n            response = Client._get_data(relative_url=self.relative_url)\n            completed_steps = response[\"completed_steps\"]\n\n            pbar.update(completed_steps)\n\n            if completed_steps == total_steps:\n                break\n\n            sleep(self.sleep_for)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.ProgressStatus.wait","title":"<code>wait(self)</code>","text":"<p>Blocks execution while waiting for the remote action to complete.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of timeout.</p> <p>Here's an example of preventing further calls from being executed until the datablob upload is complete:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Further calls to the API will be blocked until the datablob upload is complete.\ndb.wait()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@patch\ndef wait(self: ProgressStatus):\n\"\"\"Blocks execution while waiting for the remote action to complete.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of timeout.\n\n    Here's an example of preventing further calls from being executed until the datablob upload is complete:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_s3(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Further calls to the API will be blocked until the datablob upload is complete.\n        db.wait()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    started_at = datetime.now()\n    while True:\n        if (0 &lt; self.timeout) and (datetime.now() - started_at) &gt; timedelta(\n            seconds=self.timeout\n        ):\n            raise TimeoutError()\n\n        if self.is_ready():\n            return\n\n        sleep(self.sleep_for)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User","title":"<code> User        </code>","text":"<p>A class for creating, managing, and updating users on the server.</p> <p>The User class has two types of methods:</p> <ul> <li>Methods for creating and managing users.</li> <li>Method for updating and adding additional security to user accounts.</li> </ul> <p>Methods such as <code>create</code>, <code>enable</code>, <code>disable</code>, and <code>ls</code> can be used to manage user accounts on the server, but access to them requires super user privileges.</p> <p>The remaining methods do not require super user privileges and are used to update/additionally secure user accounts.</p> <p>In addition to the regular authentication with credentials, the users can enable multi-factor authentication (MFA) and single sign-on (SSO) for their accounts.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ul> <li> <p>To begin, you need to enable MFA for your account by calling the <code>enable_mfa</code> method, which will generate a QR code. You can then scan the QR code with an authenticator app, such as Google Authenticator and follow the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling <code>activate_mfa</code> and passing the dynamically generated six-digit verification code from your smartphone's authenticator app.</p> </li> </ul> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ul> <li> <p>Enable the SSO for a provider by calling the <code>enable_sso</code> method with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the get_token with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the <code>Client.set_sso_token</code> method to generate a new token and use it automatically in all future interactions with the airt server.</p> </li> </ul> <p>Here's an example of using the User class's methods to display the logged-in user's uuid</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the uuid of logged-in user\nuser_details = User.details()\nprint(user_details[\"uuid\"])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.__init__","title":"<code>__init__(self, uuid, username=None, first_name=None, last_name=None, email=None, subscription_type=None, super_user=None, disabled=None, created=None, is_mfa_active=None, phone_number=None, is_phone_number_verified=None)</code>  <code>special</code>","text":"<p>Constructs a new User instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>User uuid.</p> required <code>username</code> <code>Optional[str]</code> <p>The username of the user.</p> <code>None</code> <code>first_name</code> <code>Optional[str]</code> <p>The first name of the user.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>The last name of the user.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>The email address of the user.</p> <code>None</code> <code>subscription_type</code> <code>Optional[str]</code> <p>User subscription type. Currently, the API supports only the following subscription types small, medium and large.</p> <code>None</code> <code>super_user</code> <code>Optional[bool]</code> <p>Flag to indicate the user type.</p> <code>None</code> <code>disabled</code> <code>Optional[str]</code> <p>Flag to indicate the status of the user.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>User creation date.</p> <code>None</code> <code>is_mfa_active</code> <code>Optional[bool]</code> <p>Flag to indicate the user's MFA status.</p> <code>None</code> <code>phone_number</code> <code>Optional[str]</code> <p>The registered phone number of the user. The phone number should follow the pattern of country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</p> <code>None</code> <code>is_phone_number_verified</code> <code>Optional[bool]</code> <p>Flag to indicate the phone number registration status.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    username: Optional[str] = None,\n    first_name: Optional[str] = None,\n    last_name: Optional[str] = None,\n    email: Optional[str] = None,\n    subscription_type: Optional[str] = None,\n    super_user: Optional[bool] = None,\n    disabled: Optional[str] = None,\n    created: Optional[str] = None,\n    is_mfa_active: Optional[bool] = None,\n    phone_number: Optional[str] = None,\n    is_phone_number_verified: Optional[bool] = None,\n):\n\"\"\"Constructs a new User instance.\n\n    Args:\n        uuid: User uuid.\n        username: The username of the user.\n        first_name: The first name of the user.\n        last_name: The last name of the user.\n        email: The email address of the user.\n        subscription_type: User subscription type. Currently, the API supports only the following subscription\n            types **small**, **medium** and **large**.\n        super_user: Flag to indicate the user type.\n        disabled: Flag to indicate the status of the user.\n        created: User creation date.\n        is_mfa_active: Flag to indicate the user's MFA status.\n        phone_number: The registered phone number of the user. The phone number should follow the pattern of country\n            code followed by your phone number. For example, **440123456789, +440123456789, 00440123456789, +44 0123456789,\n            and (+44) 012 345 6789** are all valid formats for registering a UK phone number.\n        is_phone_number_verified: Flag to indicate the phone number registration status.\n    \"\"\"\n\n    self.uuid = uuid\n    self.username = username\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.subscription_type = subscription_type\n    self.super_user = super_user\n    self.disabled = disabled\n    self.created = created\n    self.is_mfa_active = is_mfa_active\n    self.phone_number = phone_number\n    self.is_phone_number_verified = is_phone_number_verified\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.activate_mfa","title":"<code>activate_mfa(otp)</code>  <code>staticmethod</code>","text":"<p>Activate MFA for the user</p> <p>Adding MFA to your account is a two-step process. To begin, you must enable MFA for your account by calling the <code>enable_mfa</code> method, then call the <code>activate_mfa</code> method and pass the current OTP from the authenticator application to verify and activate MFA for your account.</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>int</code> <p>Dynamically generated six-digit verification code from the authenticator app</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the MFA activated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user entered six-digit verification code is invalid</p> <p>Here's an example to enable and activate MFA for the user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Enable MFA for the user\n# The line below will generate a QR code. To finish the setup on your smartphone,\n# scan the QR code with an authenticator app like Google Authenticator and\n# follow the on-device instructions\nUser.enable_mfa()\n\n# After you've completed the setup, enter the current OTP from the authenticator\n# app to verify and enable MFA for your account\nUser.activate_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to True, if the setup is successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef activate_mfa(otp: int) -&gt; pd.DataFrame:\n\"\"\"Activate MFA for the user\n\n    Adding MFA to your account is a two-step process. To begin, you must enable MFA for your account\n    by calling the `enable_mfa` method, then call the `activate_mfa` method and pass the current OTP\n    from the authenticator application to verify and activate MFA for your account.\n\n    Args:\n        otp: Dynamically generated six-digit verification code from the authenticator app\n\n    Returns:\n        A pandas DataFrame encapsulating the MFA activated user details\n\n    Raises:\n        ValueError: If the user entered six-digit verification code is invalid\n\n    Here's an example to enable and activate MFA for the user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Enable MFA for the user\n        # The line below will generate a QR code. To finish the setup on your smartphone,\n        # scan the QR code with an authenticator app like Google Authenticator and\n        # follow the on-device instructions\n        User.enable_mfa()\n\n        # After you've completed the setup, enter the current OTP from the authenticator\n        # app to verify and enable MFA for your account\n        User.activate_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to True, if the setup is successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    response = Client._post_data(\n        relative_url=\"/user/mfa/activate\",\n        json=dict(user_otp=otp),\n    )\n\n    return pd.DataFrame(response, index=[0])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.as_df","title":"<code>as_df(ux)</code>  <code>staticmethod</code>","text":"<p>Return the details of User instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ux</code> <code>List[User]</code> <p>List of user instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the User in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the details of all active users</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate with super user privileges\n# Only super users can get the list of available users\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Display the details of all active users\n# Set the disabled parameter to True to display the details of inactive users\nux = User.ls()\nprint(User.as_df(ux))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(ux: List[\"User\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of User instances as a pandas dataframe.\n\n    Args:\n        ux: List of user instances.\n\n    Returns:\n        Details of all the User in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the details of all active users\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        # Only super users can get the list of available users\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Display the details of all active users\n        # Set the disabled parameter to True to display the details of inactive users\n        ux = User.ls()\n        print(User.as_df(ux))\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ux, User.USER_COLS)  # type: ignore\n    return generate_df(lists, User.USER_COLS)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.create","title":"<code>create(*, username, first_name, last_name, email, password, subscription_type, super_user=False, phone_number=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new user in the server.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The new user's username. The username must be unique or an exception will be thrown.</p> required <code>first_name</code> <code>str</code> <p>The new user's first name.</p> required <code>last_name</code> <code>str</code> <p>The new user's last name.</p> required <code>email</code> <code>str</code> <p>The new user's email. The email must be unique or an exception will be thrown.</p> required <code>password</code> <code>str</code> <p>The new user's password.</p> required <code>subscription_type</code> <code>str</code> <p>User subscription type. Currently, the API supports only the following subscription types small, medium and large.</p> required <code>super_user</code> <code>bool</code> <p>If set to True, then the new user will have super user privilages. If None, then the default value False will be used to create a non-super user.</p> <code>False</code> <code>phone_number</code> <code>Optional[str]</code> <p>Phone number to be added to the user account. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the newly created user.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ValueError</code> <p>If the username or email is already present in the server.</p> <p>Below is an example of creating a new user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Details required to create a new user\nusername = \"{fill in username}\"\nfirst_name = \"{fill in first_name}\"\nlast_name = \"{fill in last_name}\"\nemail = \"{fill in email}\"\npassword = \"{fill in password}\"\nsuper_user = \"{fill in super_user}\"\nsubscription_type = \"{fill in subscription_type}\"\n\n# Create a new user. To access this method, you must have super user privileges.\nnew_user = User.create(\n    username=username,\n    first_name=first_name,\n    last_name=last_name,\n    email=email,\n    password=password,\n    super_user=super_user,\n    subscription_type=subscription_type,\n)\n\n# Display the details of the newly created user\nprint(new_user)\n\n# An exception will be raised if you attempt to create a new user\n# with an already-used username or email address.\ntry:\n    User.create(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        password=password,\n        super_user=super_user,\n        subscription_type=subscription_type,\n    )\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef create(\n    *,\n    username: str,\n    first_name: str,\n    last_name: str,\n    email: str,\n    password: str,\n    subscription_type: str,\n    super_user: bool = False,\n    phone_number: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Create a new user in the server.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        username: The new user's username. The username must be unique or an exception will be thrown.\n        first_name: The new user's first name.\n        last_name: The new user's last name.\n        email: The new user's email. The email must be unique or an exception will be thrown.\n        password: The new user's password.\n        subscription_type: User subscription type. Currently, the API supports only the following subscription\n            types **small**, **medium** and **large**.\n        super_user: If set to **True**, then the new user will have super user privilages.\n            If **None**, then the default value **False** will be used to create a non-super user.\n        phone_number: Phone number to be added to the user account. The phone number should follow the pattern of the country\n            code followed by your phone number. For example, **440123456789, +440123456789, 00440123456789, +44 0123456789,\n            and (+44) 012 345 6789** are all valid formats for registering a UK phone number.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n            A pandas DataFrame encapsulating the details of the newly created user.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the OTP is invalid.\n        ValueError: If the username or email is already present in the server.\n\n    Below is an example of creating a new user\n\n    Example:\n        ```python\n\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Details required to create a new user\n        username = \"{fill in username}\"\n        first_name = \"{fill in first_name}\"\n        last_name = \"{fill in last_name}\"\n        email = \"{fill in email}\"\n        password = \"{fill in password}\"\n        super_user = \"{fill in super_user}\"\n        subscription_type = \"{fill in subscription_type}\"\n\n        # Create a new user. To access this method, you must have super user privileges.\n        new_user = User.create(\n            username=username,\n            first_name=first_name,\n            last_name=last_name,\n            email=email,\n            password=password,\n            super_user=super_user,\n            subscription_type=subscription_type,\n        )\n\n        # Display the details of the newly created user\n        print(new_user)\n\n        # An exception will be raised if you attempt to create a new user\n        # with an already-used username or email address.\n        try:\n            User.create(\n                username=username,\n                first_name=first_name,\n                last_name=last_name,\n                email=email,\n                password=password,\n                super_user=super_user,\n                subscription_type=subscription_type,\n            )\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n\n    if phone_number is not None:\n        phone_number = standardize_phone_number(phone_number)\n\n    req_json = dict(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        subscription_type=subscription_type,\n        super_user=super_user,\n        password=password,\n        phone_number=phone_number,\n        otp=otp,\n    )\n\n    response = Client._post_data(relative_url=f\"/user/\", json=req_json)\n\n    return pd.DataFrame(response, index=[0])[User.USER_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.details","title":"<code>details(user=None)</code>  <code>staticmethod</code>","text":"<p>Get user details</p> <p>Please do not pass the optional user parameter unless you are a super user. Only a super user can view details for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to get details. If not passed, then the currently logged-in details will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the details of the user</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user_uuid/username is invalid or the user have insufficient permission to access other user's data</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the logged-in user's uuid</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the uuid of logged-in user\n# If you are a super user, you can view the details of other users by\n# passing their uuid/username in the user parameter.\nuser_details = User.details()\nprint(user_details[\"uuid\"])\n\n# If a Non-super user tries to access other user's detail,\n# an exception will be thrown.\ntry:\n    User.details(user=\"some_other_username\")\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef details(user: Optional[str] = None) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Get user details\n\n    Please do not pass the optional user parameter unless you are a super user. Only a\n    super user can view details for other users.\n\n    Args:\n        user: Account user_uuid/username to get details. If not passed, then the currently logged-in\n            details will be returned.\n\n    Returns:\n        A dict containing the details of the user\n\n    Raises:\n        ValueError: If the user_uuid/username is invalid or the user have insufficient permission to access other user's data\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the logged-in user's uuid\n\n    Example:\n        ```python\n\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the uuid of logged-in user\n        # If you are a super user, you can view the details of other users by\n        # passing their uuid/username in the user parameter.\n        user_details = User.details()\n        print(user_details[\"uuid\"])\n\n        # If a Non-super user tries to access other user's detail,\n        # an exception will be thrown.\n        try:\n            User.details(user=\"some_other_username\")\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n    relative_url = (\n        f\"/user/details?user_uuid_or_name={user}\"\n        if user is not None\n        else f\"/user/details\"\n    )\n    return Client._get_data(relative_url=relative_url)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.disable","title":"<code>disable(user, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable one or more users.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[str, List[str]]</code> <p>user_uuid/username to disabled. To disable multiple users, please pass the uuids/names as a list.</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the disabled user.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to disable a user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Optional Step: For demonstration purpose, create a new user\nusername = \"{fill in username}\"\nUser.create(\n    username=username,\n    first_name=\"{fill in first_name}\",\n    last_name=\"{fill in last_name}\",\n    email=\"{fill in email}\",\n    password=\"{fill in password}\",\n    subscription_type=\"{fill in subscription_type}\",\n)\n\n# Display the details of the user you want to disable using their username/uuid\nprint(User.details(username))\n\n# Disable the user\n# To disable multiple users, pass a list of username/uuid\nUser.disable(user=username)\n\n# Check whether the user has been disabled\n# The disabled flag should be set to True, if the disable was sucessful\nprint(User.details(username))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef disable(user: Union[str, List[str]], otp: Optional[str] = None) -&gt; pd.DataFrame:\n\"\"\"Disable one or more users.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        user: user_uuid/username to disabled. To disable multiple users, please pass the uuids/names as a list.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the disabled user.\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to disable a user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Optional Step: For demonstration purpose, create a new user\n        username = \"{fill in username}\"\n        User.create(\n            username=username,\n            first_name=\"{fill in first_name}\",\n            last_name=\"{fill in last_name}\",\n            email=\"{fill in email}\",\n            password=\"{fill in password}\",\n            subscription_type=\"{fill in subscription_type}\",\n        )\n\n        # Display the details of the user you want to disable using their username/uuid\n        print(User.details(username))\n\n        # Disable the user\n        # To disable multiple users, pass a list of username/uuid\n        User.disable(user=username)\n\n        # Check whether the user has been disabled\n        # The disabled flag should be set to True, if the disable was sucessful\n        print(User.details(username))\n        ```\n    \"\"\"\n    _users = user if isinstance(user, list) else [user]\n    response_list = []\n    for user in _users:\n        user_uuid = User.details(user=user)[\"uuid\"]\n        url = f\"/user/{user_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return pd.DataFrame(response_list)[User.USER_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.disable_mfa","title":"<code>disable_mfa(user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable MFA for the user</p> <p>We currently support two types of OTPs for disabling multi-factor authentication on your account.</p> <p>If you have access to the authenticator app, enter the app's dynamically generated six-digit verification code(OTP). If you don't have access to the authentication app, you can have an OTP sent to your registered phone number via SMS.</p> <p>To receive OTP via SMS, first call the <code>send_sms_otp</code> method, which will send the OTP to your registered phone number. Once you have the OTP, call the <code>disable_mfa</code> method to deactivate MFA for your account.</p> <p>Currently, we only support the above two methods for disabling MFA. If you do not have access to the authenticator app or your registered phone number, please contact your administrator.</p> <p>Note</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can disable MFA for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable MFA for the currently logged-in user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the MFA disabled user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a non-super user tries to disable MFA for other users</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ValueError</code> <p>If the user_uuid/username is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of disabling MFA for the currently logged in user using the verification code generated by the authentication application. The example assumes that you have already activated the MFA on your account and have access to the authentication application.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Optional Step: Skip this step if you've already logged-in\n# Authenticate. Pass the current OTP from the authenticator app below\notp=\"{fill in otp}\"\nClient.get_token(\n    username=\"{fill in username}\",\n    password=\"{fill in password}\",\n    otp=otp\n)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Disable MFA for the user\nUser.disable_mfa(otp=otp)\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> <p>Here's an example of disabling MFA for the currently logged in user using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Optional Step: Request OTP via SMS to authenticate\n# If you've already logged in, you can skip the two optional steps\n# If you've already have a valid token, skip the below optional step\n# and call Client.set_token instead of Client.get_token\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Optional Step: Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Request OTP via SMS to disable MFA\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"disable_mfa\" # Don't change the message_template_name\n)\n\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\nUser.disable_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef disable_mfa(\n    user: Optional[str] = None, otp: Optional[str] = None\n) -&gt; pd.DataFrame:\n\"\"\"Disable MFA for the user\n\n    We currently support two types of OTPs for disabling multi-factor authentication on your account.\n\n    If you have access to the authenticator app, enter the app's dynamically generated six-digit verification\n    code(OTP). If you don't have access to the authentication app, you can have an OTP sent to your registered\n    phone number via SMS.\n\n    To receive OTP via SMS, first call the `send_sms_otp` method, which will send the OTP to your registered\n    phone number. Once you have the OTP, call the `disable_mfa` method to deactivate MFA for your account.\n\n    Currently, we only support the above two methods for disabling MFA. If you do not have access to the authenticator\n    app or your registered phone number, please contact your administrator.\n\n    !!! note\n\n        Please do not pass the user parameter unless you are a super user. Only\n        a super user can disable MFA for other users.\n\n    Args:\n        user: Account user_uuid/username to disable MFA. If not passed, then the default\n            value **None** will be used to disable MFA for the currently logged-in user.\n        otp: Dynamically generated six-digit verification code from the authenticator app or\n            the OTP you have received via SMS.\n\n    Returns:\n        A pandas DataFrame encapsulating the MFA disabled user details\n\n    Raises:\n        ValueError: If a non-super user tries to disable MFA for other users\n        ValueError: If the OTP is invalid.\n        ValueError: If the user_uuid/username is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of disabling MFA for the currently logged in user using the verification code generated by the authentication application.\n    The example assumes that you have already activated the MFA on your account and have access to the authentication application.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Skip this step if you've already logged-in\n        # Authenticate. Pass the current OTP from the authenticator app below\n        otp=\"{fill in otp}\"\n        Client.get_token(\n            username=\"{fill in username}\",\n            password=\"{fill in password}\",\n            otp=otp\n        )\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Disable MFA for the user\n        User.disable_mfa(otp=otp)\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n\n    Here's an example of disabling MFA for the currently logged in user using the SMS OTP. The example assumes that you have\n    already registered and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Request OTP via SMS to authenticate\n        # If you've already logged in, you can skip the two optional steps\n        # If you've already have a valid token, skip the below optional step\n        # and call Client.set_token instead of Client.get_token\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Optional Step: Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Request OTP via SMS to disable MFA\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"disable_mfa\" # Don't change the message_template_name\n        )\n\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        User.disable_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n\n    user_uuid = User.details(user=user)[\"uuid\"]\n    url = f\"/user/mfa/{user_uuid}/disable\"\n    response = Client._delete_data(\n        relative_url=check_and_append_otp_query_param(url, otp)\n    )\n\n    return pd.DataFrame(response, index=[0])\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.disable_sso","title":"<code>disable_sso(sso_provider, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable Single sign-on (SSO) for the user</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can disable SSO for other users.</p> <p>Parameters:</p> Name Type Description Default <code>sso_provider</code> <code>str</code> <p>The name of the Single sign-on (SSO) provider you want to disable. At present, the API only supports \"google\" and \"github\" as valid SSO identity providers.</p> required <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to disable SSO. If not passed, then the default value None will be used to disable SSO for the currently logged-in user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A pandas DataFrame encapsulating the SSO disabled user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a non-super user tries to disable SSO for other users</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to disable the Single sign-on (SSO)</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Optional Step: For demonstration purpose, enable Single sign-on (SSO)\n# for the user\nsso_provider=\"{fill in sso_provider}\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\nsso_url = Client.get_token(sso_provider=sso_provider) # Authenticate using SSO\nprint(sso_url)\nClient.set_sso_token() # Set SSO token\n\n# Disable the Single sign-on (SSO) for the provider\nprint(User.disable_sso(sso_provider=sso_provider))\n\n# If you try to disable an already disabled SSO provider, an exception\n# will be raised\ntry:\n    User.disable_sso(sso_provider=sso_provider)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef disable_sso(\n    sso_provider: str,\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; str:\n\"\"\"Disable Single sign-on (SSO) for the user\n\n    Please do not pass the user parameter unless you are a super user. Only\n    a super user can disable SSO for other users.\n\n    Args:\n        sso_provider: The name of the Single sign-on (SSO) provider you want to disable.\n            At present, the API only supports **\"google\"** and **\"github\"** as valid SSO identity providers.\n        user: Account user_uuid/username to disable SSO. If not passed, then the default\n            value **None** will be used to disable SSO for the currently logged-in user.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the SSO disabled user details\n\n    Raises:\n        ValueError: If a non-super user tries to disable SSO for other users\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to disable the Single sign-on (SSO)\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Optional Step: For demonstration purpose, enable Single sign-on (SSO)\n        # for the user\n        sso_provider=\"{fill in sso_provider}\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n        sso_url = Client.get_token(sso_provider=sso_provider) # Authenticate using SSO\n        print(sso_url)\n        Client.set_sso_token() # Set SSO token\n\n        # Disable the Single sign-on (SSO) for the provider\n        print(User.disable_sso(sso_provider=sso_provider))\n\n        # If you try to disable an already disabled SSO provider, an exception\n        # will be raised\n        try:\n            User.disable_sso(sso_provider=sso_provider)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n\n    user_uuid = User.details(user=user)[\"uuid\"]\n    url = f\"/user/sso/{user_uuid}/disable/{sso_provider}\"\n    response = Client._delete_data(\n        relative_url=check_and_append_otp_query_param(url, otp)\n    )\n\n    success_msg = f\"Single sign-on (SSO) is successfully disabled for {response['sso_provider']}.\"\n\n    return success_msg\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.enable","title":"<code>enable(user, otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable one or more disabled users.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[str, List[str]]</code> <p>user_uuid/username to enable. To enable multiple users, please pass the uuids/names as a list.</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the enabled user.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to enable a user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Optional Step: For demonstration purpose, create a new user and disable them\nusername = \"{fill in username}\"\nUser.create(\n    username=username,\n    first_name=\"{fill in first_name}\",\n    last_name=\"{fill in last_name}\",\n    email=\"{fill in email}\",\n    password=\"{fill in password}\",\n    subscription_type=\"{fill in subscription_type}\",\n)\nUser.disable(user=username)\n\n# Display the details of the user you want to enable using their username/uuid\nprint(User.details(username))\n\n# Enable the user\n# To enable multiple users, pass a list of username/uuid\nUser.enable(user=username)\n\n# Check whether the user has been enabled\n# The disabled flag should be set to False, if the enable was sucessful\nprint(User.details(username))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef enable(user: Union[str, List[str]], otp: Optional[str] = None) -&gt; pd.DataFrame:\n\"\"\"Enable one or more disabled users.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        user: user_uuid/username to enable. To enable multiple users, please pass the uuids/names as a list.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the enabled user.\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to enable a user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Optional Step: For demonstration purpose, create a new user and disable them\n        username = \"{fill in username}\"\n        User.create(\n            username=username,\n            first_name=\"{fill in first_name}\",\n            last_name=\"{fill in last_name}\",\n            email=\"{fill in email}\",\n            password=\"{fill in password}\",\n            subscription_type=\"{fill in subscription_type}\",\n        )\n        User.disable(user=username)\n\n        # Display the details of the user you want to enable using their username/uuid\n        print(User.details(username))\n\n        # Enable the user\n        # To enable multiple users, pass a list of username/uuid\n        User.enable(user=username)\n\n        # Check whether the user has been enabled\n        # The disabled flag should be set to False, if the enable was sucessful\n        print(User.details(username))\n\n        ```\n    \"\"\"\n\n    _users = user if isinstance(user, list) else [user]\n    response_list = []\n    for user in _users:\n        user_uuid = User.details(user=user)[\"uuid\"]\n        url = f\"/user/{user_uuid}/enable\"\n        response = Client._get_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return pd.DataFrame(response_list)[User.USER_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.enable_mfa","title":"<code>enable_mfa(otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable MFA for the user</p> <p>This method will generate a QR code. To finish the setup on your smartphone, scan the QR code with an authenticator app such as Google Authenticator and follow the on-device instructions. After you've completed the setup, call the <code>activate_mfa</code> method and pass the current OTP from the authenticator application to verify and enable MFA for your account</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>PilImage</code> <p>The generated QR code</p> <p>Here's an example to enable and activate MFA for the user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Enable MFA for the user\n# The line below will generate a QR code. To finish the setup on your smartphone,\n# scan the QR code with an authenticator app like Google Authenticator and\n# follow the on-device instructions\nUser.enable_mfa()\n\n# After you've completed the setup, enter the current OTP from the authenticator\n# app to verify and enable MFA for your account\nUser.activate_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to True, if the setup is successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef enable_mfa(otp: Optional[str] = None) -&gt; PilImage:\n\"\"\"Enable MFA for the user\n\n    This method will generate a QR code. To finish the setup on your smartphone, scan the\n    QR code with an authenticator app such as Google Authenticator and follow the on-device\n    instructions. After you've completed the setup, call the `activate_mfa` method and pass the\n    current OTP from the authenticator application to verify and enable MFA for your account\n\n    Args:\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        The generated QR code\n\n    Here's an example to enable and activate MFA for the user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Enable MFA for the user\n        # The line below will generate a QR code. To finish the setup on your smartphone,\n        # scan the QR code with an authenticator app like Google Authenticator and\n        # follow the on-device instructions\n        User.enable_mfa()\n\n        # After you've completed the setup, enter the current OTP from the authenticator\n        # app to verify and enable MFA for your account\n        User.activate_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to True, if the setup is successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    qr_code = qrcode.make(User._get_mfa_provision_url(otp))\n\n    return qr_code\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.enable_sso","title":"<code>enable_sso(sso_provider, sso_email, otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable Single sign-on (SSO) for the user</p> <p>Parameters:</p> Name Type Description Default <code>sso_provider</code> <code>str</code> <p>Name of the Single sign-on (SSO) identity provider. At present, the API only supports \"google\" and \"github\" as valid SSO identity providers.</p> required <code>sso_email</code> <code>str</code> <p>Email id to be used for SSO authentication</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A pandas DataFrame encapsulating the user details</p> <p>Here's an example of authenticating with Single sign-on (SSO) using google and setting the newly generated token to interact with the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Enable single sign-on (SSO) and use google as the provider\nsso_provider=\"google\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n# Authenticate using Single sign-on (SSO)\n# To generate a token using SSO, you must first authenticate with the provider.\n# The command below will generate an authorization URL for you.\n# Please copy and paste it into your preferred browser and complete the\n# SSO provider authentication within 10 minutes. Otherwise, the SSO login\n# will time out and you will need to call the get_token method again.\nsso_url = Client.get_token(sso_provider=sso_provider)\nprint(sso_url)\n\n# Once the provider authentication is successful, call the below method to\n# set the generated token\nClient.set_sso_token()\n\n# If set_sso_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef enable_sso(sso_provider: str, sso_email: str, otp: Optional[str] = None) -&gt; str:\n\"\"\"Enable Single sign-on (SSO) for the user\n\n    Args:\n        sso_provider: Name of the Single sign-on (SSO) identity provider.\n            At present, the API only supports **\"google\"** and **\"github\"** as valid SSO identity providers.\n        sso_email: Email id to be used for SSO authentication\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the user details\n\n    Here's an example of authenticating with Single sign-on (SSO) using google and\n    setting the newly generated token to interact with the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Enable single sign-on (SSO) and use google as the provider\n        sso_provider=\"google\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n        # Authenticate using Single sign-on (SSO)\n        # To generate a token using SSO, you must first authenticate with the provider.\n        # The command below will generate an authorization URL for you.\n        # Please copy and paste it into your preferred browser and complete the\n        # SSO provider authentication within 10 minutes. Otherwise, the SSO login\n        # will time out and you will need to call the get_token method again.\n        sso_url = Client.get_token(sso_provider=sso_provider)\n        print(sso_url)\n\n        # Once the provider authentication is successful, call the below method to\n        # set the generated token\n        Client.set_sso_token()\n\n        # If set_sso_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=otp),\n    )\n    success_msg = f\"Single sign-on (SSO) is successfully enabled for {sso_provider}. Please use {response['sso_email']} as the email address while authenticating with {sso_provider}.\"\n\n    return success_msg\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.ls","title":"<code>ls(offset=0, limit=100, disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of User instances available in the server.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of users to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of users to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted users will be returned. Else, the default value False will be used to return only the list of active users.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[User]</code> <p>A list of User instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the details of all active users</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Display the details of all active users\n# Set the disabled parameter to True to display the details of inactive users\nux = User.ls()\nprint(User.as_df(ux))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n) -&gt; List[\"User\"]:\n\"\"\"Return the list of User instances available in the server.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        offset: The number of users to offset at the beginning. If **None**, then the default value **0** will be used.\n        limit: The maximum number of users to return from the server. If None, then the default value 100 will be used.\n        disabled: If set to **True**, then only the deleted users will be returned. Else, the default value **False** will\n            be used to return only the list of active users.\n\n    Returns:\n        A list of User instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the details of all active users\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Display the details of all active users\n        # Set the disabled parameter to True to display the details of inactive users\n        ux = User.ls()\n        print(User.as_df(ux))\n        ```\n    \"\"\"\n    users = Client._get_data(\n        relative_url=f\"/user/?disabled={disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ux = [\n        User(\n            uuid=user[\"uuid\"],\n            username=user[\"username\"],\n            first_name=user[\"first_name\"],\n            last_name=user[\"last_name\"],\n            email=user[\"email\"],\n            subscription_type=user[\"subscription_type\"],\n            super_user=user[\"super_user\"],\n            disabled=user[\"disabled\"],\n            created=user[\"created\"],\n            is_mfa_active=user[\"is_mfa_active\"],\n            phone_number=user[\"phone_number\"],\n            is_phone_number_verified=user[\"is_phone_number_verified\"],\n        )\n        for user in users\n    ]\n\n    return ux\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.register_phone_number","title":"<code>register_phone_number(phone_number=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Register a phone number</p> <p>Registering your phone number will help you to regain access in case you forget your password and cannot access your account. To receive the OTP via SMS, you need to register and validate your phone number. Calling this method will send an OTP via SMS to the phone number and you need to call the <code>validate_phone_number</code> method with the OTP you have received to complete the registration and validation process.</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>Optional[str]</code> <p>Phone number to register. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to the phone number that was already registered to the user's account.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the updated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of registering and validating a new phone number for the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the phone number that is currently registered\n# If no phone number has been registered, None will be displayed\nprint(User.details()[\"phone_number\"])\n\n# Register a new phone number.\n# If you only want to validate an existing phone number, call the\n# method below without the phone_number parameter\nUser.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n# The above method will send the OTP via SMS to the specified phone number,\n# which you must enter below to complete the registration process\nUser.validate_phone_number(otp=\"{fill in otp}\")\n\n# Check whether the phone number has been updated and verified\n# The is_phone_number_verified flag should be set to True, if the\n# registration is successful\nuser_details = User.details()\nprint(user_details[\"phone_number\"])\nprint(user_details[\"is_phone_number_verified\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef register_phone_number(\n    phone_number: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Register a phone number\n\n    Registering your phone number will help you to regain access in case you forget your password and cannot access\n    your account. To receive the OTP via SMS, you need to register and validate your phone number. Calling this\n    method will send an OTP via SMS to the phone number and you need to call the `validate_phone_number` method\n    with the OTP you have received to complete the registration and validation process.\n\n    Args:\n        phone_number: Phone number to register. The phone number should follow the pattern of the country\n            code followed by your phone number. For example, **440123456789, +440123456789,\n            00440123456789, +44 0123456789, and (+44) 012 345 6789** are all valid formats for registering a\n            UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to\n            the phone number that was already registered to the user's account.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A dict containing the updated user details\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of registering and validating a new phone number for the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the phone number that is currently registered\n        # If no phone number has been registered, None will be displayed\n        print(User.details()[\"phone_number\"])\n\n        # Register a new phone number.\n        # If you only want to validate an existing phone number, call the\n        # method below without the phone_number parameter\n        User.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n        # The above method will send the OTP via SMS to the specified phone number,\n        # which you must enter below to complete the registration process\n        User.validate_phone_number(otp=\"{fill in otp}\")\n\n        # Check whether the phone number has been updated and verified\n        # The is_phone_number_verified flag should be set to True, if the\n        # registration is successful\n        user_details = User.details()\n        print(user_details[\"phone_number\"])\n        print(user_details[\"is_phone_number_verified\"])\n        ```\n    \"\"\"\n    if phone_number is not None:\n        phone_number = standardize_phone_number(phone_number)\n\n    req_json = dict(phone_number=phone_number, otp=otp)\n    return Client._post_data(\n        relative_url=\"/user/register_phone_number\", json=req_json\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.reset_password","title":"<code>reset_password(username, new_password, otp)</code>  <code>staticmethod</code>","text":"<p>Resets the password of an account either using a TOTP or SMS OTP.</p> <p>We currently support two types of OTPs to reset the password for your account and you don't have to be logged in to call this method</p> <p>If you have already activated the MFA for your account, then you can either pass the dynamically generated six-digit verification code from the authenticator app (TOTP) or you can also request an OTP via SMS to your registered phone number.</p> <p>If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.</p> <p>To get OTP by SMS, you must first call <code>send_sms_otp</code> method which will send the OTP to your registered phone number. Once you have the OTP with you, then call this method with the OTP to reset your password.</p> <p>Currently, we only support the above two methods for resetting the password. In case, you don't have MFA enabled or don't have access to your registered phone number, please contact your administrator.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Account username to reset the password</p> required <code>new_password</code> <code>str</code> <p>New password to set for the account</p> required <code>otp</code> <code>str</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The password reset status message</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the username or OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example for resetting the password using the verification code generated by the authentication application. The example assumes that you have already activated the MFA on your account and have access to the authentication application.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Details required to reset the password\nusername = \"{fill in username}\"\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP generated by the authenticator app\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\nClient.get_token(username=username, password=new_password, otp=otp)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> <p>Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Request OTP via SMS to the registered phone number\n# Please do not change the message_template_name\nusername=\"{fill in username}\"\nUser.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n# The above method will send the OTP via SMS to the registered phone number,\n# which you must fill below along with your new password\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP received via SMS\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\n# MFA users must pass the otp generated by the authenticator app below\nClient.get_token(username=username, password=new_password)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef reset_password(username: str, new_password: str, otp: str) -&gt; str:\n\"\"\"Resets the password of an account either using a TOTP or SMS OTP.\n\n    We currently support two types of OTPs to reset the password for your account and you don't have to be logged\n    in to call this method\n\n    If you have already activated the MFA for your account, then you can either pass the dynamically generated\n    six-digit verification code from the authenticator app (TOTP) or you can also request an OTP via SMS to your registered phone number.\n\n    If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.\n\n    To get OTP by SMS, you must first call `send_sms_otp` method which will send the OTP to your registered\n    phone number. Once you have the OTP with you, then call this method with the OTP to reset your password.\n\n    Currently, we only support the above two methods for resetting the password. In case, you don't have MFA enabled or don't\n    have access to your registered phone number, please contact your administrator.\n\n    Args:\n        username: Account username to reset the password\n        new_password: New password to set for the account\n        otp: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received\n            via SMS.\n\n    Returns:\n        The password reset status message\n\n    Raises:\n        ValueError: If the username or OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example for resetting the password using the verification code generated by the authentication application.\n    The example assumes that you have already activated the MFA on your account and have access to the authentication application.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Details required to reset the password\n        username = \"{fill in username}\"\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP generated by the authenticator app\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        Client.get_token(username=username, password=new_password, otp=otp)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n\n    Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered\n    and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to the registered phone number\n        # Please do not change the message_template_name\n        username=\"{fill in username}\"\n        User.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n        # The above method will send the OTP via SMS to the registered phone number,\n        # which you must fill below along with your new password\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP received via SMS\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        # MFA users must pass the otp generated by the authenticator app below\n        Client.get_token(username=username, password=new_password)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n    \"\"\"\n    req_json = dict(username=username, new_password=new_password, otp=otp)\n    return Client._post_data(relative_url=\"/user/reset_password\", json=req_json)  # type: ignore\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.send_sms_otp","title":"<code>send_sms_otp(username, message_template_name)</code>  <code>staticmethod</code>","text":"<p>Send OTP via SMS to the user's registered phone number</p> <p>This method does not require a login, and you should only use it to reset your password, disable MFA, or generate a new token using SMS OTP.</p> <p>Calling this method will only send an OTP to your registered phone number via SMS. Following this method call, you should explicitly call <code>reset_password</code>, <code>disable_mfa</code>, or <code>Client.get_token</code> to complete the operation with the SMS OTP.</p> <p>Please remember to pass a valid message_template_name along with the request. At present, the API supports \"reset_password\", \"disable_mfa\" and \"get_token\" as valid message templates.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Account username to send the OTP</p> required <code>message_template_name</code> <code>str</code> <p>The message template to use while sending the OTP via SMS. At present, the API supports \"reset_password\", \"disable_mfa\" and \"get_token\" as valid message templates</p> required <p>Returns:</p> Type Description <code>str</code> <p>The SMS status message</p> <p>Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Request OTP via SMS to the registered phone number\n# Please do not change the message_template_name\nusername=\"{fill in username}\"\nUser.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n# The above method will send the OTP via SMS to the registered phone number,\n# which you must fill below along with your new password\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP received via SMS\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\n# MFA users must pass the otp generated by the authenticator app below\nClient.get_token(username=username, password=new_password)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> <p>Here's an example of how to disable MFA with SMS OTP, assuming you've already registered and validated your phone number on our servers but don't have a valid token.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Optional Step: Request OTP via SMS to authenticate\n# If you've already logged in, you can skip the two optional steps\n# If you've already have a valid token, skip the below optional step\n# and call Client.set_token instead of Client.get_token\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Optional Step: Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Request OTP via SMS to disable MFA\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"disable_mfa\" # Don't change the message_template_name\n)\n\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\nUser.disable_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef send_sms_otp(username: str, message_template_name: str) -&gt; str:\n\"\"\"Send OTP via SMS to the user's registered phone number\n\n    This method does not require a login, and you should only use it to reset your password,\n    disable MFA, or generate a new token using SMS OTP.\n\n    Calling this method will only send an OTP to your registered phone number via SMS. Following this method\n    call, you should explicitly call `reset_password`, `disable_mfa`, or `Client.get_token` to complete\n    the operation with the SMS OTP.\n\n    Please remember to pass a valid message_template_name along with the request. At present, the API\n    supports **\"reset_password\"**, **\"disable_mfa\"** and **\"get_token\"** as valid message templates.\n\n    Args:\n        username: Account username to send the OTP\n        message_template_name: The message template to use while sending the OTP via SMS. At present,\n            the API supports **\"reset_password\"**, **\"disable_mfa\"** and **\"get_token\"** as valid message templates\n\n    Returns:\n        The SMS status message\n\n    Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have\n    already registered and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to the registered phone number\n        # Please do not change the message_template_name\n        username=\"{fill in username}\"\n        User.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n        # The above method will send the OTP via SMS to the registered phone number,\n        # which you must fill below along with your new password\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP received via SMS\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        # MFA users must pass the otp generated by the authenticator app below\n        Client.get_token(username=username, password=new_password)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n\n    Here's an example of how to disable MFA with SMS OTP, assuming you've already registered\n    and validated your phone number on our servers but don't have a valid token.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Request OTP via SMS to authenticate\n        # If you've already logged in, you can skip the two optional steps\n        # If you've already have a valid token, skip the below optional step\n        # and call Client.set_token instead of Client.get_token\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Optional Step: Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Request OTP via SMS to disable MFA\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"disable_mfa\" # Don't change the message_template_name\n        )\n\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        User.disable_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    url = f\"/user/send_sms_otp?username={username}&amp;message_template_name={message_template_name}\"\n\n    return Client._get_data(relative_url=url)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.update","title":"<code>update(user=None, username=None, first_name=None, last_name=None, email=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Update existing user details in the server.</p> <p>Please do not pass the optional user parameter unless you are a super user. Only a  super user can update details for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to update. If not passed, then the default value None will be used to update the currently logged-in user details.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>New username for the user.</p> <code>None</code> <code>first_name</code> <code>Optional[str]</code> <p>New first name for the user.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>New last name for the user.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>New email for the user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the updated user details.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user_uuid/username is invalid or the user have insufficient permission to access other user's data</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of updating the email address of the logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the registered email address of the logged-in user\nprint(User.details()[\"email\"])\n\n# Update the logged-in user's email address\n# If you are a super user, you can update the details of other users by\n# passing their uuid/username in the user parameter\nemail = \"{fill in new_email}\"\nUser.update(email=email)\n\n# Check whether the email address has been updated for the logged-in user\nprint(User.details()[\"email\"])\n\n# If you try to use an already used email address, an exception will be raised.\ntry:\n    User.update(email=email)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef update(\n    user: Optional[str] = None,\n    username: Optional[str] = None,\n    first_name: Optional[str] = None,\n    last_name: Optional[str] = None,\n    email: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Update existing user details in the server.\n\n     Please do not pass the optional user parameter unless you are a super user. Only a\n     super user can update details for other users.\n\n    Args:\n        user: Account user_uuid/username to update. If not passed, then the default\n            value **None** will be used to update the currently logged-in user details.\n        username: New username for the user.\n        first_name: New first name for the user.\n        last_name: New last name for the user.\n        email: New email for the user.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the updated user details.\n\n    Raises:\n        ValueError: If the user_uuid/username is invalid or the user have insufficient permission to access other user's data\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of updating the email address of the logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the registered email address of the logged-in user\n        print(User.details()[\"email\"])\n\n        # Update the logged-in user's email address\n        # If you are a super user, you can update the details of other users by\n        # passing their uuid/username in the user parameter\n        email = \"{fill in new_email}\"\n        User.update(email=email)\n\n        # Check whether the email address has been updated for the logged-in user\n        print(User.details()[\"email\"])\n\n        # If you try to use an already used email address, an exception will be raised.\n        try:\n            User.update(email=email)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    req_json = dict(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        otp=otp,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/user/{user_uuid}/update\", json=req_json\n    )\n\n    return pd.DataFrame(response, index=[0])[User.USER_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.User.validate_phone_number","title":"<code>validate_phone_number(otp=None)</code>  <code>staticmethod</code>","text":"<p>Validate a registered phone number</p> <p>Please call the <code>register_phone_number</code> method to get the OTP via SMS and then call this method with the OTP to complete the registration and validation process.</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>Optional[str]</code> <p>The OTP you have received on your registered phone number.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the updated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of registering and validating a new phone number for the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the phone number that is currently registered\n# If no phone number has been registered, None will be displayed\nprint(User.details()[\"phone_number\"])\n\n# Register a new phone number.\n# If you only want to validate an existing phone number, call the\n# method below without the phone_number parameter\nUser.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n# The above method will send the OTP via SMS to the specified phone number,\n# which you must enter below to complete the registration process\nUser.validate_phone_number(otp=\"{fill in otp}\")\n\n# Check whether the phone number has been updated and verified\n# The is_phone_number_verified flag should be set to True, if the\n# registration is successful\nuser_details = User.details()\nprint(user_details[\"phone_number\"])\nprint(user_details[\"is_phone_number_verified\"])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef validate_phone_number(\n    otp: Optional[str] = None,\n) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Validate a registered phone number\n\n    Please call the `register_phone_number` method to get the OTP via SMS and then call this method\n    with the OTP to complete the registration and validation process.\n\n    Args:\n        otp: The OTP you have received on your registered phone number.\n\n    Returns:\n        A dict containing the updated user details\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of registering and validating a new phone number for the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the phone number that is currently registered\n        # If no phone number has been registered, None will be displayed\n        print(User.details()[\"phone_number\"])\n\n        # Register a new phone number.\n        # If you only want to validate an existing phone number, call the\n        # method below without the phone_number parameter\n        User.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n        # The above method will send the OTP via SMS to the specified phone number,\n        # which you must enter below to complete the registration process\n        User.validate_phone_number(otp=\"{fill in otp}\")\n\n        # Check whether the phone number has been updated and verified\n        # The is_phone_number_verified flag should be set to True, if the\n        # registration is successful\n        user_details = User.details()\n        print(user_details[\"phone_number\"])\n        print(user_details[\"is_phone_number_verified\"])\n        ```\n    \"\"\"\n    url = \"/user/validate_phone_number\"\n\n    return Client._get_data(relative_url=check_and_append_otp_query_param(url, otp))\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls","title":"<code> cls        </code>","text":"<p>A class for managing the APIKeys in the server.</p> <p>Both the APIKey and the token can be used for accessing the airt services. However, there is a slight difference in generating and managing the two.</p> <p>For generating the APIKey, you first need to get the developer token. Please refer to <code>Client.get_token</code> method documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new APIKeys and can set an expiration date individually. You can also access other methods available in the APIKey class to list, revoke the APIKey at any time.</p> <p>Here's an example of how to use the APIKey class to create a new key and use it to access the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a new key with the given name\nkey_name = \"{fill in key_name}\"\nnew_key = APIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# Call the set_token method to set the newly generated key\nClient.set_token(token=new_key[\"access_token\"])\n\n# Print the logged-in user details\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.__init__","title":"<code>__init__(self, uuid, name=None, expiry=None, disabled=None, created=None)</code>  <code>special</code>","text":"<p>Constructs a new APIKey instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>APIKey uuid.</p> required <code>name</code> <code>Optional[str]</code> <p>APIKey name.</p> <code>None</code> <code>expiry</code> <code>Optional[str]</code> <p>APIKey expiry date.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Flag to indicate the status of the APIKey.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>APIKey creation date.</p> <code>None</code> Source code in <code>airt/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    name: Optional[str] = None,\n    expiry: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n):\n\"\"\"Constructs a new APIKey instance.\n\n    Args:\n        uuid: APIKey uuid.\n        name: APIKey name.\n        expiry: APIKey expiry date.\n        disabled: Flag to indicate the status of the APIKey.\n        created: APIKey creation date.\n    \"\"\"\n    self.uuid = uuid\n    self.name = name\n    self.expiry = expiry\n    self.disabled = disabled\n    self.created = created\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.as_df","title":"<code>as_df(ax)</code>  <code>staticmethod</code>","text":"<p>Return the details of APIKey instances in a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>List[APIKey]</code> <p>List of APIKey instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the APIKeys in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user in a dataframe</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display all the APIKey instance details in a pandas dataframe\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef as_df(ax: List[\"APIKey\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of APIKey instances in a pandas dataframe.\n\n    Args:\n        ax: List of APIKey instances.\n\n    Returns:\n        Details of all the APIKeys in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the APIKeys generated by the currently logged-in user in a dataframe\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display all the APIKey instance details in a pandas dataframe\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ax, APIKey.API_KEY_COLS)  # type: ignore\n    return generate_df(lists, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.create","title":"<code>create(name, expiry=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new APIKey</p> <p>In order to access the airt service with the newly generated APIKey, please call the <code>Client.set_token</code> method or set the APIKey value in the AIRT_SERVICE_TOKEN environment variable.</p> <p>Note</p> <ul> <li> <p>The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key. However, you can create a new key with the name of a revoked key.</p> </li> <li> <p>The expiry for an APIKey is optional, if not passed then the default value None will be used to create an APIKey with no expiry date!</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the APIKey.</p> required <code>expiry</code> <code>Union[int, datetime.timedelta, datetime.datetime]</code> <p>The validity for the APIKey. This can be an integer representing the number of days till expiry, can be an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value None will be used to create a APIKey that will never expire!</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The APIKey and its type as a dictionary.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user is not authenticated.</p> <code>ValueError</code> <p>If the user tries to create a new APIKey with an existing key name.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key with the given name and set the expiry to 10 days from now.\n# If the expiry parameter is not specified, a key with no expiry date is created.\nkey_name = \"{fill in key_name}\"\nnew_key_details = APIKey.create(name=key_name, expiry=10)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# If a new key with the same name is created, an exception will be raised.\n# However, you can create a new key with the name of a revoked key.\ntry:\n    APIKey.create(name=key_name, expiry=10)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n\n# Finally, either call the below method to set the newly generated key\n# or store it in the AIRT_SERVICE_TOKEN environment variable.\nClient.set_token(token=new_key_details[\"access_token\"])\n\n# If set_token fails, the line below will throw an error.\nprint(APIKey.details(apikey=key_name))\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef create(\n    name: str,\n    expiry: Optional[Union[int, timedelta, datetime]] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, str]:\n\"\"\"Create a new APIKey\n\n    In order to access the airt service with the newly generated APIKey, please call the `Client.set_token` method\n    or set the APIKey value in the **AIRT_SERVICE_TOKEN** environment variable.\n\n    !!! note\n\n        - The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key.\n        However, you can create a new key with the name of a revoked key.\n\n        - The expiry for an APIKey is optional, if not passed then the default value **None** will be used to create an APIKey with no expiry date!\n\n    Args:\n        name: The name of the APIKey.\n        expiry: The validity for the APIKey. This can be an integer representing the number of days till expiry, can be\n            an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value\n            **None** will be used to create a APIKey that will never expire!\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n        The APIKey and its type as a dictionary.\n\n    Raises:\n        ValueError: If the user is not authenticated.\n        ValueError: If the user tries to create a new APIKey with an existing key name.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key with the given name and set the expiry to 10 days from now.\n        # If the expiry parameter is not specified, a key with no expiry date is created.\n        key_name = \"{fill in key_name}\"\n        new_key_details = APIKey.create(name=key_name, expiry=10)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # If a new key with the same name is created, an exception will be raised.\n        # However, you can create a new key with the name of a revoked key.\n        try:\n            APIKey.create(name=key_name, expiry=10)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n\n        # Finally, either call the below method to set the newly generated key\n        # or store it in the AIRT_SERVICE_TOKEN environment variable.\n        Client.set_token(token=new_key_details[\"access_token\"])\n\n        # If set_token fails, the line below will throw an error.\n        print(APIKey.details(apikey=key_name))\n        ```\n    \"\"\"\n    if expiry is None:\n        expiry_date = expiry\n    else:\n        if isinstance(expiry, int):\n            delta = datetime.now() + timedelta(days=expiry)\n        elif isinstance(expiry, timedelta):\n            delta = datetime.now() + expiry\n        else:\n            delta = expiry\n\n        expiry_date = delta.strftime(\"%Y-%m-%dT%H:%M\")\n\n    return Client._post_data(\n        relative_url=\"/apikey\",\n        json=dict(name=name, expiry=expiry_date, otp=otp),\n    )\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.details","title":"<code>details(apikey)</code>  <code>staticmethod</code>","text":"<p>Return details of an APIKey.</p> <p>Parameters:</p> Name Type Description Default <code>apikey</code> <code>str</code> <p>APIKey uuid/name.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the APIKey.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get details of an APIKey</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# To display the details of all keys created by the user, use the method below.\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef details(apikey: str) -&gt; pd.DataFrame:\n\"\"\"Return details of an APIKey.\n\n    Args:\n        apikey: APIKey uuid/name.\n\n    Returns:\n        A pandas Dataframe encapsulating the details of the APIKey.\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get details of an APIKey\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # To display the details of all keys created by the user, use the method below.\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    details = Client._get_data(relative_url=f\"/apikey/{apikey}\")\n\n    return pd.DataFrame(details, index=[0])[APIKey.API_KEY_COLS]\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.ls","title":"<code>ls(user=None, offset=0, limit=100, include_disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of APIKeys instances.</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can view the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid. If not passed, then the currently logged-in user_uuid will be used.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>include_disabled</code> <code>bool</code> <p>If set to True, then the disabled APIKeys will also be included in the result.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[APIKey]</code> <p>A list of APIKey instances.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Get the list of all APIKey instances created by the currently logged-in user.\n# If you are a super user, you can view the APIkeys created by other users by\n# passing their uuid/username in the user parameter.\nax = APIKey.ls()\nprint(ax)\n\n# Display the details of the instances in a pandas dataframe\ndf = APIKey.as_df(ax)\nprint(df)\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef ls(\n    user: Optional[str] = None,\n    offset: int = 0,\n    limit: int = 100,\n    include_disabled: bool = False,\n) -&gt; List[\"APIKey\"]:\n\"\"\"Return the list of APIKeys instances.\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can view\n    the APIKeys created by other users.\n\n    Args:\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid.\n            If not passed, then the currently logged-in user_uuid will be used.\n        offset: The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.\n        limit: The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.\n        include_disabled: If set to **True**, then the disabled APIKeys will also be included in the result.\n\n    Returns:\n        A list of APIKey instances.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the user_uuid is invalid.\n\n    An example of displaying the APIKeys generated by the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Get the list of all APIKey instances created by the currently logged-in user.\n        # If you are a super user, you can view the APIkeys created by other users by\n        # passing their uuid/username in the user parameter.\n        ax = APIKey.ls()\n        print(ax)\n\n        # Display the details of the instances in a pandas dataframe\n        df = APIKey.as_df(ax)\n        print(df)\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n\n    apikeys = Client._get_data(\n        relative_url=f\"/{user_uuid}/apikey?include_disabled={include_disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ax = [\n        APIKey(\n            uuid=apikey[\"uuid\"],\n            name=apikey[\"name\"],\n            expiry=apikey[\"expiry\"],\n            disabled=apikey[\"disabled\"],\n            created=apikey[\"created\"],\n        )\n        for apikey in apikeys\n    ]\n\n    return ax\n</code></pre>"},{"location":"airt_api_docs/airt/client/#airt.client.cls.revoke","title":"<code>revoke(keys, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Revoke one or more APIKeys</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can revoke the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>Union[str, List[str], List[APIKey]]</code> <p>APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.</p> required <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid/username. If not passed, then the currently logged-in user will be used.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the deleted APIKey(s).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to revoke a single APIKey by name</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Check that the newly created key exists\nprint([key.name for key in APIKey.ls()])\n\n# Revoke the newly created key\n# To delete multiple keys, pass a list of key names or key instances\nAPIKey.revoke(keys=key_name)\n\n# Check that the newly created key does not exists\nprint([key.name for key in APIKey.ls()])\n</code></pre> <p>Here's an example of a super user revoking all APIkeys generated by a specific user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  airt.client import Client, APIKey\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# List the APIKeys generated by a specific user\nuser = \"{fill in other_username}\"\nax = APIKey.ls(user=user)\nprint([key.name for key in ax])\n\n# Revoke the APIKeys\nAPIKey.revoke(keys=ax, user=user)\n\n# Check that all APIkeys have been revoked\nprint([key.name for key in APIKey.ls(user=user)])\n</code></pre> Source code in <code>airt/client.py</code> <pre><code>@staticmethod\ndef revoke(\n    keys: Union[str, List[str], List[\"APIKey\"]],\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Revoke one or more APIKeys\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can revoke the\n    APIKeys created by other users.\n\n    Args:\n        keys: APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid/username.\n            If not passed, then the currently logged-in user will be used.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n         A pandas Dataframe encapsulating the details of the deleted APIKey(s).\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ValueError: If the user_uuid is invalid.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to revoke a single APIKey by name\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Check that the newly created key exists\n        print([key.name for key in APIKey.ls()])\n\n        # Revoke the newly created key\n        # To delete multiple keys, pass a list of key names or key instances\n        APIKey.revoke(keys=key_name)\n\n        # Check that the newly created key does not exists\n        print([key.name for key in APIKey.ls()])\n        ```\n\n    Here's an example of a super user revoking all APIkeys generated by a specific user.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # List the APIKeys generated by a specific user\n        user = \"{fill in other_username}\"\n        ax = APIKey.ls(user=user)\n        print([key.name for key in ax])\n\n        # Revoke the APIKeys\n        APIKey.revoke(keys=ax, user=user)\n\n        # Check that all APIkeys have been revoked\n        print([key.name for key in APIKey.ls(user=user)])\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    _keys = APIKey._get_key_names(keys)\n\n    response_list = []\n\n    for key_uuid in _keys:\n        url = f\"/{user_uuid}/apikey/{key_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return generate_df(response_list, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"airt_cli_docs/airt/","title":"<code>airt</code>","text":"<p>airt CLI for accessing airt services.</p> <p>Usage:</p> <pre><code>$ airt [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>api-key</code>: A set of commands for managing the ApiKeys...</li> <li><code>db</code>: A set of commands for importing and...</li> <li><code>ds</code>: A set of commands for managing datasources...</li> <li><code>model</code>: A set of commands for querying the model...</li> <li><code>pred</code>: A set of commands for managing and...</li> <li><code>token</code>: Get application token for airt service...</li> <li><code>user</code>: A set of commands for managing users and...</li> <li><code>version</code>: Return the server and client versions.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-api-key","title":"<code>airt api-key</code>","text":"<p>A set of commands for managing the ApiKeys in the server.</p> <p>Both the ApiKey and the token can be used for accessing the airt services. However, there is a  slight difference in generating and managing the two.</p> <p>For generating the ApiKey, you first need to get the developer token. Please refer to airt token command documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new ApiKeys and can set an  expiration date individually. You can also access other commands available as part of airt api-key sub-command to  list, revoke the ApiKeys at any time.</p> <p>Once the new API key is generated, please set it in the AIRT_SERVICE_TOKEN environment variable to start accessing the airt services with it.</p> <p>Usage:</p> <pre><code>$ airt api-key [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new ApiKey</li> <li><code>details</code>: Get the details of an ApiKey.</li> <li><code>ls</code>: Get the list of ApiKeys.</li> <li><code>revoke</code>: Revoke one or more ApiKeys</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-api-key-create","title":"<code>airt api-key create</code>","text":"<p>Create a new ApiKey</p> <p>Note</p> <ul> <li> <p>The name of the ApiKey must be unique. If not, an exception will be raised while creating a new key with an existing key's name.</p> </li> <li> <p>The expiry for an ApiKey is optional. If not passed, then the default value None will be used to create an ApiKey with no expiry date!</p> </li> </ul> <p>Usage:</p> <pre><code>$ airt api-key create [OPTIONS] NAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: The name of the ApiKey.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --expiry INTEGER</code>: The validity of the API key in number of days. If not passed, then the default value None will be used to create an ApiKey with no expiry date!</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if the MFA is enabled for your account.</li> <li><code>-q, --quiet</code>: Output access token only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-api-key-details","title":"<code>airt api-key details</code>","text":"<p>Get the details of an ApiKey.</p> <p>Usage:</p> <pre><code>$ airt api-key details [OPTIONS] APIKEY\n</code></pre> <p>Arguments:</p> <ul> <li><code>APIKEY</code>: ApiKey uuid/name.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-api-key-ls","title":"<code>airt api-key ls</code>","text":"<p>Get the list of ApiKeys.</p> <p>Usage:</p> <pre><code>$ airt api-key ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: user_uuid/username associated with the ApiKey. To get the user account uuid/username, use the <code>airt user details</code> command. If the user_uuid/username is not passed, then the currently logged-in user_uuid/username will be used.</li> <li><code>-o, --offset INTEGER</code>: The number of ApiKeys to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of ApiKeys to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then the disabled ApiKeys will also be included in the result.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only ApiKey uuids.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-api-key-revoke","title":"<code>airt api-key revoke</code>","text":"<p>Revoke one or more ApiKeys</p> <p>Usage:</p> <pre><code>$ airt api-key revoke [OPTIONS] KEYS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>KEYS...</code>: ApiKey uuid/name to revoke. To revoke multiple keys, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--user TEXT</code>: user_uuid/username associated with the ApiKey. To get the user account uuid/username, use the <code>airt user details</code> command. If the user_uuid/username is not passed, then the currently logged-in user_uuid/username will be used.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if the MFA is enabled for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only the revoked ApiKey uuid(s).</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db","title":"<code>airt db</code>","text":"<p>A set of commands for importing and processing data from sources such as CSV/parquet files, databases, AWS S3 buckets, and Azure Blob Storage.</p> <p>Usage:</p> <pre><code>$ airt db [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return details of a datablob.</li> <li><code>from-azure-blob-storage</code>: Create and return a datablob that...</li> <li><code>from-clickhouse</code>: Create and return a datablob that...</li> <li><code>from-local</code>: Create and return a datablob from local...</li> <li><code>from-mysql</code>: Create and return a datablob that...</li> <li><code>from-s3</code>: Create and return a datablob that...</li> <li><code>ls</code>: Return the list of datablobs.</li> <li><code>rm</code>: Delete a datablob from the server.</li> <li><code>tag</code>: Tag an existing datablob in the server.</li> <li><code>to-datasource</code>: Process the datablob and return a...</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-details","title":"<code>airt db details</code>","text":"<p>Return details of a datablob.</p> <p>Usage:</p> <pre><code>$ airt db details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datablob uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-from-azure-blob-storage","title":"<code>airt db from-azure-blob-storage</code>","text":"<p>Create and return a datablob that encapsulates the data from an Azure Blob Storage.</p> <p>Usage:</p> <pre><code>$ airt db from-azure-blob-storage [OPTIONS] URI\n</code></pre> <p>Arguments:</p> <ul> <li><code>URI</code>: Azure Blob Storage URI of the source file.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --credential TEXT</code>: Credential to access the Azure Blob Storage.  [required]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then azure  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-from-clickhouse","title":"<code>airt db from-clickhouse</code>","text":"<p>Create and return a datablob that encapsulates the data from a ClickHouse database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ airt db from-clickhouse [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Remote database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--protocol TEXT</code>: Protocol to use. The valid values are \"native\" and \"http\".  [required]</li> <li><code>--index-column TEXT</code>: The column to use as index (row labels).  [required]</li> <li><code>--timestamp-column TEXT</code>: Timestamp column name in the tabel.  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 0 will be used.  [default: 0]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, the default value 'root' will be used unless the value is explicitly set in the environment variable CLICKHOUSE_USERNAME.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, the default value '' will be used unless the value is explicitly set in the environment variable CLICKHOUSE_PASSWORD.</li> <li><code>-f, --filters-json TEXT</code>: Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass '{\"user_id\": 1}'.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-from-local","title":"<code>airt db from-local</code>","text":"<p>Create and return a datablob from local csv file.</p> <p>The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.</p> <p>Usage:</p> <pre><code>$ airt db from-local [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-p, --path TEXT</code>: The relative or absolute path to a local CSV/parquet file or to a directory containing the CSV/parquet files.  [required]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output data id only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-from-mysql","title":"<code>airt db from-mysql</code>","text":"<p>Create and return a datablob that encapsulates the data from a mysql database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the AIRT_CLIENT_DB_USERNAME and AIRT_CLIENT_DB_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ airt db from-mysql [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Remote database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 3306 will be used.  [default: 3306]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable AIRT_CLIENT_DB_USERNAME.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, the default value \"\" will be used unless the value is explicitly set in the environment variable AIRT_CLIENT_DB_PASSWORD.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-from-s3","title":"<code>airt db from-s3</code>","text":"<p>Create and return a datablob that encapsulates the data from an AWS S3 bucket.</p> <p>Usage:</p> <pre><code>$ airt db from-s3 [OPTIONS] URI\n</code></pre> <p>Arguments:</p> <ul> <li><code>URI</code>: The AWS S3 bucket uri.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--access-key TEXT</code>: Access key for the S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable is used.</li> <li><code>--secret-key TEXT</code>: Secret key for the S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable is used.</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, the datablob's source bucket region will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-ls","title":"<code>airt db ls</code>","text":"<p>Return the list of datablobs.</p> <p>Usage:</p> <pre><code>$ airt db ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of datablobs to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of datablobs to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted datablobs will be returned.Else, the default value False will be used to return only the listof active datablobs.</li> <li><code>--completed</code>: If set to True, then only the datablobs that are successfully downloadedto the server will be returned. Else, the default value False will be used toreturn all the datablobs.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only datablob uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-rm","title":"<code>airt db rm</code>","text":"<p>Delete a datablob from the server.</p> <p>Usage:</p> <pre><code>$ airt db rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datablob uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output the deleted datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-tag","title":"<code>airt db tag</code>","text":"<p>Tag an existing datablob in the server.</p> <p>Usage:</p> <pre><code>$ airt db tag [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datablob_uuid TEXT</code>: Datablob uuid in the server.  [required]</li> <li><code>-n, --name TEXT</code>: A string to tag the datablob.  [required]</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-db-to-datasource","title":"<code>airt db to-datasource</code>","text":"<p>Process the datablob and return a datasource object.</p> <p>Usage:</p> <pre><code>$ airt db to-datasource [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--uuid TEXT</code>: Datablob uuid.  [required]</li> <li><code>--file-type TEXT</code>: The file type of the datablob. Currently, the API only supports \"csv\" and \"parquet\" as file types.  [required]</li> <li><code>--index-column TEXT</code>: The column to use as index (row labels).  [required]</li> <li><code>--sort-by TEXT</code>: The column(s) to sort the data. Can either be a string or a JSON encoded list of strings.  [required]</li> <li><code>--deduplicate-data / --no-deduplicate-data</code>: If set to True (default value False), the datasource will be created with duplicate rows removed.  [default: no-deduplicate-data]</li> <li><code>--blocksize TEXT</code>: The number of bytes used to split larger files. If None, then the default value 256MB will be used.  [default: 256MB]</li> <li><code>--kwargs-json TEXT</code>: Additional JSON encoded dict arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file, pass '{\"skipfooter\": 100}'</li> <li><code>-q, --quiet</code>: Output datasource uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds","title":"<code>airt ds</code>","text":"<p>A set of commands for managing datasources and training ML models on them.</p> <p>Usage:</p> <pre><code>$ airt ds [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return details of a datasource.</li> <li><code>dtypes</code>: Return the dtypes of the datasource.</li> <li><code>head</code>: Return the first few rows of the datasource.</li> <li><code>ls</code>: Return the list of datasources.</li> <li><code>rm</code>: Delete a datasource from the server.</li> <li><code>tag</code>: Tag an existing datasource in server.</li> <li><code>train</code>: Train a model against the datasource.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-details","title":"<code>airt ds details</code>","text":"<p>Return details of a datasource.</p> <p>Usage:</p> <pre><code>$ airt ds details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-dtypes","title":"<code>airt ds dtypes</code>","text":"<p>Return the dtypes of the datasource.</p> <p>Usage:</p> <pre><code>$ airt ds dtypes [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-head","title":"<code>airt ds head</code>","text":"<p>Return the first few rows of the datasource.</p> <p>Usage:</p> <pre><code>$ airt ds head [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-ls","title":"<code>airt ds ls</code>","text":"<p>Return the list of datasources.</p> <p>Usage:</p> <pre><code>$ airt ds ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of datasources to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of datasources to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted datasources will be returned.Else, the default value False will be used to return only the listof active datasources.</li> <li><code>--completed</code>: If set to True, then only the datasources that are successfully downloadedto the server will be returned. Else, the default value False will be used toreturn all the datasources.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only datasource uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-rm","title":"<code>airt ds rm</code>","text":"<p>Delete a datasource from the server.</p> <p>Usage:</p> <pre><code>$ airt ds rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output the deleted datasource uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-tag","title":"<code>airt ds tag</code>","text":"<p>Tag an existing datasource in server.</p> <p>Usage:</p> <pre><code>$ airt ds tag [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datasource_uuid TEXT</code>: Datasource uuid.  [required]</li> <li><code>-n, --name TEXT</code>: A string to tag the datasource.  [required]</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-ds-train","title":"<code>airt ds train</code>","text":"<p>Train a model against the datasource.</p> <p>Usage:</p> <pre><code>$ airt ds train [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datasource_uuid TEXT</code>: Datasource uuid.  [required]</li> <li><code>--client_column TEXT</code>: The column name that uniquely identifies the users/clients.  [required]</li> <li><code>--timestamp_column TEXT</code>: The timestamp column indicating the time of an event. If not passed, then the default value None will be used. </li> <li><code>--target_column TEXT</code>: Target column name that indicates the type of the event.  [required]</li> <li><code>--target TEXT</code>: Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event.  [required]</li> <li><code>--predict_after TEXT</code>: Time delta in hours of the expected target event.  [required]</li> <li><code>-q, --quiet</code>: Output model uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model","title":"<code>airt model</code>","text":"<p>A set of commands for querying the model training, evaluation, and prediction status.</p> <p>Usage:</p> <pre><code>$ airt model [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return the details of a model.</li> <li><code>evaluate</code>: Return the evaluation metrics of the...</li> <li><code>ls</code>: Return the list of models.</li> <li><code>predict</code>: Run predictions against the trained model.</li> <li><code>rm</code>: Delete a model from the server.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model-details","title":"<code>airt model details</code>","text":"<p>Return the details of a model.</p> <p>Usage:</p> <pre><code>$ airt model details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Model uuid  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model-evaluate","title":"<code>airt model evaluate</code>","text":"<p>Return the evaluation metrics of the trained model.</p> <p>Currently, this command returns the model's accuracy, precision, and recall. In the future, more performance metrics will be added.</p> <p>Usage:</p> <pre><code>$ airt model evaluate [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Model uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model-ls","title":"<code>airt model ls</code>","text":"<p>Return the list of models.</p> <p>Usage:</p> <pre><code>$ airt model ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of models to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of models to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted models will be returned. Else, the default value False will be used to return only the list of active models.</li> <li><code>--completed</code>: If set to True, then only the models that are successfully downloaded to the server will be returned. Else, the default value False will be used to return all the models.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only uuids of model separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model-predict","title":"<code>airt model predict</code>","text":"<p>Run predictions against the trained model.</p> <p>Usage:</p> <pre><code>$ airt model predict [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--data_uuid TEXT</code>: DataSource uuid.  [required]</li> <li><code>--uuid TEXT</code>: Model uuid.  [required]</li> <li><code>-q, --quiet</code>: Output the prediction id only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-model-rm","title":"<code>airt model rm</code>","text":"<p>Delete a model from the server.</p> <p>Usage:</p> <pre><code>$ airt model rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Model uuid  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output the deleted Model uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred","title":"<code>airt pred</code>","text":"<p>A set of commands for managing and downloading the predictions.</p> <p>Usage:</p> <pre><code>$ airt pred [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return the details of a prediction.</li> <li><code>ls</code>: Return the list of predictions.</li> <li><code>rm</code>: Delete a prediction from the server.</li> <li><code>to-azure-blob-storage</code>: Push the prediction results to the target...</li> <li><code>to-clickhouse</code>: Push the prediction results to a...</li> <li><code>to-local</code>: Download the prediction results to a local...</li> <li><code>to-mysql</code>: Push the prediction results to a mysql...</li> <li><code>to-pandas</code>: Return the prediction results as a pandas...</li> <li><code>to-s3</code>: Push the prediction results to the target...</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-details","title":"<code>airt pred details</code>","text":"<p>Return the details of a prediction.</p> <p>Usage:</p> <pre><code>$ airt pred details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-ls","title":"<code>airt pred ls</code>","text":"<p>Return the list of predictions.</p> <p>Usage:</p> <pre><code>$ airt pred ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of predictions to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of predictions to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted predictions will be returned. Else, the default value False will be used to return only the list of active predictions.</li> <li><code>--completed</code>: If set to True, then only the predictions that are successfully downloaded to the server will be returned. Else, the default value False will be used to return all the predictions.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only prediction uuids separated by space.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-rm","title":"<code>airt pred rm</code>","text":"<p>Delete a prediction from the server.</p> <p>Usage:</p> <pre><code>$ airt pred rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-q, --quiet</code>: Output the deleted Prediction uuid only.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-azure-blob-storage","title":"<code>airt pred to-azure-blob-storage</code>","text":"<p>Push the prediction results to the target Azure Blob Storage.</p> <p>Usage:</p> <pre><code>$ airt pred to-azure-blob-storage [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--uri TEXT</code>: Target Azure Blob Storage uri.  [required]</li> <li><code>-c, --credential TEXT</code>: Credential to access the Azure Blob Storage.  [required]</li> <li><code>-q, --quiet</code>: Output status only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-clickhouse","title":"<code>airt pred to-clickhouse</code>","text":"<p>Push the prediction results to a clickhouse database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ airt pred to-clickhouse [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Remote database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--protocol TEXT</code>: Protocol to use (native/http).  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 0 will be used.  [default: 0]</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, then the value set in the environment variable CLICKHOUSE_USERNAME will be used else the default value root will be used.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, then the value set in the environment variable CLICKHOUSE_PASSWORD will be used else the default value \"\" will be used.</li> <li><code>-q, --quiet</code>: Output status only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-local","title":"<code>airt pred to-local</code>","text":"<p>Download the prediction results to a local directory.</p> <p>Usage:</p> <pre><code>$ airt pred to-local [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--path TEXT</code>: Local directory path.  [required]</li> <li><code>-q, --quiet</code>: Output status only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-mysql","title":"<code>airt pred to-mysql</code>","text":"<p>Push the prediction results to a mysql database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the AIRT_CLIENT_DB_USERNAME and AIRT_CLIENT_DB_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ airt pred to-mysql [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 3306 will be used.  [default: 3306]</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_USERNAME will be used else the default value root will be used.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, then the value set in the environment variable AIRT_CLIENT_DB_PASSWORD will be used else the default value \"\" will be used.</li> <li><code>-q, --quiet</code>: Output status only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-pandas","title":"<code>airt pred to-pandas</code>","text":"<p>Return the prediction results as a pandas DataFrame.</p> <p>Usage:</p> <pre><code>$ airt pred to-pandas [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-pred-to-s3","title":"<code>airt pred to-s3</code>","text":"<p>Push the prediction results to the target AWS S3 bucket.</p> <p>Usage:</p> <pre><code>$ airt pred to-s3 [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Prediction uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--uri TEXT</code>: The target S3 bucket uri.  [required]</li> <li><code>--access-key TEXT</code>: Access key for the target S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable is used.</li> <li><code>--secret-key TEXT</code>: Secret key for the target S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable is used.</li> <li><code>-q, --quiet</code>: Output status only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-token","title":"<code>airt token</code>","text":"<p>Get application token for airt service from a username/password pair.</p> <p>To access the airt service, you must first create a developer account. To obtain one, please contact us at info@airt.ai.</p> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by running airt token command. It is necessary to get an access token; otherwise, you won't be able to access all of the airt service's APIs. You can either pass the username, password, and server address as command line arguments or store them in the environment variables AIRT_SERVICE_USERNAME, AIRT_SERVICE_PASSWORD, and AIRT_SERVER_URL.</p> <p>If you've already enabled multi-factor authentication (MFA) for your account, you'll need to pass the dynamically generated six-digit verification code along with your username and password to generate new tokens.</p> <p>If the token is requested using Single sign-on (SSO), an authorization URL will be returned. Please copy and paste it into your preferred browser and complete the SSO provider authentication within 10 minutes. Otherwise, the SSO login will time out and you will need to re-request the token.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the command <code>airt user sso enable</code> with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the <code>airt token</code> command with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, an access token will be generated and returned. Please set it in the AIRT_SERVICE_TOKEN environment variable for accessing the airt service.</p> </li> </ol> <p>Usage:</p> <pre><code>$ airt token [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --username TEXT</code>: Username for the developer account. If None (default value), then the value from AIRT_SERVICE_USERNAME environment variable is used.</li> <li><code>-p, --password TEXT</code>: Password for the developer account. If None (default value), then the value from AIRT_SERVICE_PASSWORD environment variable is used.</li> <li><code>-s, --server TEXT</code>: The airt server uri. If None (default value), then the value from AIRT_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@airt.ai for that possibility).</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS. Please do not pass this parameter if you haven't enabled the multi-factor authentication for your account.</li> <li><code>-sp, --sso_provider TEXT</code>: Name of the Single sign-on (SSO) provider. At the moment, we only support google and github as SSO providers. Please pass this parameter only if you have successfully enabled SSO for the provider.</li> <li><code>-q, --quiet</code>: Output authentication token only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user","title":"<code>airt user</code>","text":"<p>A set of commands for managing users and their authentication in the server.</p> <p>Usage:</p> <pre><code>$ airt user [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new user in the server.</li> <li><code>details</code>: Get user details</li> <li><code>disable</code>: Disable a user in the server.</li> <li><code>enable</code>: Enable a disabled user in the server.</li> <li><code>ls</code>: Return the list of users available in the...</li> <li><code>mfa</code>: Commands for enabling and disabling...</li> <li><code>register-phone-number</code>: Register and validate a phone number</li> <li><code>reset-password</code>: Reset the account password</li> <li><code>sso</code>: Commands for enabling and disabling Single...</li> <li><code>update</code>: Update existing user details in the server.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-create","title":"<code>airt user create</code>","text":"<p>Create a new user in the server.</p> <p>Usage:</p> <pre><code>$ airt user create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-un, --username TEXT</code>: The new user's username. The username must be unique or an exception will be thrown.  [required]</li> <li><code>-fn, --first_name TEXT</code>: The new user's first name.  [required]</li> <li><code>-ln, --last_name TEXT</code>: The new user's last name.  [required]</li> <li><code>-e, --email TEXT</code>: The new user's email. The email must be unique or an exception will be thrown.  [required]</li> <li><code>-p, --password TEXT</code>: The new user's password.  [required]</li> <li><code>-st, --subscription_type TEXT</code>: User subscription type. Currently, the API supports only the following subscription types small, medium and large.  [required]</li> <li><code>-su, --super_user</code>: If set to True, then the new user will have super user privilages. If None, then the default value False will be used to create a non-super user.</li> <li><code>-ph, --phone_number TEXT</code>: Phone number to be added to the user account. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789,and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-details","title":"<code>airt user details</code>","text":"<p>Get user details</p> <p>Please do not pass the optional 'user' option unless you are a super user. Only a super user can view details for other users.</p> <p>Usage:</p> <pre><code>$ airt user details [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to get details. If not passed, then the currently logged-in details will be returned.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-disable","title":"<code>airt user disable</code>","text":"<p>Disable a user in the server.</p> <p>Usage:</p> <pre><code>$ airt user disable [OPTIONS] USERS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>USERS...</code>: user_uuid/username to disabled.  To disable multiple users, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-enable","title":"<code>airt user enable</code>","text":"<p>Enable a disabled user in the server.</p> <p>Usage:</p> <pre><code>$ airt user enable [OPTIONS] USERS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>USERS...</code>: user_uuid/username to enable. To enable multiple users, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-ls","title":"<code>airt user ls</code>","text":"<p>Return the list of users available in the server.</p> <p>Usage:</p> <pre><code>$ airt user ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of users to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of users to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted users will be returned. Else, the default value False will be used to return only the list of active users.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only user uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-mfa","title":"<code>airt user mfa</code>","text":"<p>Commands for enabling and disabling Multi-Factor Authentication (MFA).</p> <p>Usage:</p> <pre><code>$ airt user mfa [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>disable</code>: Disable Multi-Factor Authentication (MFA)...</li> <li><code>enable</code>: Enable Multi-Factor Authentication (MFA)...</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-mfa-disable","title":"<code>airt user mfa disable</code>","text":"<p>Disable Multi-Factor Authentication (MFA) for the user.</p> <p>The command switches to interactive mode unless the OTP argument is passed. The interactive mode will prompt you to choose an OTP option you want to use. Currently, we only support disabling MFA either using a TOTP or SMS OTP.</p> <p>If you have access to the authenticator application, then you can either enter the dynamically generated six-digit verification code from the authenticator app (TOTP) or request an OTP via SMS to your registered phone number.</p> <p>After selecting an option, please follow the on-screen instructions to disable MFA for your account. In case, you don't have access to the authenticator app and your registered phone number, please contact your administrator.</p> <p>Note: Please do not pass the user argument unless you are a super user. Only a super user can disable MFA for other users.</p> <p>Usage:</p> <pre><code>$ airt user mfa disable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable MFA for the currently logged-in user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-mfa-enable","title":"<code>airt user mfa enable</code>","text":"<p>Enable Multi-Factor Authentication (MFA) for the user.</p> <p>This is an interactive command and will generate a QR code. You can use an authenticator app, such as Google Authenticator to scan the code and enter the valid six-digit verification code from the authenticator app in the interactive prompt to enable and activate MFA for your account.</p> <p>After three invalid attempts, you have to call this command again to generate a new QR code.</p> <p>Usage:</p> <pre><code>$ airt user mfa enable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-register-phone-number","title":"<code>airt user register-phone-number</code>","text":"<p>Register and validate a phone number</p> <p>This is an interactive command, one called it will send an OTP via SMS to the phone number. Please enter the OTP you have received in the interactive prompt to complete the phone number registration process.</p> <p>After ten invalid OTP attempts, you have to call this command again to register the phone number.</p> <p>Usage:</p> <pre><code>$ airt user register-phone-number [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-p, --phone-number TEXT</code>: Phone number to register. The phone number should follow the pattern of the  country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to the phone  number that was already registered to the user's account.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-reset-password","title":"<code>airt user reset-password</code>","text":"<p>Reset the account password</p> <pre><code>We currently support two types of OTPs to reset the password for your account and you don't have to be logged in to call this command\n</code></pre> <p>The command switches to interactive mode unless all arguments are passed. The interactive mode will prompt you for the missing details and ask you to choose a recovery option to reset your password. Currently, we only support resetting the password either using a TOTP or SMS OTP.</p> <p>If you have already activated the MFA for your account, then you can either enter the dynamically generated six-digit verification code from the authenticator app (TOTP) or request an OTP via SMS to your registered phone number.</p> <p>If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.</p> <p>After selecting an option, please follow the on-screen instructions to reset your password. In case, you don't have MFA enabled or don't have access to your registered phone number, please contact your administrator.</p> <p>Usage:</p> <pre><code>$ airt user reset-password [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --username TEXT</code>: Account username to reset the password</li> <li><code>-np, --new-password TEXT</code>: New password to set for the account</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-sso","title":"<code>airt user sso</code>","text":"<p>Commands for enabling and disabling Single sign-on (SSO).</p> <p>Usage:</p> <pre><code>$ airt user sso [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>disable</code>: Disable Single sign-on (SSO) for the user.</li> <li><code>enable</code>: Enable Single sign-on (SSO) for the user</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-sso-disable","title":"<code>airt user sso disable</code>","text":"<p>Disable Single sign-on (SSO) for the user.</p> <p>Please do not pass the user argument unless you are a super user. Only a super user can disable SSO for other users.</p> <p>Usage:</p> <pre><code>$ airt user sso disable [OPTIONS] SSO_PROVIDER\n</code></pre> <p>Arguments:</p> <ul> <li><code>SSO_PROVIDER</code>: Name of the Single sign-on (SSO) identity provider. At present, the API only supports Google and Github as valid SSO identity providers.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable SSO for the currently logged-in user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-sso-enable","title":"<code>airt user sso enable</code>","text":"<p>Enable Single sign-on (SSO) for the user</p> <p>Usage:</p> <pre><code>$ airt user sso enable [OPTIONS] SSO_PROVIDER\n</code></pre> <p>Arguments:</p> <ul> <li><code>SSO_PROVIDER</code>: Name of the Single sign-on (SSO) identity provider. At present, the API only supports Google\u00a0and\u00a0Github as valid SSO identity providers.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --email TEXT</code>: Email id going to be used for SSO authentication.  [required]</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-user-update","title":"<code>airt user update</code>","text":"<p>Update existing user details in the server.</p> <p>Please do not pass the optional user option unless you are a super user. Only a super user can update details for other users.</p> <p>Usage:</p> <pre><code>$ airt user update [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--user TEXT</code>: Account user_uuid/username to update. If not passed, then the default value None will be used to update the currently logged-in user details.</li> <li><code>-un, --username TEXT</code>: New username for the user.</li> <li><code>-fn, --first_name TEXT</code>: New first name for the user.</li> <li><code>-ln, --last_name TEXT</code>: New last name for the user.</li> <li><code>-e, --email TEXT</code>: New email for the user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"airt_cli_docs/airt/#airt-version","title":"<code>airt version</code>","text":"<p>Return the server and client versions.</p> <p>Usage:</p> <pre><code>$ airt version [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"}]}